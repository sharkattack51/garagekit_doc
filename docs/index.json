{
  "Scripts_en/AppMain.html": {
    "href": "Scripts_en/AppMain.html",
    "title": "AppMain | Project Starter Package Doc",
    "keywords": "AppMain A singleton instance that is responsible for the reference route to each manager. namespace GarageKit public class AppMain : MonoBehaviour Inheritance AppMain -> MonoBehaviour Inspector Properties member type description asDontDestroyOnLoad bool When used in multiple scenes, it is shared between scenes without being discarded when moving scenes. Static Methods Get a singleton instance public static AppMain Instance { get; } Example // Routing to each manager AppMain.Instance.sceneStateManager.ChangeState(\"PLAY\"); AppMain.Instance.soundManager.Play(\"SE\", \"CLICK\");"
  },
  "Scripts_en/Managers/DebugManager.html": {
    "href": "Scripts_en/Managers/DebugManager.html",
    "title": "DebugManager | Project Starter Package Doc",
    "keywords": "DebugManager Manage functions for debugging. It is useful to have all debugging functionality managed by the isDebug flag. namespace GarageKit [RequireComponent(typeof(VisibleMouseCursor))] public class DebugManager : ManagerBase Inheritance DebugManager -> ManagerBase -> MonoBehaviour Inspector Properties member type description isDebug bool Debug state management flag useIngameDebugConsole bool use package IngameDebugConsole useGraphy bool use package Graphy Example // Check debug status if(AppMain.Instance.debugManager.isDebug) Debug.Log(\"debug is true\");"
  },
  "Scripts_en/Managers/SceneStateManager.html": {
    "href": "Scripts_en/Managers/SceneStateManager.html",
    "title": "SceneStateManager | Project Starter Package Doc",
    "keywords": "SceneStateManager Manage state transition functionality. Place and manage state objects that inherit StateBase under the SceneStateManager hierarchy. namespace GarageKit public class SceneStateManager : ManagerBase Inheritance SceneStateManager -> ManagerBase -> MonoBehaviour Inspector Properties member type description sceneStateTable List<SceneStateData> State transition information table Methods Current state information public SceneStateData CurrentState { get; } Previous state name public string FromStateName { get; } State transition processing flag public bool StateChanging { get; } State transition fade processing flag public bool AsyncChangeFading { get; } State initialization completion flag public bool StateInitted { get; } Get state object from scene public T FindStateObjectOfType<T>() where T : StateBase public StateBase FindStateObjectByName(string stateName) Transition to initial state. called WaitForEndOfFrame() from Start() in AppMain. public void InitState() Transition to specified state public void ChangeState(string stateName, object context = null) Transition with fade to specified state public void ChangeAsyncState(string stateName, object context = null) Example // Transition to specified state AppMain.Instance.sceneStateManager.ChangeState(\"PLAY\"); // Transition with fade by passing parameters to specified state AppMain.Instance.sceneStateManager.ChangeAsyncState(\"PLAY\", \"param\"); SceneStateData State transition information structure namespace GarageKit [Serializable] public class SceneStateData Properties member type description stateName string State name stateObj StateBase Reference to state object asInitial bool Initial state flag"
  },
  "Scripts_en/Managers/SoundManager.html": {
    "href": "Scripts_en/Managers/SoundManager.html",
    "title": "SoundManager | Project Starter Package Doc",
    "keywords": "SoundManager Manage sound features. The AudioSource required for playback is automatically generated and managed internally. namespace GarageKit public class SoundManager : ManagerBase Inheritance SoundManager -> ManagerBase -> MonoBehaviour Inspector Properties member type description soundLayers List<SoundLayerData> Sound setting soundLayers3D List<Sound3DLayerData> 3D Sound setting SoundLayers Dictionary<string, SoundLayerData> Table with sound layer names SoundLayers3D Dictionary<string, Sound3DLayerData> Table with 3D sound layer names masterMixerGroup AudioMixerGroup Option: Master mixer group decibelByStep AnimationCurve Option: Master volume step adjustment curve Methods Add sound layer public void AddLayer(SoundLayerData layer) Add AudioClip to sound layer public void AddClip(string layerName, string clipName, AudioClip clip) Sound playback public void Play(string layerName, string clipName, bool overlap = false) public void Play(string layerName, string clipName, bool overlap, bool loop, bool asOneShot) Playback status of the sound layer public bool IsPlay(string layerName) Stop sound playback public void Stop(string layerName = \"\") Stop playing all sounds public void StopAll(string layerName = \"\") Add 3D sound layer public void AddLayer3D(Sound3DLayerData layer) 3D 音声レイヤーに 3D 音声ソースの追加 Add 3D AudioSource to 3D sound layer public void AddSource3D(string layerName, string sourceName, AudioSource source) 3D sound playback public void Play3D(string layerName, string sourceName, bool overlap = false) public void Play3D(string layerName, string sourceName, bool overlap, bool loop, bool asOneShot) Playback status of the 3D sound layer public bool IsPlay3D(string layerName, string sourceName) Stop 3D sound playback public void Stop3D(string layerName = \"\", string sourceName = \"\") Stop playing all 3D sounds public void Stop3DAll(string layerName = \"\") Fade in all sounds public void FadeInAllSound(float time = 1.0f) Fade out all sounds public void FadeOutAllSound(float time = 1.0f) Fade of specified sound public void Fade(string layerName, float fromVol, float toVol, float time) Fade of specified 3D sound public void Fade3D(string layerName, string sourceName, float fromVol, float toVol, float time) Setting the master volume public void SetMasterVol(float vol, string exposeProperty = \"MasterVolume\") Master volume step up one public void MasterVolUp(string exposeProperty = \"MasterVolume\") Master volume step down one public void MasterVolDown(string exposeProperty = \"MasterVolume\") Example // Normal playback AppMain.Instance.soundManager.Play(\"SE\", \"CLICK\"); // Loop playback without overlap AppMain.Instance.soundManager.Play(\"BGM\", \"CLIP\", false, true); SoundClipData Clip information structure namespace GarageKit [Serializable] public class SoundClipData Properties member type description clipName string Clip name clip AudioClip AudioClip reference SoundData Sound information structure namespace GarageKit [Serializable] public class SoundData Properties member type description use bool Use it or not volume float Sound volume clips List<SoundClipData> Clip information list SoundLayerData Layer information structure namespace GarageKit [Serializable] public class SoundLayerData Properties member type description layerName string Layer name soundData SoundData Sound information Methods Disable processing for each layer public bool IgnoreAllMethod { get; set; } SoundSourceData 3D sound source information structure namespace GarageKit [Serializable] public class SoundSourceData Properties member type description sourceName string 3D sound source name source AudioSource AudioSource reference Sound3DData 3D sound information structure namespace GarageKit [Serializable] public class Sound3DData Properties member type description use bool Use it or not volume float SOund volume sources List<SoundSourceData> 3D sound source information list Sound3DLayerData 3D layer information structure namespace GarageKit [Serializable] public class Sound3DLayerData Properties member type description layerName string Layer name soundData Sound3DData Sound information Methods Disable processing for each layer public bool IgnoreAllMethod { get; set; }"
  },
  "Scripts_en/Managers/TimeManager.html": {
    "href": "Scripts_en/Managers/TimeManager.html",
    "title": "TimeManager | Project Starter Package Doc",
    "keywords": "TimeManager Manage timer functions. Register and use TimerEvent. By default, MainTimer is registered. namespace GarageKit public class TimeManager : ManagerBase Inheritance TimeManager -> ManagerBase -> MonoBehaviour Inspector Properties member type description timerEvents List<TimerEvent> タイマーイベントリスト Methods Get reference to main timer public TimerEvent mainTimer { get; } Example // Added timer completion event AppMain.Instance.timeManager.mainTimer.OnCompleteTimer += (sender) => { Debug.Log(\"on complete timer\"); }; // Start time count 10 seconds AppMain.Instance.timeManager.mainTimer.StartTimer(10);"
  },
  "Scripts_en/Managers/UserInputManager.html": {
    "href": "Scripts_en/Managers/UserInputManager.html",
    "title": "UserInputManager | Project Starter Package Doc",
    "keywords": "UserInputManager Manage user input functionality. It is convenient to collect all user input code here. namespace GarageKit public class UserInputManager : ManagerBase Inheritance UserInputManager -> ManagerBase -> MonoBehaviour Example Default implemented key: Key Function Esc Quit application D Toggle debugging features R Reload ApplicationSetting.xml Backspace Capture the current GameView and save the image to the desktop"
  },
  "Scripts_en/Utils/ARFoundationExtention/ARCameraSync.html": {
    "href": "Scripts_en/Utils/ARFoundationExtention/ARCameraSync.html",
    "title": "ARCameraSync | Project Starter Package Doc",
    "keywords": "ARCameraSync Synchronize AR camera objects and parameters. Important When using it, please enable #define definition in the source code. namespace GarageKit.ARFoundationExtention [RequireComponent(typeof(Camera))] public class ARCameraSync : MonoBehaviour Inheritance ARCameraSync -> MonoBehaviour Inspector Properties member type description arCameraManager ARCameraManager ARCameraManager reference syncFov bool Camera FOV sync settings syncPosition bool Camera position sync settings syncRotation bool Camera rotation sync settings asLocal bool Sync as local coordinate"
  },
  "Scripts_en/Utils/ARFoundationExtention/ARCoreCoachingView.html": {
    "href": "Scripts_en/Utils/ARFoundationExtention/ARCoreCoachingView.html",
    "title": "ARCoreCoachingView | Project Starter Package Doc",
    "keywords": "ARCoreCoachingView When using Android ARCore, you can imitate iOS ARKit's coaching view display. Important When using it, please enable #define definition in the source code. namespace GarageKit.ARFoundationExtention public class ARCoreCoachingView : MonoBehaviour Inheritance ARCoreCoachingView -> MonoBehaviour Inspector Properties member type description planeManager ARPlaneManager ARPlaneManager reference view CanvasGroup View group Methods Enabling view public void ActivateCoaching() Disabling view public void DisableCoaching()"
  },
  "Scripts_en/Utils/ARFoundationExtention/ARKitCoachingOverlay.html": {
    "href": "Scripts_en/Utils/ARFoundationExtention/ARKitCoachingOverlay.html",
    "title": "ARKitCoachingOverlay | Project Starter Package Doc",
    "keywords": "ARKitCoachingOverlay Controls the coaching view of iOS ARKit's native functionality. https://developer.apple.com/documentation/arkit/arcoachingoverlayview Important When using it, please enable #define definition in the source code. namespace GarageKit.ARFoundationExtention [RequireComponent(typeof(ARSession))] public class ARKitCoachingOverlay : MonoBehaviour Inheritance ARKitCoachingOverlay -> MonoBehaviour Inspector Properties member type description Goal CoachingGoal Goals to direct tracking requirements ActivatesAutomatically bool auto enable Enums CoachingGoal enums description Tracking World tracking HorizontalPlane Horizontal plane tracking VerticalPlane Vertical plane tracking AnyPlane Any plane tracking Methods Check support for coaching function public bool supported { get; } Enabling coaching public void ActivateCoaching(bool animated) Disabling coaching public void DisableCoaching(bool animated)"
  },
  "Scripts_en/Utils/ARFoundationExtention/ARObjectPlacementManager.html": {
    "href": "Scripts_en/Utils/ARFoundationExtention/ARObjectPlacementManager.html",
    "title": "ARObjectPlacementManager | Project Starter Package Doc",
    "keywords": "ARObjectPlacementManager Place AR object by ARRaycastHit on touch input. Important When using it, please enable #define definition in the source code. namespace GarageKit.ARFoundationExtention public class ARObjectPlacementManager : MonoBehaviour Inheritance ARObjectPlacementManager -> MonoBehaviour Inspector Properties member type description raycastManager ARRaycastManager ARRaycastManager reference isInstantiate bool Enabling instance placement instantiateRef GameObject Prefab to instantiate from touchBlockers RectTransform[] UI object list that blocks touch input judgment Methods Reference to last placed AR object public IPlacableObject PlacableObj { get; } IPlacableObject Interface of AR object to place namespace GarageKit.ARFoundationExtention public interface IPlacableObject Methods Callback called by SendMessage void OnPlace();"
  },
  "Scripts_en/Utils/ARFoundationExtention/ARSessionStartHelper.html": {
    "href": "Scripts_en/Utils/ARFoundationExtention/ARSessionStartHelper.html",
    "title": "ARSessionStartHelper | Project Starter Package Doc",
    "keywords": "ARSessionStartHelper Helper class for the ARSession component. Automatically manages installation confirmation of the AR system on the device and start of an AR session. Important When using it, please enable #define definition in the source code. namespace GarageKit.ARFoundationExtention [RequireComponent(typeof(ARSession))] public class ARSessionStartHelper : MonoBehaviour Inheritance ARSessionStartHelper -> MonoBehaviour Inspector Properties member type description arSession ARSession ARSession reference Methods AR system initialization fails callback public Action OnFailARSession Callback when requesting installation of AR library (ARCore) public Action OnRequestARLibInstall AR system initialization completion callback public Action OnReadyAR"
  },
  "Scripts_en/Utils/ARFoundationExtention/ARTrackedImageMarkerManager.html": {
    "href": "Scripts_en/Utils/ARFoundationExtention/ARTrackedImageMarkerManager.html",
    "title": "ARTrackedImageMarkerManager | Project Starter Package Doc",
    "keywords": "ARTrackedImageMarkerManager Manage the tracking functionality of AR image markers. You can use the object generation function at the start of marker recognition and the events at the start and end of recognition. Important When using it, please enable #define definition in the source code. namespace GarageKit.ARFoundationExtention [DisallowMultipleComponent] [RequireComponent(typeof(ARTrackedImageManager))] public class ARTrackedImageMarkerManager : MonoBehaviour Inheritance ARTrackedImageMarkerManager -> MonoBehaviour Inspector Properties member type description trackedImageMarkerDatas List<ARTrackedImageMarkerData> Image marker to be generated Prefab data list destroyOnInvisible bool Perform automatic Destroy based on offscreen detection numberOfTrackingImage int Maximum number of images that can be tracked simultaneously Methods Image table during tracking public Dictionary<string, ARTrackedImage> TrackedImages { get; } Callback when image marker recognition starts public Action<ARTrackedImage> OnAddedImageMarker Callback when image marker recognition ends public Action<ARTrackedImage> OnRemoveImageMarker Deleting image marker name from tracking marker public void RemoveImageMarkerByImageName(string imageName) Resetting all tracking markers public void ResetImageMarkers() ARTrackedImageMarkerData Structure of generated prefab data corresponding to image marker namespace GarageKit.ARFoundationExtention [Serializable] public class ARTrackedImageMarkerData Properties member type description imageName string image marker name imageMarkerPrefab GameObject Reference of prefab to generate"
  },
  "Scripts_en/Utils/AndroidRuntimePermission.html": {
    "href": "Scripts_en/Utils/AndroidRuntimePermission.html",
    "title": "AndroidRuntimePermission | Project Starter Package Doc",
    "keywords": "AndroidRuntimePermission Automates the runtime permission request procedure when running Android. It also provides related utility functions. namespace GarageKit public class AndroidRuntimePermission : ManagerBase Inheritance AndroidRuntimePermission -> MonoBehaviour Inspector Properties member type description permissions string[] Android permission string list Methods Callback on success public Action OnVerifiedPermission Callback on failure public Action OnFailurePermission Static Methods Get current activity public static AndroidJavaObject GetActivity() Check that the OS version is Android M (Android 6.0 API level 23) or later public static bool IsAndroidMOrGreater() Check have permissions public static bool HasPermission(string permission) If you previously denied permission, have you selected \"Don't show this again\" (should a dialog be displayed)? public static bool ShouldShowRequestPermissionRationale(string permission) Show dialog when requesting permission public static void RequestPermission(string[] permissions)"
  },
  "Scripts_en/Utils/AndroidUtil.html": {
    "href": "Scripts_en/Utils/AndroidUtil.html",
    "title": "AndroidUtil | Project Starter Package Doc",
    "keywords": "AndroidUtil Provides utility functions for Android. namespace GarageKit public class AndroidUtil Static Methods Get path to internal data area public static string FileDir() Get path to internal cache area public static string CacheDir() Get path to external data area public static string ExternalFilesDir() Get path to external cache area public static string ExternalCacheDir() Get path to external strage public static string ExternalStorageDir() Get path to public area in external strage public static string ExternalStoragePublicDir() Get path to download directory public static string DownloadDir() Open specified activity public static void OpenActivity(string packageName, string className, bool asNewTask) Sending broadcast messages to the system public static void SendBroadcast(string action) Get API level public static int GetApiLevel() Requesting file access permissions on Android 11 and above public static void RequestAllFilesAccessPermission()"
  },
  "Scripts_en/Utils/AnimationCurveUtil.html": {
    "href": "Scripts_en/Utils/AnimationCurveUtil.html",
    "title": "AnimationCurveUtil | Project Starter Package Doc",
    "keywords": "AnimationCurveUtil Provides utility functions related to animation curve settings. reference: UnityEditor.CurveUtility.cs (c) Unity Technologies namespace GarageKit public class AnimationCurveUtil Static Methods Set animation curve interpolation to linear public static void UpdateAllLinearTangents(AnimationCurve curve) Tangent mode update of animation curve specified keyframe public static void UpdateTangentsFromMode(AnimationCurve curve, int index) Generating and acquiring new keyframes public static Keyframe GetNewKey(float time, float value, TangentMode leftAndRight) public static Keyframe GetNewKey(float time, float value, TangentMode left, TangentMode right) Get keyframe tangent mode public static TangentMode GetKeyTangentMode(int tangentMode, int leftRight) public static TangentMode GetKeyTangentMode(Keyframe keyframe, int leftRight) Disconnect the left and right handles of the key frame public static void SetKeyBroken(object keyframe, bool broken) Enums TangentMode enums description Editable custom interpolation Smooth smooth curve interpolation Linear liner line interpolation Stepped step interpolation"
  },
  "Scripts_en/Utils/AnimationUtil.html": {
    "href": "Scripts_en/Utils/AnimationUtil.html",
    "title": "AnimationUtil | Project Starter Package Doc",
    "keywords": "AnimationUtil Provides animation related utility functions. namespace GarageKit public class AnimationUtil Static Methods Animation component Rewind, reset and stop the current clip public static void RewindReset(Animation anim)"
  },
  "Scripts_en/Utils/Application/ApplicationSetting.html": {
    "href": "Scripts_en/Utils/Application/ApplicationSetting.html",
    "title": "ApplicationSetting | Project Starter Package Doc",
    "keywords": "ApplicationSetting You can load the external settings file ApplicationSetting.xml and reflect it in the application. xml is loaded by MonoBehaviour's Awake(), so it can be used after Start(). namespace GarageKit public class ApplicationSetting : MonoBehaviour Inheritance ApplicationSetting -> MonoBehaviour Inspector Properties member type description loadFrom XML_FROM Where to load the xml file xmlFile string xml file name Enums XML_FROM enums description STREAMING_ASSETS from StreasmingAssets folder PROJECT_DIRECTORY from Project folder CURRENT_WORK_DIRECTORY from Current folder Static Methods Get a singleton instance public static ApplicationSetting Instance { get; } Methods Xml data table public Dictionary<string, string> RawData { get; } Check data validity public bool IsValid { get; } Xml load completion callback public Action OnLoadXML Load xml public void LoadXML() Get string value from xml item name public string GetString(string key, string defaultValue = \"\") Get bool value from xml item name public bool GetBool(string key, bool defaultValue = false) Get int value from xml item name public int GetInt(string key, int defaultValue = 0) Get float value from xml item name public float GetFloat(string key, float defaultValue = 0.0f) Get string array from xml item name public string[] GetStringArray(string key, string separator = \",\") Get int array from xml item name public int[] GetIntArray(string key, string separator = \",\", int defaultValue = 0) Get float array from xml item name public float[] GetFloatArray(string key, string separator = \",\", float defaultValue = 0.0f) Get bool array from xml item name public bool[] GetBoolArray(string key, string separator = \",\", bool defaultValue = false) Get formatted DateTime from xml item name public DateTime GetFormattedDateTime(string key, string format = \"HH:mm:ss\") Get DateTime value from xml item name public DateTime GetDateTime(string key) Get Vector3 value from xml item name public Vector3 GetVector3(string key, string separator = \",\", Vector3 defaultValue = default(Vector3)) Get Vector2 value from xml item name public Vector2 GetVector2(string key, string separator = \",\", Vector2 defaultValue = default(Vector2)) Get Color value as RGB 0.0-1.0 from xml item name public Color GetColor(string key, string separator = \",\", Color defaultValue = default(Color)) Get Color value as RGB 0-255 from xml item name public Color GetColor255(string key, string separator = \",\", Color defaultValue = default(Color)) Example /Scenes/Examples/ApplicationSettingExample.unity bool isDebug = ApplicationSetting.Instance.GetBool(\"IsDebug\"); int gameTime = ApplicationSetting.Instance.GetInt(\"GameTime\"); string text = ApplicationSetting.Instance.GetString(\"Text\"); StreamingAssets/ApplicationSetting.xml <?xml version=\"1.0\" encoding=\"utf-8\"?> <data> <item name=\"IsDebug\" value=\"true\"/> <item name=\"GameTime\" value=\"10\"/> <item name=\"Text\" value=\"this is test.\"/> </data>"
  },
  "Scripts_en/Utils/Application/ExternalProcess.html": {
    "href": "Scripts_en/Utils/Application/ExternalProcess.html",
    "title": "ExternalProcess | Project Starter Package Doc",
    "keywords": "ExternalProcess Start an external process. namespace GarageKit public class ExternalProcess : MonoBehaviour Inheritance ExternalProcess -> MonoBehaviour Inspector Properties member type description exePath string Executable file path pathFromStreamingAssets bool Load flag from StreamingAssets arguments string Execute parameter arguments startupOnStart bool Autorun flag on Start() showWindow bool Window display when running a process Methods Get internal process ID public int ProcId { get; } Process execution state public bool IsRunning { get; } Start the process public void StartProcess()"
  },
  "Scripts_en/Utils/Application/RemotePrefs.html": {
    "href": "Scripts_en/Utils/Application/RemotePrefs.html",
    "title": "RemotePrefs | Project Starter Package Doc",
    "keywords": "RemotePrefs Read and write data to PlayerPrefs using UDP communication. namespace GarageKit [RequireComponent(typeof(UDPReceiver))] public class RemotePrefs : MonoBehaviour Inheritance ExternalProcess -> MonoBehaviour Methods Callback just before information update public Action<RemotePrefsData> WillUpdatedPrefs Callback when updating information public Action<RemotePrefsData> OnUpdatedPrefs Example Sample of received json { \"command\": \"set\", // \"set\" or \"delete\" or \"delete_all\" \"key\": \"prefs_key\", \"value_type\": \"int\", // \"int\" or \"float\" or \"string\" \"int_value\": 123 } RemotePrefsData Storage information structure Properties member type description command string Execution command: \"set\" or \"delete\" or \"delete_all\" key string Stored key value_type string Stored type: \"int\" or \"float\" or \"string\" int_value int Stored value: int float_value float Stored value: float string_value string Stored value: string"
  },
  "Scripts_en/Utils/Application/SetAntiAliasing.html": {
    "href": "Scripts_en/Utils/Application/SetAntiAliasing.html",
    "title": "SetAntiAliasing | Project Starter Package Doc",
    "keywords": "SetAntiAliasing Configure antialiasing settings from the inspector. namespace GarageKit public class SetAntiAliasing : MonoBehaviour Inheritance SetAntiAliasing -> MonoBehaviour Inspector Properties member type description AA_2x int Sampling settings"
  },
  "Scripts_en/Utils/Application/SetAppResolution.html": {
    "href": "Scripts_en/Utils/Application/SetAppResolution.html",
    "title": "SetAppResolution | Project Starter Package Doc",
    "keywords": "SetAppResolution Set the resolution from the inspector. namespace GarageKit public class SetAppResolution : MonoBehaviour Inheritance SetAppResolution -> MonoBehaviour Inspector Properties member type description resolutionType APP_RESOLUTION Resolution type setting fullScreen bool full screen settings resolutionID int ID when specifying display resolution customWindowRect Vector4 Window position resolution when custom type useFixAspect bool Fixed aspect ratio setting aspectRatio float aspect ratio Enums APP_RESOLUTION enums description PLAYER_SETTINGS_RESOLUTIOM Depends on player settings CURRENT_FULLSCREEN Current full screen DISPLAY_SUPPORTED Resolutions supported display CUSTOM_RESOLUTION Resolution specification CUSTOM_RESOLUTION_POPUPWINDOW Specifying resolution in popup window"
  },
  "Scripts_en/Utils/Application/StandalonePlayerResolutionHelper.html": {
    "href": "Scripts_en/Utils/Application/StandalonePlayerResolutionHelper.html",
    "title": "StandalonePlayerResolutionHelper | Project Starter Package Doc",
    "keywords": "StandalonePlayerResolutionHelper Removes the resolution settings that are automatically saved in the registry when Windows StandalonePlayer runs to avoid an issue where it runs at the wrong resolution the next time it starts. Important It is not used on anything other than Windows. Important If you want to use it, change ApiCompatibilityLevel in PlayerSettings to .NET Framework. namespace GarageKit [ExecuteInEditMode] public class StandalonePlayerResolutionHelper : MonoBehaviour Inheritance StandalonePlayerResolutionHelper -> MonoBehaviour Inspector Properties member type description playerSettingsCompanyName string CompanyName in player settings playerSettingsProductName string ProductName in player settings Important Since it is executed in OnApplicationQuit(), it will not be deleted from the registry unless it terminates normally, such as by a process Kill or Shutdown command."
  },
  "Scripts_en/Utils/AsyncUtil.html": {
    "href": "Scripts_en/Utils/AsyncUtil.html",
    "title": "AsyncUtil | Project Starter Package Doc",
    "keywords": "AsyncUtil Provides Async-related utility functions. namespace GarageKit public class AsyncUtil Static Methods Texture2D asynchronous loading public static async UniTask<Texture2D> LoadTextureAsync(string path, CancellationToken ct = default) Texture2D multiple simultaneous asynchronous loading public static async UniTask<Texture2D[]> LoadTextureAllAsync(string[] paths, CancellationToken ct = default)"
  },
  "Scripts_en/Utils/CSV/CsvReader.html": {
    "href": "Scripts_en/Utils/CSV/CsvReader.html",
    "title": "CsvReader | Project Starter Package Doc",
    "keywords": "CsvReader Class for reading CSV files namespace GarageKit.CSV public class CsvReader Inheritance CsvReader Static Methods Debugging output for two dimensional arrays static public void DebugLogGrid(string[,] grid) Methods Check data validity public bool IsVaild { get； } Get two dimensional array public string[,] CsvGrid { get; } Read CSV file public void Read(string file)"
  },
  "Scripts_en/Utils/CSV/CsvWriter.html": {
    "href": "Scripts_en/Utils/CSV/CsvWriter.html",
    "title": "CsvWriter | Project Starter Package Doc",
    "keywords": "CsvWriter Class for writing CSV files namespace GarageKit.CSV public class CsvWriter Inheritance CsvWriter Methods Write CSV file public string Write(string file, ICsvWritable data) public string Write(string file, List<ICsvWritable> datas)"
  },
  "Scripts_en/Utils/CSV/Interfece/ICsvWritable.html": {
    "href": "Scripts_en/Utils/CSV/Interfece/ICsvWritable.html",
    "title": "ICsvWritable | Project Starter Package Doc",
    "keywords": "ICsvWritable Data class interface to support CSV writing namespace GarageKit.CSV public interface ICsvWritable Methods Get header row string string GetCsvHeader() Get line string string ToCsvRowString()"
  },
  "Scripts_en/Utils/CameraControl/CameraShifter.html": {
    "href": "Scripts_en/Utils/CameraControl/CameraShifter.html",
    "title": "CameraShifter | Project Starter Package Doc",
    "keywords": "CameraShifter Perform camera shift. The camera FOV setting will have no effect as the projectionMatrix will be overwritten internally. namespace GarageKit public class CameraShifter Inheritance CameraShifter -> MonoBehaviour Inspector Properties member type description shiftX float Percentage of horizontal shift shiftY float Percentage of vertical shift calcAlways bool Update with Update() or not Methods Reset to initial state public void ResetProjMat()"
  },
  "Scripts_en/Utils/CameraControl/FlyThroughCamera.html": {
    "href": "Scripts_en/Utils/CameraControl/FlyThroughCamera.html",
    "title": "FlyThroughCamera | Project Starter Package Doc",
    "keywords": "FlyThroughCamera Perform flythrough operation of the camera by dragging. Mouse & touch compatible. Important If you are using the TouchScript package, please enable the #define definition in the source code. namespace GarageKit [RequireComponent(typeof(Camera))] public class FlyThroughCamera Inheritance FlyThroughCamera -> MonoBehaviour Inspector Properties member type description groundCollider Collider Collider for ground determination limitAreaCollider Collider Collider for movement restriction useLimitArea bool Movement restriction settings moveBias float Movement amount moveSmoothTime float Movement smooth amount dragInvertX bool Horizontal drag direction reversal setting dragInvertY bool Vertical drag direction reversal setting rotateBias float Directional rotation amount rotateSmoothTime float Directional rotation smooth amount rotateInvert bool Direction rotation reversal setting combinationOrbitCamera OrbitCamera Target component for combination operation Enums FLYTHROUGH_CONTROLL_TYPE enums description DRAG Move by dragging DRAG_HOLD Move by holding after dragging FLYTHROUGH_MOVE_TYPE enums description XZ XZ plane operation XY XY plane operation Methods Get hierarchy root public GameObject FlyThroughRoot { get; } Get root for position shift public Transform ShiftTransform { get; } Get current position public Vector3 currentPos { get; } Get current rotation public Quaternion currentRot { get; } Check input lock public bool IsInputLock { get; } Lock input public void LockInput(object sender) Unlock input public void UnlockInput(object sender) Move camera flythrough to the target position public void MoveToFlyThrough(Vector3 targetPosition, float time = 1.0f) Instantly move camera by a specified amount public void TranslateToFlyThrough(Vector3 move) Rotate camera flythrough towards the target public void RotateToFlyThrough(float targetAngle, float time = 1.0f) Move camera flythrough by specified amount public void PushMove(Vector3 move) Rotate camera flythrough by a specified amount public void PushRotate(float rotate) Reset camera position and rotation public void ResetFlyThrough() Example /Scenes/Examples/CameraControllExample.unity"
  },
  "Scripts_en/Utils/CameraControl/GrabMove.html": {
    "href": "Scripts_en/Utils/CameraControl/GrabMove.html",
    "title": "GrabMove | Project Starter Package Doc",
    "keywords": "GrabMove Move objects using multitouch grab operations. Mouse & touch compatible. Important If you are using the TouchScript package, please enable the #define definition in the source code. namespace GarageKit public class GrabMove Inheritance GrabMove -> MonoBehaviour Inspector Properties member type description renderCamera Camera Camera for hit detection grabTouchNum int Number of touches for judgment during multitouch operation moveBias float Movement amount smoothTime float Movement smooth amount disableComponents MonoBehaviour[] Components to be turned off by combination operations Methods Check input lock public bool IsInputLock { get; } Lock input public void LockInput(object sender) Unlock input public void UnlockInput(object sender) Reset to initial position public void ResetGrabMove()"
  },
  "Scripts_en/Utils/CameraControl/GyroCamera.html": {
    "href": "Scripts_en/Utils/CameraControl/GyroCamera.html",
    "title": "GyroCamera | Project Starter Package Doc",
    "keywords": "GyroCamera Operate camera rotation with gyro. Important When using the GyroDroid package, please enable #define definition in the source code. namespace GarageKit public class GyroCamera Inheritance GyroCamera -> MonoBehaviour Inspector Properties member type description northDirection NORTH_DIRECTION Setting the reference direction (north) Enums NORTH_DIRECTION enums description NONE none COMPASS_NORTH North direction of compass GYRO_HEAD_DIRECTION Z direction Methods Check preparation completed public bool IsReady { get; } Callback when ready public Action OnReady Set current Z to reference direction (north) public void CalibrateNorth() Change camera FOV public void SetFov(float fov)"
  },
  "Scripts_en/Utils/CameraControl/ObjectOrbit.html": {
    "href": "Scripts_en/Utils/CameraControl/ObjectOrbit.html",
    "title": "ObjectOrbit | Project Starter Package Doc",
    "keywords": "ObjectOrbit Orbit rotates the object around the target by dragging. Mouse & touch compatible. Important If you are using the TouchScript package, please enable the #define definition in the source code. namespace GarageKit public class ObjectOrbit Inheritance ObjectOrbit -> MonoBehaviour Inspector Properties member type description sensitivity float Operation sensitivity speed float Rotation speed smoothTime float Rotation smooth amount clampRotationX bool X rotation limit clampRotationX_Min float X rotation limit min clampRotationX_Max float X rotation limit max invertDragX bool Horizontal drag direction reversal setting invertDragY bool Vertical drag direction reversal setting Methods Check input lock public bool IsInputLock { get; } Lock input public void LockInput(object sender) Unlock input public void UnlockInput(object sender) Reset orbit rotation public void ResetOrbit()"
  },
  "Scripts_en/Utils/CameraControl/ObjectOrbit2.html": {
    "href": "Scripts_en/Utils/CameraControl/ObjectOrbit2.html",
    "title": "ObjectOrbit2 | Project Starter Package Doc",
    "keywords": "ObjectOrbit2 Orbit rotates the object around the target by dragging. Mouse & touch compatible. Important If you are using the TouchScript package, please enable the #define definition in the source code. namespace GarageKit public class ObjectOrbit2 Inheritance ObjectOrbit2 -> MonoBehaviour Inspector Properties member type description renderCam Camera Hit judgment camera sensitivity float Operation sensitivity smoothTime float Rotation smooth amount invertRot bool Rotation direction reversal setting collidRadiusFromBounds bool Automatically set the judgment collider size from the bounding collidRadius float Collider radius for judgment Methods Check input lock public bool IsInputLock { get; } Lock input public void LockInput(object sender) Unlock input public void UnlockInput(object sender)"
  },
  "Scripts_en/Utils/CameraControl/OrbitCamera.html": {
    "href": "Scripts_en/Utils/CameraControl/OrbitCamera.html",
    "title": "OrbitCamera | Project Starter Package Doc",
    "keywords": "OrbitCamera Rotate the camera around the target by dragging. Mouse & touch compatible. Important If you are using the TouchScript package, please enable the #define definition in the source code. namespace GarageKit [RequireComponent(typeof(Camera))] public class OrbitCamera Inheritance OrbitCamera -> MonoBehaviour Inspector Properties member type description orbitInputType ORBIT_INPUT_TYPE Operation input type target GameObject Rotation center target sensitivity float Operation sensitivity smoothTime float Rotation smooth amount clampRotationX_Min float X rotation limit min clampRotationX_Max float X rotation limit max invertDragX bool Horizontal drag direction reversal setting invertDragY bool Vertical drag direction reversal setting ratioForMouse float Rotation amount when operating the mouse combinationFlyThroughCamera FlyThroughCamera Target component for combination operation Enums ORBIT_INPUT_TYPE enums description PRIMARY Primary input SECONDARY Secondary input Methods Get hierarchy root public GameObject OrbitRoot { get; } Check input lock public bool IsInputLock { get; } Lock input public void LockInput(object sender) Unlock input public void UnlockInput(object sender) Reset orbit rotation public void ResetOrbit() Example /Scenes/Examples/CameraControllExample.unity"
  },
  "Scripts_en/Utils/CameraControl/Panorama360Camera.html": {
    "href": "Scripts_en/Utils/CameraControl/Panorama360Camera.html",
    "title": "Panorama360Camera | Project Starter Package Doc",
    "keywords": "Panorama360Camera Panoramic 360° camera operation. namespace GarageKit public class Panorama360Camera Inheritance Panorama360Camera -> MonoBehaviour Inspector Properties member type description mode OPERATION_MODE Operation mode rotationSpeed float Rotation speed useLimit bool Rotation limit setting limitRotL float Limit angle for left rotation direction limitRotR float Limit angle for right rotation direction invertRotH bool Horizontal rotation direction reversal setting invertRotV bool Vertical rotation direction reversal setting useSmooth bool Rotation smooth setting smoothTime float Rotation smooth amount Enums OPERATION_MODE enums description GYRO Gyro operation DRAG_MOUSE Mouse operation DRAG_TOUCH Touch operation GAME_PAD Gamepad operation Methods Reset gyro public void ResetGyro() Reset camera rotation public void ResetRotation(bool force = false) Set camera rotation value public void SetRotate(float h, float v, float speed) Example /Scenes/Examples/CameraControllExample.unity"
  },
  "Scripts_en/Utils/CameraControl/PinchZoomCamera.html": {
    "href": "Scripts_en/Utils/CameraControl/PinchZoomCamera.html",
    "title": "PinchZoomCamera | Project Starter Package Doc",
    "keywords": "PinchZoomCamera Camera zoom using multitouch pinch operation. Mouse & touch compatible. Important If you are using the TouchScript package, please enable the #define definition in the source code. namespace GarageKit [RequireComponent(typeof(Camera))] public class PinchZoomCamera Inheritance PinchZoomCamera -> MonoBehaviour Inspector Properties member type description zoomType PINCH_ZOOM_TYPE Zoom processing type zoomBias float Zoom amount zoomSmoothTime float Zoom smooth amount invertZoom bool Zoom direction reversal setting limitMinMaxForRelativePosZ LimitValue Relative value limit for Z position limitMinMaxForFOV LimitValue FOV value limit limitMinMaxForOrthoSize LimitValue Ortho camera size value limit disableComponents MonoBehaviour[] Components to be turned off by combination operations zoomToPinchCenterFor2D bool Set the center of 2D zoom to the pinch coordinate center ratioForWheel float Zoom amount with mouse wheel Enums PINCH_ZOOM_TYPE enums description POSITION_Z Zoom by Z position FOV Zoom by FOV value ORTHOSIZE Zoom by ortho camera size Methods Current zoom value public float currentZoom { get; } Check input lock public bool IsInputLock { get; } Lock input public void LockInput(object sender) Unlock input public void UnlockInput(object sender) Zoom by specified amount public void PushZoom(float zoomDelta) Zoom to target value public void SetToPinchZoom(float zoom, float time = 1.0f) Reset zoom value public void ResetPinchZoom() Example /Scenes/Examples/CameraControllExample.unity LimitValue Limit value structure namespace GarageKit [Serializable] public class LimitValue Properties member type description min float Min value max float Max value"
  },
  "Scripts_en/Utils/CameraControl/UrbanViewerLikeCamera.html": {
    "href": "Scripts_en/Utils/CameraControl/UrbanViewerLikeCamera.html",
    "title": "UrbanViewerLikeCamera | Project Starter Package Doc",
    "keywords": "UrbanViewerLikeCamera Use the mouse, touch, or game pad to move the camera forward, backward, up, down, left, and right, and to rotate left and right. Important If you are using the TouchScript package, please enable the #define definition in the source code. namespace GarageKit public class UrbanViewerLikeCamera Inheritance UrbanViewerLikeCamera -> MonoBehaviour Inspector Properties member type description childCamera Camera Child camera in hierarchy to control moveSpeed float Movement speed rotateSpeed float Rotation speed updateEnable bool Update value by Update() primaryDragType DragType Operation target of primary input (left drag/one finger operation) secondaryDragType DragType Operation target of secondary input (right drag/two finger operation) tertiaryDragType DragType Operation target of tertiary input (middle drag/three finger operation) camMoveSpeedForPad float Movement speed when using the gamepad camRotSpeedForPad float Rotation speed when operating the gamepad invertCamRotXForPad bool X rotation direction reversal setting when operating the gamepad invertCamRotYForPad bool Y rotation direction reversal setting when operating the gamepad padType PadType Gamepad type setting Enums DragType enums description NO_USE Not used MOVE forward/backward movement PAN Left and right turning SHIFT up/down/left/right movement PadType enums description DEFAULT standard controller XBOXONE XboxOne controller Example /Scenes/Examples/CameraControllExample.unity"
  },
  "Scripts_en/Utils/CameraUtil.html": {
    "href": "Scripts_en/Utils/CameraUtil.html",
    "title": "CameraUtil | Project Starter Package Doc",
    "keywords": "CameraUtil Provides camera related utility functions. namespace GarageKit public class CameraUtil Static Methods Get camera from layer public static Camera FindCameraForLayer(int layer) Get all camera list by depth public static List<Camera> GetCameraListByDepth() Normalize screen coordinates with camera coordinates (-1.0 to 1.0) public static Vector3 NormalizeScreenPosition(Camera orthoCamera, Vector3 screenPosition) Correct the coordinates when the Viewport goes off the screen public static Vector3 ViewportProtrusion(Vector3 viewportPosition, Vector2 ratio)"
  },
  "Scripts_en/Utils/CaptureUtil.html": {
    "href": "Scripts_en/Utils/CaptureUtil.html",
    "title": "CaptureUtil | Project Starter Package Doc",
    "keywords": "CaptureUtil Provides capture related utility functions. namespace GarageKit public class CaptureUtil Static Methods Specify the range and save the screen capture public static IEnumerator CaptureRect(string fileName, bool withTimestamp) public static IEnumerator CaptureRect(string dirPath, string fileName, Rect range, bool withTimestamp)"
  },
  "Scripts_en/Utils/CommonUtil.html": {
    "href": "Scripts_en/Utils/CommonUtil.html",
    "title": "CommonUtil | Project Starter Package Doc",
    "keywords": "CommonUtil Provides utility functions. namespace GarageKit public class CommonUtil Static Methods Open the specified folder in the file browser public static void OpenFolder(string path)"
  },
  "Scripts_en/Utils/DataLoader/ContentsDownLoader.html": {
    "href": "Scripts_en/Utils/DataLoader/ContentsDownLoader.html",
    "title": "ContentsDownLoader | Project Starter Package Doc",
    "keywords": "ContentsDownLoader Download and save and manage external data. namespace GarageKit public class ContentsDownLoader : MonoBehaviour Inheritance ContentsDownLoader -> MonoBehaviour Static Methods Get the save destination path of downloaded external data public static string ContentsDataPath { get; } Methods Download completion event public event OnLoadCompleteDelegate OnLoadComplete Download error event public event OnLoadErrorDelegate OnLoadError Get the latest download destination path public string LatestContentsPath { get; } Check that the download is in progress public bool IsLoading { get; }"
  },
  "Scripts_en/Utils/DataLoader/ImageLoader.html": {
    "href": "Scripts_en/Utils/DataLoader/ImageLoader.html",
    "title": "ImageLoader | Project Starter Package Doc",
    "keywords": "ImageLoader Load images in the specified folder at once. namespace GarageKit public class ImageLoader : MonoBehaviour Inheritance ImageLoader -> MonoBehaviour Inspector Properties member type description folderPath string Folder to load absolute bool Absolute path setting autoLoad bool Automatic loading start setting Methods Loaded image list public Dictionary<string, Texture2D> Images { get; } Loading completion event public event OnLoadCompleteDelegate OnLoadComplete Start loading public void Load(string folderPath)"
  },
  "Scripts_en/Utils/Debug/CameraGizmoDrawer.html": {
    "href": "Scripts_en/Utils/Debug/CameraGizmoDrawer.html",
    "title": "CameraGizmoDrawer | Project Starter Package Doc",
    "keywords": "CameraGizmoDrawer Displays the view frustum gizmo in SceneView even when no camera object is selected. namespace GarageKit [ExecuteInEditMode] [RequireComponent(typeof(Camera))] public class CameraGizmoDrawer : MonoBehaviour Inheritance CameraGizmoDrawer -> MonoBehaviour Inspector Properties member type description gizmosColor Color Gizmo display color"
  },
  "Scripts_en/Utils/Debug/FpsCounter.html": {
    "href": "Scripts_en/Utils/Debug/FpsCounter.html",
    "title": "FpsCounter | Project Starter Package Doc",
    "keywords": "FpsCounter Simple FPS display using uGUI.(Recommend using Graphy) namespace GarageKit public class FpsCounter : MonoBehaviour Inheritance FpsCounter -> MonoBehaviour Inspector Properties member type description displayFPS bool Display settings text Text Text reference targetFPS int Target FPS goodColor Color Good color warnColor Color Warn color badColor Color Bad color"
  },
  "Scripts_en/Utils/Debug/FrameRateUtil.html": {
    "href": "Scripts_en/Utils/Debug/FrameRateUtil.html",
    "title": "FrameRateUtil | Project Starter Package Doc",
    "keywords": "FrameRateUtil Performs a simple FPS display using OnGUI(). (Recommend using Graphy) namespace GarageKit public class FrameRateUtil : MonoBehaviour Inheritance FrameRateUtil -> MonoBehaviour Properties member type description useHUD bool Display settings Static Methods Get current FPS value public static float Fps { get; }"
  },
  "Scripts_en/Utils/Debug/GizmoDrawer.html": {
    "href": "Scripts_en/Utils/Debug/GizmoDrawer.html",
    "title": "GizmoDrawer | Project Starter Package Doc",
    "keywords": "GizmoDrawer Displays the gizmo in SceneView even when no object is selected. namespace GarageKit public class GizmoDrawer : MonoBehaviour Inheritance GizmoDrawer -> MonoBehaviour Inspector Properties member type description gizmoType GIZMO_TYPE Gizmo display type color Color Gizmo display color gizmoSize Vector3 Gizmo display size (for SPHERE, only X) centerToCornerX bool Set X axis position as corner centerToCornerY bool Set Y axis position as corner centerToCornerZ bool Set Z axis position as corner invertCornerX bool Set X axis position as invert corner invertCornerY bool Set Y axis position as invert corner invertCornerZ bool Set Z axis position as invert corner Enums GIZMO_TYPE enums description CUBE gizmo type cube SPHERE gizmo type sphere"
  },
  "Scripts_en/Utils/Debug/LookAtGizmoDrawer.html": {
    "href": "Scripts_en/Utils/Debug/LookAtGizmoDrawer.html",
    "title": "LookAtGizmoDrawer | Project Starter Package Doc",
    "keywords": "LookAtGizmoDrawer Displays the line gizmo to the specified target in SceneView. namespace GarageKit public class LookAtGizmoDrawer : MonoBehaviour Inheritance LookAtGizmoDrawer -> MonoBehaviour Inspector Properties member type description color Color Gizmo display color target GameObject Target at the end of the line worldUp Vector3 Upward vector"
  },
  "Scripts_en/Utils/Debug/MemoryProfiler.html": {
    "href": "Scripts_en/Utils/Debug/MemoryProfiler.html",
    "title": "MemoryProfiler | Project Starter Package Doc",
    "keywords": "MemoryProfiler Displays a simple memory usage amount using OnGUI(). (Recommend using Graphy) namespace GarageKit public class MemoryProfiler : MonoBehaviour Inheritance MemoryProfiler -> MonoBehaviour Properties member type description useHUD bool Display settings"
  },
  "Scripts_en/Utils/Debug/VisibleMouseCursor.html": {
    "href": "Scripts_en/Utils/Debug/VisibleMouseCursor.html",
    "title": "VisibleMouseCursor | Project Starter Package Doc",
    "keywords": "VisibleMouseCursor Manage the display/hide of the mouse cursor. namespace GarageKit public class VisibleMouseCursor : MonoBehaviour Inheritance VisibleMouseCursor -> MonoBehaviour Properties member type description showCursor bool Display settings"
  },
  "Scripts_en/Utils/Envelope/C4DAnimDataApply.html": {
    "href": "Scripts_en/Utils/Envelope/C4DAnimDataApply.html",
    "title": "C4DAnimDataApply | Project Starter Package Doc",
    "keywords": "C4DAnimDataApply Converts animation keyframe data (.json) exported from Cinema4D to animation curves. namespace GarageKit public class C4DAnimDataApply : MonoBehaviour Inheritance C4DAnimDataApply -> MonoBehaviour Inspector Properties member type description filePath string Load json file path animTracks C4DAnimationTrack[] Cinema4D animation track list Methods Get converted animation data table public Dictionary<string, List<float>> Data { get; } Get animation curve public AnimationCurve GetCurve(C4DAnimationTrack.TRACK_TYPE type) Get animation length public int GetTotalFrame() C4DAnimationTrack Cinema4D animation track data structure namespace GarageKit [Serializable] public class C4DAnimationTrack Properties member type description type TRACK_TYPE Animation track type curve AnimationCurve Animation curve generated from conversion from loaded data Enums TRACK_TYPE enums description POS_X X position track POS_Y Y position track POS_Z Z position track ROT_X X axis rotation track ROT_Y Y axis rotation track ROT_Z Z axis rotation track Methods Get track name public string GetTrackName()"
  },
  "Scripts_en/Utils/Envelope/Envelope.html": {
    "href": "Scripts_en/Utils/Envelope/Envelope.html",
    "title": "Envelope | Project Starter Package Doc",
    "keywords": "Envelope Create animation curves dynamically at runtime from the keyframe data list. namespace GarageKit public class Envelope : MonoBehaviour Inheritance Envelope -> MonoBehaviour Inspector Properties member type description propertyName string Identification property name preWrapMode WrapMode Forward wrap mode postWrapMode WrapMode Backward wrap mode envelopeKeys EnvelopeKey[] Keyframe data list Methods Get animation curve public AnimationCurve GetCurve() EnvelopeKey Keyframe data structure namespace GarageKit [Serializable] public class EnvelopeKey Properties member type description time float Time X value float Value Y leftTangent AnimationCurveUtil.TangentMode Left handle tangent rightTangent AnimationCurveUtil.TangentMode Right handle tangent"
  },
  "Scripts_en/Utils/Event/AnimationEventDelegate.html": {
    "href": "Scripts_en/Utils/Event/AnimationEventDelegate.html",
    "title": "AnimationEventDelegate | Project Starter Package Doc",
    "keywords": "AnimationEventDelegate Set a playback completion event on the animation curve to enable event processing. namespace GarageKit public class AnimationEventDelegate : MonoBehaviour Inheritance AnimationEventDelegate -> MonoBehaviour Methods Playback completion event public event OnAnimationEventDelegate OnAnimationEvent"
  },
  "Scripts_en/Utils/Event/ButtonObjectEvent.html": {
    "href": "Scripts_en/Utils/Event/ButtonObjectEvent.html",
    "title": "ButtonObjectEvent | Project Starter Package Doc",
    "keywords": "ButtonObjectEvent Enables you to set a click button event for objects that have a collider set. Since uGUI is not used, it can be used for all 3D objects. Mouse & touch compatible. Important If you are using the TouchScript package, please enable the #define definition in the source code. namespace GarageKit public class ButtonObjectEvent : MonoBehaviour Inheritance ButtonObjectEvent -> MonoBehaviour Inspector Properties member type description inputType INPUT_TYPE Input type buttonType BUTTON_TYPE Button execution type asFirstResponder bool Execute when in front asToggle bool Toggle button settings PressBtnsTotal int Total number of buttons pressed Enums INPUT_TYPE enums description MOUSE Mouse operation TOUCH Touch operation BUTTON_TYPE enums description CLICK Execute on click PRESS Execute on press RELEASE Execute on release PRESSHOLD Execute on press hold Static Methods Change input type of all ButtonObjectEvent components public static void SetAllInputType(INPUT_TYPE type) Methods Check button validity public bool IsEnableButton { get; } Check input validity public bool InputEnable { get; } Check toggle status public bool ToggleState { get; } Get touch input coordinates public Vector3 TouchPosition { get; } Button execution callback public Action OnButton Toggle button execution callback public Action<bool> OnToggleButton Button press execution callback public Action OnPressButton Button release execution callback public Action OnReleaseButton Button hover start callback public Action OnHoverInButton Button hover end callback public Action OnHoverExitButton Reset button status public void ResetButton() Enabling button public void EnableButton() Disabling button public void DisableButton() Enabling input public void EnableInput() Disabling input public void DisableInput() Example /Scenes/Examples/EventExample.unity"
  },
  "Scripts_en/Utils/Event/ObservableValue.html": {
    "href": "Scripts_en/Utils/Event/ObservableValue.html",
    "title": "ObservableValue | Project Starter Package Doc",
    "keywords": "ObservableValue Monitor the value and execute a callback if there is an update change. namespace GarageKit public class ObservableValue<T> Inheritance ObservableValue<T> Methods Get value update public T Value { get; set; } Callback when there is an update change in the value public Action<T> OnValueChange"
  },
  "Scripts_en/Utils/Event/OnCollisionHandler.html": {
    "href": "Scripts_en/Utils/Event/OnCollisionHandler.html",
    "title": "OnCollisionHandler | Project Starter Package Doc",
    "keywords": "OnCollisionHandler Execute MonoBehaviour's OnCollision and OnTrigger functions in a callback. namespace GarageKit [RequireComponent(typeof(Collider))] public class OnCollisionHandler : MonoBehaviour Inheritance OnCollisionHandler -> MonoBehaviour Methods public Action<Collision> OnCollisionEnterAction public Action<Collision> OnCollisionExitAction public Action<Collision> OnCollisionStayAction public Action<Collision> OnTriggerEnterAction public Action<Collision> OnTriggerExitAction public Action<Collision> OnTriggerStayAction"
  },
  "Scripts_en/Utils/Event/OnRenderHandler.html": {
    "href": "Scripts_en/Utils/Event/OnRenderHandler.html",
    "title": "OnRenderHandler | Project Starter Package Doc",
    "keywords": "OnRenderHandler Run the MonoBehaviour's OnPreRender() and OnPostRender() functions in a callback. namespace GarageKit [RequireComponent(typeof(Camera))] public class OnRenderHandler : MonoBehaviour Inheritance OnRenderHandler -> MonoBehaviour Methods public Action OnPreRenderAction public Action OnPostRenderAction"
  },
  "Scripts_en/Utils/Event/SevenTapLikeAndroid.html": {
    "href": "Scripts_en/Utils/Event/SevenTapLikeAndroid.html",
    "title": "SevenTapLikeAndroid | Project Starter Package Doc",
    "keywords": "SevenTapLikeAndroid Execute a callback by tapping seven times on a uGUI component, similar to the Android setting screen hidden operation. namespace GarageKit public class SevenTapLikeAndroid : MonoBehaviour, IPointerDownHandler Inheritance SevenTapLikeAndroid -> MonoBehaviour, IPointerDownHandler Methods Callback for 7 consecutive taps public Action OnSevenTap Example /Scenes/Examples/EventExample.unity"
  },
  "Scripts_en/Utils/Event/TimelineEvent/TimelineEventAction.html": {
    "href": "Scripts_en/Utils/Event/TimelineEvent/TimelineEventAction.html",
    "title": "TimelineEventAction | Project Starter Package Doc",
    "keywords": "TimelineEventAction Registration action data structure for timeline events used in TimelinedSceneStateBase. namespace GarageKit public class TimelineEventAction Inheritance TimelineEventAction Properties member type description time float Elapsed time Methods Registration action with elapsed time public Action action; Check action completion public bool IsDone { get； }"
  },
  "Scripts_en/Utils/Event/TimelineEvent/TimelineEventActionList.html": {
    "href": "Scripts_en/Utils/Event/TimelineEvent/TimelineEventActionList.html",
    "title": "TimelineEventActionList | Project Starter Package Doc",
    "keywords": "TimelineEventActionList Registration action data list structure for timeline events used in TimelinedSceneStateBase namespace GarageKit public class TimelineEventActionList Inheritance TimelineEventActionList Methods Execute registration action with elapsed time public void Update(float time) New action registration public void Add(float time, Action action) Clear registered action list public void Clear() Example /Scenes/Examples/EventExample.unity /Scenes/Examples/TimelinedStateExample.unity // TimelinedSceneStateBase.cs this.actionList = new TimelineEventActionList(); this.actionList.Add(0.0f, () => { sceneText.text = \"start\"; }); this.actionList.Add(5.0f, () => { sceneText.text = \"5 sec elapsed\"; }); this.actionList.Add(10.0f, () => { sceneText.text = \"10 sec elapsed\"; }); this.actionList.Add(20.0f, () => { sceneText.text = \"20 sec elapsed\"; }); this.StartTimeline();"
  },
  "Scripts_en/Utils/Event/TimerEvent.html": {
    "href": "Scripts_en/Utils/Event/TimerEvent.html",
    "title": "TimerEvent | Project Starter Package Doc",
    "keywords": "TimerEvent Set events based on time with a countdown timer. namespace GarageKit public class TimerEvent : MonoBehaviour Inheritance TimerEvent -> MonoBehaviour Methods Check if the timer has started public bool IsStarted { get; } Check if timer is running public bool IsRunning { get; } Timer remaining time (seconds) public int CurrentTime { get; } Timer elapsed time (seconds) public float ElapsedTime { get; } Timer elapsed event per second public event OnTimerDelegate OnTimer Timer completion event public event OnCompleteTimerDelegate OnCompleteTimer Start timer public void StartTimer(int countTime, float delayTime = 0.0f, bool autoDestroy = false) Stop timer public void StopTimer() Resume timer public void ResumeTimer() Reset timer public void ResetTimer(bool andStart) Example /Scenes/Examples/EventExample.unity GameObject obj = new GameObject(\"TimerEventObject\"); obj.AddComponent<TimerEvent>(); obj.GetComponent<TimerEvent>().OnTimer += (sender, sec) => {}; obj.GetComponent<TimerEvent>().OnCompleteTimerEvent += (sender) => {}; obj.GetComponent<TimerEvent>().StartTimer(10); // count down 10 sec"
  },
  "Scripts_en/Utils/Input/VirtualInput.html": {
    "href": "Scripts_en/Utils/Input/VirtualInput.html",
    "title": "VirtualInput | Project Starter Package Doc",
    "keywords": "VirtualInput Executes operations by emulating keyboard and mouse operations in Windows. namespace GarageKit public class VirtualInput Static Methods Keyboard input public static void KeyDown(int keyCode) public static void KeyDown(int keyCode1, int keyCode2) public static void KeyDown(int keyCode1, int keyCode2, int keyCode3) Mouse move public static void MouseMove(int posX, int posY) Mouse click public static void MouseClick(int posX, int posY) mouse double click public static void MouseDoubleClick(int posX, int posY) Example // A key input VirtualInput.KeyDown(KeyCode.VK_A); // SHIFT + B key input VirtualInput.KeyDown(KeyCode.VK_L_SHIFT, KeyCode.VK_B); // Mouse move and click float x = Screen.Width / 2.0f; float y = Screen.Height / 2.0f; VirtualInput.MouseMove(x, y); VirtualInput.MouseClick(x, y); KeyCode Key code information structure Properties http://msdn.microsoft.com/ja-jp/library/windows/desktop/dd375731(v=vs.85).aspx public const int VK_L_SHIFT = 0x00A0; public const int VK_R_SHIFT = 0x00A1; public const int VK_L_CONTROL = 0x00A2; public const int VK_R_CONTROL = 0x00A3; public const int VK_BACKSPACE = 0x0008; public const int VK_TAB = 0x0009; public const int VK_RETURN = 0x000D; public const int VK_ALT = 0x0012; public const int VK_ESCAPE = 0x001B; public const int VK_SPACE = 0x0020; public const int VK_LEFT_ARROW = 0x0025; public const int VK_UP_ARROW = 0x0026; public const int VK_RIGHT_ARROW = 0x0027; public const int VK_DOWN_ARROW = 0x0028; public const int VK_DELETE = 0x002E; public const int VK_0 = 0x0030; public const int VK_1 = 0x0031; public const int VK_2 = 0x0032; public const int VK_3 = 0x0033; public const int VK_4 = 0x0034; public const int VK_5 = 0x0035; public const int VK_6 = 0x0036; public const int VK_7 = 0x0037; public const int VK_8 = 0x0038; public const int VK_9 = 0x0039; public const int VK_A = 0x0041; public const int VK_B = 0x0042; public const int VK_C = 0x0043; public const int VK_D = 0x0044; public const int VK_E = 0x0045; public const int VK_F = 0x0046; public const int VK_G = 0x0047; public const int VK_H = 0x0048; public const int VK_I = 0x0049; public const int VK_J = 0x004A; public const int VK_K = 0x004B; public const int VK_L = 0x004C; public const int VK_M = 0x004D; public const int VK_N = 0x004E; public const int VK_O = 0x004F; public const int VK_P = 0x0050; public const int VK_Q = 0x0051; public const int VK_R = 0x0052; public const int VK_S = 0x0053; public const int VK_T = 0x0054; public const int VK_U = 0x0055; public const int VK_V = 0x0056; public const int VK_W = 0x0057; public const int VK_X = 0x0058; public const int VK_Y = 0x0059; public const int VK_Z = 0x005A; public const int VK_NUM_0 = 0x0060; public const int VK_NUM_1 = 0x0061; public const int VK_NUM_2 = 0x0062; public const int VK_NUM_3 = 0x0063; public const int VK_NUM_4 = 0x0064; public const int VK_NUM_5 = 0x0065; public const int VK_NUM_6 = 0x0066; public const int VK_NUM_7 = 0x0067; public const int VK_NUM_8 = 0x0068; public const int VK_NUM_9 = 0x0069; public const int VK_F1 = 0x0070; public const int VK_F2 = 0x0071; public const int VK_F3 = 0x0072; public const int VK_F4 = 0x0073; public const int VK_F5 = 0x0074; public const int VK_F6 = 0x0075; public const int VK_F7 = 0x0076; public const int VK_F8 = 0x0077; public const int VK_F9 = 0x0078; public const int VK_F10 = 0x0079; public const int VK_F11 = 0x007A; public const int VK_F12 = 0x007B; public const int VK_L_WINDOWS = 0x005B; public const int VK_R_WINDOWS = 0x005C;"
  },
  "Scripts_en/Utils/Input/Win10VirtualKeyboard.html": {
    "href": "Scripts_en/Utils/Input/Win10VirtualKeyboard.html",
    "title": "Win10VirtualKeyboard | Project Starter Package Doc",
    "keywords": "Win10VirtualKeyboard Controls the display of the Windows 10 OS standard software keyboard. Since we are monitoring with Update() to control the text input operation on the InputField, we will use it as a GameObject instance. namespace GarageKit public class Win10VirtualKeyboard : MonoBehaviour Inheritance Win10VirtualKeyboard -> MonoBehaviour Static Methods Display software keyboard (tabtip.exe) public static void ShowTouchKeyboard() Hide software keyboard (tabtip.exe) public static void HideTouchKeyboard() Display software keyboard (OSK) public static void ShowOnScreenKeyboard() Hide software keyboard (OSK) public static void HideOnScreenKeyboard() Change the display position of the software keyboard (OSK) public static void RepositionOnScreenKeyboard(Rect rect)"
  },
  "Scripts_en/Utils/Localize/Interface/ILocalize.html": {
    "href": "Scripts_en/Utils/Localize/Interface/ILocalize.html",
    "title": "ILocalize | Project Starter Package Doc",
    "keywords": "ILocalize Interface for implementing multi language switching. namespace GarageKit.Localize public interface ILocalize Methods Multi language switching void Localize(LANGUAGE lang)"
  },
  "Scripts_en/Utils/Localize/Language.html": {
    "href": "Scripts_en/Utils/Localize/Language.html",
    "title": "LANGUAGE | Project Starter Package Doc",
    "keywords": "LANGUAGE Specified language when switching multiple languages. Add definitions as needed. namespace GarageKit.Localize public enum LANGUAGE Enums LANGUAGE enums description JP Japanese EN English TC Traditional Chinese SC Simplified Chinese KR Korean"
  },
  "Scripts_en/Utils/Localize/LocalizeDropdown.html": {
    "href": "Scripts_en/Utils/Localize/LocalizeDropdown.html",
    "title": "LocalizeDropdown | Project Starter Package Doc",
    "keywords": "LocalizeDropdown TMP_Dropdown component with multi language switching support. namespace GarageKit.Localize public class LocalizeDropdown : MonoBehaviour, ILocalize Inheritance LocalizeDropdown -> MonoBehaviour, ILocalize Inspector Properties member type description uiDropdown TMP_Dropdown TMP_Dropdown reference localizeFonts List<TMP_FontAsset> Font list for switching multi language localizeDropdownStrings List<LocalizeDropdownStrings> List of text in dropdown to switching multi language Static Methods Multi language switching for all LocalizeDropdowns public static void LocalizeAll(LANGUAGE lang) Methods Multi language switching public void Localize(LANGUAGE lang) LocalizeDropdownStrings Structure of text list data in dropdown for switching multi language namespace GarageKit.Localize [Serializable] public class LocalizeDropdownStrings Properties member type description localizeStrings List Text in each language"
  },
  "Scripts_en/Utils/Localize/LocalizeDynamicRawImage.html": {
    "href": "Scripts_en/Utils/Localize/LocalizeDynamicRawImage.html",
    "title": "LocalizeDynamicRawImage | Project Starter Package Doc",
    "keywords": "LocalizeDynamicRawImage RawImage component with multi language switching support. namespace GarageKit.Localize public class LocalizeDynamicRawImage : MonoBehaviour, ILocalize Inheritance LocalizeDynamicRawImage -> MonoBehaviour, ILocalize Inspector Properties member type description uiRawImage RawImage RawImage reference localizeTexturePaths List Image path list for switching multi language lang LANGUAGE select language Static Methods Asynchronous multi language switching for all LocalizeDynamicRawImages. public static async UniTask LocalizeAllAsync(LANGUAGE lang) Methods Asynchronous multi language switching public async UniTask LocalizeAsync(LANGUAGE lang) Asynchronous multi language switching with TryCatch public async UniTask TryCatchLocalizeAsync(LANGUAGE lang, Action<Exception> onCatch, Action onFinally = null)"
  },
  "Scripts_en/Utils/Localize/LocalizeFontScriptable.html": {
    "href": "Scripts_en/Utils/Localize/LocalizeFontScriptable.html",
    "title": "LocalizeFontScriptable | Project Starter Package Doc",
    "keywords": "LocalizeFontScriptable ​​ScriptableObject for serializing font settings for switching multi language. namespace GarageKit.Localize [CreateAssetMenu(menuName = \"GarageKit/Localize Font Asset\", fileName = \"LocalizeFontAsset\")] public class LocalizeFontScriptable : ScriptableObject Inheritance LocalizeFontScriptable -> ScriptableObject Inspector Properties member type description localizeFonts List<LocalizeFont> List of multi language switching font settings LocalizeFont Structure of multi language switching font settings namespace GarageKit.Localize [Serializable] public class LocalizeFont Properties member type description lang LANGUAGE Set language font TMP_FontAsset Font data"
  },
  "Scripts_en/Utils/Localize/LocalizeImage.html": {
    "href": "Scripts_en/Utils/Localize/LocalizeImage.html",
    "title": "LocalizeImage | Project Starter Package Doc",
    "keywords": "LocalizeImage Image component with multi language switching support. namespace GarageKit.Localize [ExecuteInEditMode] public class LocalizeImage : MonoBehaviour, ILocalize Inheritance LocalizeImage -> MonoBehaviour, ILocalize Inspector Properties member type description uiImage Image Image reference localizeSprites List Sprite list for switching multi language lang LANGUAGE Select language Static Methods Multi language switching for all LocalizeImages public static void LocalizeAll(LANGUAGE lang) Methods Multi language switching public void Localize(LANGUAGE lang)"
  },
  "Scripts_en/Utils/Localize/LocalizeText.html": {
    "href": "Scripts_en/Utils/Localize/LocalizeText.html",
    "title": "LocalizeText | Project Starter Package Doc",
    "keywords": "LocalizeText TMP_Text component with multi language switching support. namespace GarageKit.Localize [ExecuteInEditMode] public class LocalizeText : MonoBehaviour, ILocalize Inheritance LocalizeText -> MonoBehaviour, ILocalize Inspector Properties member type description uiText TMP_Text TMP_Text reference localizeFonts List<TMP_FontAsset> Font list for switching multi language lalocalizeFontScriptableng LocalizeFontScriptable Serialized multi language switching font settings. supersedes localizeFonts localizeStrings List Text list for switching multi language lang LANGUAGE Select language Static Methods Multi language switching for all LocalizeText public static void LocalizeAll(LANGUAGE lang) Methods Multi language switching public void Localize(LANGUAGE lang)"
  },
  "Scripts_en/Utils/Manager/Base/ManagerBase.html": {
    "href": "Scripts_en/Utils/Manager/Base/ManagerBase.html",
    "title": "ManagerBase | Project Starter Package Doc",
    "keywords": "ManagerBase Manager class base class namespace GarageKit public class ManagerBase : MonoBehaviour Inheritance ManagerBase -> MonoBehaviour"
  },
  "Scripts_en/Utils/MathUtil.html": {
    "href": "Scripts_en/Utils/MathUtil.html",
    "title": "MathUtil | Project Starter Package Doc",
    "keywords": "MathUtil Provides math related utility functions. namespace GarageKit public class MathUtil Static Methods Low pass filter public static float LowPassFilter(float pre, float current, float weight = 0.05f) KalmanFilter https://garchiving.com/gyro-drift-correction/ namespace GarageKit.MathUtil public class KalmanFilter Methods public float GetAngle(float newAngle, float newRate, float dt) public void SetAngle(float angle) public float GetRate() public void SetQangle(float Q_angle) public void SetQbias(float Q_bias) public float GetQangle() public float GetQbias() public float GetRmeasure() public void SetRmeasure(float R_measure)"
  },
  "Scripts_en/Utils/Network/SerialPortController.html": {
    "href": "Scripts_en/Utils/Network/SerialPortController.html",
    "title": "SerialPortController | Project Starter Package Doc",
    "keywords": "SerialPortController Sends and receives serial communications. Important If you want to use it, change ApiCompatibilityLevel in PlayerSettings to .NET Framework. namespace GarageKit public class SerialPortController : MonoBehaviour Inheritance SerialPortController -> MonoBehaviour Inspector Properties member type description autoOpen bool Open port automatically autoSearchPort bool Automatic search for available port autoSearchInReverse bool Automatic backward search for available port portName List Port name Serial connection parameters member type description baudRate int BaudRate parity Parity Parity dataBits int DataBits stopBits StopBits StopBits encoding Encoding TextEncoding newLineCode NewLineCode NewLineCode handShake Handshake Handshake dtrEnable bool DtrEnable rtsEnable bool RtsEnable readTimeout int ReadTimeout writeTimeout int WriteTimeout Enums NewLineCode enums description LF \\n CR \\r CRLF \\r\\n Methods Data received callback public Action<string> OnReceive Latest received string public string ReceivedDataStr { get; } Check port status public bool IsOpen { get;} Find and open port public bool TryRecursiveOpen() Open port public void Open() Close port public void Close() Send string command public void SendCommand(string str) Send string command asynchronously public async UniTask SendCommandAsync(string str) Convert string command to byte data and send public void SendCommandByte(string str) Convert string command to byte data and send asynchronously public async UniTask SendCommandByteAsync(string str) Convert command array of space separated numbers to hexadecimal and send public void SendCommandArrayHexByte(string str) Convert command array of space separated numbers to hexadecimal and send asynchronously public async UniTask SendCommandArrayHexByteAsync(string str) Send byte data public void SendByte(byte[] strBytes) Send byte data asynchronously public async UniTask SendByteAsync(byte[] strBytes)"
  },
  "Scripts_en/Utils/Network/TinyHttpServer.html": {
    "href": "Scripts_en/Utils/Network/TinyHttpServer.html",
    "title": "TinyHttpServer | Project Starter Package Doc",
    "keywords": "TinyHttpServer Run a simple web server inside Unity. namespace GarageKit public class TinyHttpServer : MonoBehaviour Inheritance TinyHttpServer -> MonoBehaviour Inspector Properties member type description listenOnStart bool Start server with Start() port int Port number Methods Response callback public HttpResponce OnHttpRequest Start web server public void StartServer() Stop web server public void StopServer()"
  },
  "Scripts_en/Utils/Network/UDPReceiver.html": {
    "href": "Scripts_en/Utils/Network/UDPReceiver.html",
    "title": "UDPReceiver | Project Starter Package Doc",
    "keywords": "UDPReceiver Receives UDP communication. namespace GarageKit public class UDPReceiver : MonoBehaviour Inheritance UDPReceiver -> MonoBehaviour Inspector Properties member type description port int Receive port number autoStart bool Start receiving automatically Methods Latest received string public string LatestReceivedDataStr { get; } Latest received byte data public byte[] LatestReceivedDataBytes { get; } Receive callback in string public Action<string> OnReceived Receive callback with byte data public Action<byte[]> OnReceivedBytes Open port public void Open() Close port public void Close()"
  },
  "Scripts_en/Utils/Network/UDPSender.html": {
    "href": "Scripts_en/Utils/Network/UDPSender.html",
    "title": "UDPSender | Project Starter Package Doc",
    "keywords": "UDPSender Sends UDP communication. namespace GarageKit public class UDPSender : MonoBehaviour Inheritance UDPSender -> MonoBehaviour Inspector Properties member type description address string Destination address port int Destination port number Methods Send string public void Send(string dataStr, string address = null, int? port = null) Send byte data public void Send(byte[] data, string address = null, int? port = null) Send string multiple times public void TryContinuousSend(string dataStr, int tryCount, float span = 0.1f, string address = null, int? port = null) Broadcast string public void Broadcast(string dataStr, int? port = null) Broadcast byte data public void Broadcast(byte[] data, int? port = null) Broadcast string multiple times public void TryContinuousBroadcast(string dataStr, int tryCount, float span = 0.1f, int? port = null)"
  },
  "Scripts_en/Utils/Object/AnimationByStep.html": {
    "href": "Scripts_en/Utils/Object/AnimationByStep.html",
    "title": "AnimationByStep | Project Starter Package Doc",
    "keywords": "AnimationByStep Step through the Animation component. namespace GarageKit public class AnimationByStep : MonoBehaviour Inheritance AnimationByStep -> MonoBehaviour Inspector Properties member type description anim Animation Animation reference speed float Step playback speed useSmooth bool Use smooth update Methods Step through animation public void Step() Reset animation public void Reset() Set animation position public void SetSeconds(float sec) Get animation position public float GetSeconds() Get animation duration public float GetDuration()"
  },
  "Scripts_en/Utils/Object/AutoBlink.html": {
    "href": "Scripts_en/Utils/Object/AutoBlink.html",
    "title": "AutoBlink | Project Starter Package Doc",
    "keywords": "AutoBlink Creates an automatic blinking animation for the material. namespace GarageKit public class AutoBlink : MonoBehaviour Inheritance AutoBlink -> MonoBehaviour Inspector Properties member type description isPinpon bool Ping pong animation settings blinkTime float Animation time startAlpha float Start alpha value endAlpha float End alpha value"
  },
  "Scripts_en/Utils/Object/AutoRotate.html": {
    "href": "Scripts_en/Utils/Object/AutoRotate.html",
    "title": "AutoRotate | Project Starter Package Doc",
    "keywords": "AutoRotate Auto rotate animation of objects. namespace GarageKit public class AutoRotate : MonoBehaviour Inheritance AutoRotate -> MonoBehaviour Inspector Properties member type description rotateSpeed float Rotation speed axis ROTATE_AXIS Rotation axis Enums ROTATE_AXIS enums description X X axis Y Y axis Z Z axis XY X and Y axis XZ X and Z axis YZ Y and Z axis XYZ All axis"
  },
  "Scripts_en/Utils/Object/AutoScale.html": {
    "href": "Scripts_en/Utils/Object/AutoScale.html",
    "title": "AutoScale | Project Starter Package Doc",
    "keywords": "AutoScale Auto scale animation of objects. namespace GarageKit public class AutoScale : MonoBehaviour Inheritance AutoScale -> MonoBehaviour Inspector Properties member type description isLoop bool Loop setting scaleTime float Animation time startScale Vector3 Start scale value endScale Vector3 End scale value"
  },
  "Scripts_en/Utils/Object/AutoUVScroll.html": {
    "href": "Scripts_en/Utils/Object/AutoUVScroll.html",
    "title": "AutoUVScroll | Project Starter Package Doc",
    "keywords": "AutoUVScroll Auto scroll animation of UV. namespace GarageKit public class AutoUVScroll : MonoBehaviour Inheritance AutoUVScroll -> MonoBehaviour Inspector Properties member type description materialID int Material ID texturePropName string Shader texture property name scrollTime float Animation time startUV Vector2 Start UV value endUV Vector2 End UV value easeType Ease Easing type loopType LoopType Loop type"
  },
  "Scripts_en/Utils/Object/Billbord.html": {
    "href": "Scripts_en/Utils/Object/Billbord.html",
    "title": "Billbord | Project Starter Package Doc",
    "keywords": "Billbord Executes billboard processing on the specified target object. namespace GarageKit public class Billbord : MonoBehaviour Inheritance Billbord -> MonoBehaviour Inspector Properties member type description target Transform Target reference invertForward bool Reverse front direction invertUp bool Reverse up direction lockPitch bool No pitch rotation isZup bool Z axis is upward asGroup bool All objects in the child hierarchy are reflected"
  },
  "Scripts_en/Utils/Object/Fader.html": {
    "href": "Scripts_en/Utils/Object/Fader.html",
    "title": "Fader | Project Starter Package Doc",
    "keywords": "Fader Set it on the camera and perform the fade using GL drawing processing. Drawn at the end of all drawings. It is automatically set when using AsyncStateBase. namespace GarageKit [RequireComponent(typeof(Camera))] public class Fader : MonoBehaviour Inheritance Fader -> MonoBehaviour Inspector Properties member type description fadeTime float Fade time fadeColor Color Fade color fadeMaterial Material Fade material fadeType FADE_TYPE Fade type Enums FADE_TYPE enums description FADE_IN Fade in FADE_OUT Fade out Static Methods Enabling/disabling fade public static bool UseFade { get; } List of all Fader components in the scene public static List<Fader> Faders { get; } Start fading all Fader components public static void StartFadeAll(FADE_TYPE fadeType) public static void StartFadeAll(float fadeTime, FADE_TYPE fadeType) Methods Checking if it's fading public bool IsFading { get; } Enabling fade public static void EnableFade() Disabling fade public static void DisableFade() Start fade public void StartFade(FADE_TYPE fadeType, float targetAlpha = 1.0f) public void StartFade(float fadeTime, FADE_TYPE fadeType, float targetAlpha = 1.0f)"
  },
  "Scripts_en/Utils/Object/LineObject.html": {
    "href": "Scripts_en/Utils/Object/LineObject.html",
    "title": "LineObject | Project Starter Package Doc",
    "keywords": "LineObject Set the plane direction and draw a line to the target object. Place a plane object in the child hierarchy for line expression. namespace GarageKit [ExecuteInEditMode] public class LineObject : MonoBehaviour Inheritance LineObject -> MonoBehaviour Inspector Properties member type description dimension DIMENSION Plane direction setting target GameObject Target reference thickness float Line thickness Enums DIMENSION enums description XY XY plane XZ XZ plane"
  },
  "Scripts_en/Utils/Object/MultiTransformFollower.html": {
    "href": "Scripts_en/Utils/Object/MultiTransformFollower.html",
    "title": "MultiTransformFollower | Project Starter Package Doc",
    "keywords": "MultiTransformFollower Synchronize Transforms between multiple target objects. It is useful to use it together with GizmoDrawer. namespace GarageKit [ExecuteInEditMode] public class MultiTransformFollower : MonoBehaviour Inheritance MultiTransformFollower -> MonoBehaviour Inspector Properties member type description target_A GameObject Target A reference target_B GameObject Target B reference lerp float Position between two targets followPosition MULTI_FOLLOW_AXIS Position sync setting followRotation MULTI_FOLLOW_AXIS Rotation sync setting followScale MULTI_FOLLOW_AXIS Scale sync setting MULTI_FOLLOW_AXIS Sync axis information structure namespace GarageKit [Serializable] public class MULTI_FOLLOW_AXIS Properties member type description x bool Enable x direction y bool Enable y direction z bool Enable z direction"
  },
  "Scripts_en/Utils/Object/PanoramaOrbit.html": {
    "href": "Scripts_en/Utils/Object/PanoramaOrbit.html",
    "title": "PanoramaOrbit | Project Starter Package Doc",
    "keywords": "PanoramaOrbit Orbit rotates panoramic objects. If you want to rotate the camera, you can also use Panorama360Camera. namespace GarageKit public class PanoramaOrbit : MonoBehaviour, ILocalize Inheritance PanoramaOrbit -> MonoBehaviour Inspector Properties member type description mode OPERATION_MODE Operation mode rotationSpeed float Rotation speed invertY bool Invert Y axis rotation invertX bool Invert X axis rotation Enums OPERATION_MODE enums description ROTATE_Y Y axis rotation operation ROTATE_XY Y and Y axis rotation operation Methods Reset rotation public void RotationReset() Set rotate value public void SetRotate(float h, float v, float speed)"
  },
  "Scripts_en/Utils/Object/ScreenAnchor.html": {
    "href": "Scripts_en/Utils/Object/ScreenAnchor.html",
    "title": "ScreenAnchor | Project Starter Package Doc",
    "keywords": "ScreenAnchor Specify the reference position on the screen and fix the position. namespace GarageKit public class ScreenAnchor : MonoBehaviour Inheritance ScreenAnchor -> MonoBehaviour Inspector Properties member type description anchorPosH ANCHOR_POSITION_HORIZONTAL Horizontal position setting anchorPosV ANCHOR_POSITION_VERTICAL Vertical position setting useUpdateAnchor bool Perform fixed processing with Update() Enums ANCHOR_POSITION_HORIZONTAL enums description LEFT Left edge MIDDLE Horizontal center RIGHT Right wdge ANCHOR_POSITION_VERTICAL enums description TOP Top edge MIDDLE Vertical center BOTTOM Bottom edge"
  },
  "Scripts_en/Utils/Object/ScreenPositionFollower.html": {
    "href": "Scripts_en/Utils/Object/ScreenPositionFollower.html",
    "title": "ScreenPositionFollower | Project Starter Package Doc",
    "keywords": "ScreenPositionFollower Synchronize to the screen position of the target object. It is useful to use it together with GizmoDrawer. namespace GarageKit public class ScreenPositionFollower : MonoBehaviour Inheritance ScreenPositionFollower -> MonoBehaviour Inspector Properties member type description targetObject GameObject Target reference rayCamera Camera Screen camera reference screenWidth int Screen width screenHeight int Screen height setAsScreenSize bool Reflects current screen size uiScale float Scale"
  },
  "Scripts_en/Utils/Object/StageManagedObject.html": {
    "href": "Scripts_en/Utils/Object/StageManagedObject.html",
    "title": "StageManagedObject | Project Starter Package Doc",
    "keywords": "StageManagedObject Manage visibility of objects. SceneStateManager is useful when you want to show/hide objects in each state all at once during state transition. namespace GarageKit public class StageManagedObject : MonoBehaviour Inheritance StageManagedObject -> MonoBehaviour Static Methods Hide objects of all StageManagedObject components public static void AllOff() Display objects of all StageManagedObject components in a list public static void ListOn(List<StageManagedObject> ons) public static void ListOn(StageManagedObject[] ons) Methods Display object public void On() Hide object public void Off() Example public class SampleState : StateBase { public StageManagedObject[] enables; public override void StateStart(object context) { // Switching display objects during State transition StageManagedObject.AllOff(); foreach(StageManagedObject obj in enables) obj.On(); } }"
  },
  "Scripts_en/Utils/Object/TextRandomizer.html": {
    "href": "Scripts_en/Utils/Object/TextRandomizer.html",
    "title": "TextRandomizer | Project Starter Package Doc",
    "keywords": "TextRandomizer Runs an animation that randomly changes text. namespace GarageKit public class TextRandomizer : MonoBehaviour Inheritance TextRandomizer -> MonoBehaviour Inspector Properties member type description randomChars string Characters used for random text uiText TMP_Text TMP_Text reference Methods Start random text animation public void TextRandomizeIn(string goalText, float delay = 0.0f, int insertRndChrs = 10, bool defaultSalt = true)"
  },
  "Scripts_en/Utils/Object/TransformFollower.html": {
    "href": "Scripts_en/Utils/Object/TransformFollower.html",
    "title": "TransformFollower | Project Starter Package Doc",
    "keywords": "TransformFollower Synchronize the Transform with the target object. It is useful to use it together with GizmoDrawer. namespace GarageKit [ExecuteInEditMode] public class TransformFollower : MonoBehaviour Inheritance TransformFollower -> MonoBehaviour Inspector Properties member type description targetObject GameObject Target reference followPosition FOLLOW_AXIS Position sync setting followRotation FOLLOW_AXIS Rotation sync setting followScale FOLLOW_AXIS Scale sync setting FOLLOW_AXIS Sync axis information structure namespace GarageKit [Serializable] public class FOLLOW_AXIS Properties member type description x bool Enable x direction y bool Enable y direction z bool Enable z direction"
  },
  "Scripts_en/Utils/Object/WebCamPlateObject.html": {
    "href": "Scripts_en/Utils/Object/WebCamPlateObject.html",
    "title": "WebCamPlateObject | Project Starter Package Doc",
    "keywords": "WebCamPlateObject Simplifies settings when using a web camera. The image is reflected in the texture. namespace GarageKit [RequireComponent(typeof(Renderer))] public class WebCamPlateObject : MonoBehaviour Inheritance WebCamPlateObject -> MonoBehaviour Inspector Properties member type description deviceName string Specifying camera device name deviceIndex int Specifying camera device id requestedWidth int Camera image width specification requestedHeight int Camera image hejght specification requestedFPS int Camera image FPS specification anisoLevel int Anisotropic filtering level of texture texturePropName string Shader texture property name filteMode FilterMode Filter mode of texture wrapMode TextureWrapMode Wrap mode of texture isAutoAspect bool Automatic aspect setting isMirror bool Horizontal flip setting isMobileCameraRotation bool Reflecting the rotation direction of the device vertical OBJECTAXIS_Y Upward axis setting Enums OBJECTAXIS_Y enums description Y Object Y axis direction Z Object Z axis direction Methods Get WebCamTexture public WebCamTexture WebCamTexture { get; } Check if the webcam is open public bool IsWebCamPlaySuccess()"
  },
  "Scripts_en/Utils/Object/ZsortOrderGroup.html": {
    "href": "Scripts_en/Utils/Object/ZsortOrderGroup.html",
    "title": "ZsortOrderGroup | Project Starter Package Doc",
    "keywords": "ZsortOrderGroup Sort all objects in the child hierarchy by distance from the target. namespace GarageKit public class ZsortOrderGroup : MonoBehaviour Inheritance WebCamPlateObject -> MonoBehaviour Inspector Properties member type description distanceTarget Transform Target for distance determination isReverse bool Reverse sort order"
  },
  "Scripts_en/Utils/ObjectUtil.html": {
    "href": "Scripts_en/Utils/ObjectUtil.html",
    "title": "ObjectUtil | Project Starter Package Doc",
    "keywords": "ObjectUtil Provides utility functions related to object manipulation. namespace GarageKit public class ObjectUtil Static Methods Setting layers of child hierarchy objects all at once public static void SetLayerChildren(GameObject rootObject, int layer, bool changeParent = false) Get the bounding box of the entire hierarchy public static Bounds GetRenderBoundsChildren(GameObject root)"
  },
  "Scripts_en/Utils/Render/GlLineRenderer.html": {
    "href": "Scripts_en/Utils/Render/GlLineRenderer.html",
    "title": "GlLineRenderer | Project Starter Package Doc",
    "keywords": "GlLineRenderer OnPostRender() draws a GL line at the specified coordinates. namespace GarageKit [RequireComponent(typeof(Camera))] public class GlLineRenderer : MonoBehaviour Inheritance GlLineRenderer -> MonoBehaviour Inspector Properties member type description lineColor Color Drawing line color lines LineData[] Drawing line coordinate list lineMaterial Material Drawing material Methods Update line coordinates public void UpdateLine(int id, Vector2 start, Vector2 end) LineData Structure of drawing line coordinates namespace GarageKit [Serializable] public class LineData Properties member type description start Vector2 Start point end Vector2 End point"
  },
  "Scripts_en/Utils/Render/RenderScreenTexture.html": {
    "href": "Scripts_en/Utils/Render/RenderScreenTexture.html",
    "title": "RenderScreenTexture | Project Starter Package Doc",
    "keywords": "RenderScreenTexture Set RenderTexture on the camera so that it can be obtained externally. namespace GarageKit [RequireComponent(typeof(Camera))] public class RenderScreenTexture : MonoBehaviour Inheritance RenderScreenTexture -> MonoBehaviour Inspector Properties member type description asScreenSize bool Automatic setting by screen size textureSize Vector2 RenderTexture size Methods Get screen RenderTexture public RenderTexture GetRenderTexture()"
  },
  "Scripts_en/Utils/Repository/Base/SceneRepositoryBase.html": {
    "href": "Scripts_en/Utils/Repository/Base/SceneRepositoryBase.html",
    "title": "SceneRepositoryBase | Project Starter Package Doc",
    "keywords": "SceneRepositoryBase SceneStateManager is a repository object that provides inter-scene parameter access when using multiple scenes. After loading the destination scene, you can obtain the inspector-configured reference via the SceneRepositoryBase placed in the destination scene. namespace GarageKit public class SceneRepositoryBase : MonoBehaviour, ISceneRepository Inheritance SceneRepositoryBase -> MonoBehaviour, ISceneRepository Methods Get value by string of variable name public T FindByVarName<T>(string varName) Example // sample repository class public class MultipleSceneRepository : SceneRepositoryBase { public Text messageText; public GameObject testCube; } MultipleSceneStateBase // After loading the destination scene, you can get the inspector-configured reference via the SceneRepositoryBase placed in the destination scene. string text = (this.SceneRepository as MultipleSceneRepository).messageText.text; GameObject cube = (this.SceneRepository as MultipleSceneRepository).testCube;"
  },
  "Scripts_en/Utils/Repository/Interface/ISceneRepository.html": {
    "href": "Scripts_en/Utils/Repository/Interface/ISceneRepository.html",
    "title": "ISceneRepository | Project Starter Package Doc",
    "keywords": "ISceneRepository SceneStateManager Repository object interface that provides inter-scene parameter access when using multiple scenes. namespace GarageKit public interface ISceneRepository Methods Get value by string of variable name T FindByVarName<T>(string varName)"
  },
  "Scripts_en/Utils/State/Base/AsyncStateBase.html": {
    "href": "Scripts_en/Utils/State/Base/AsyncStateBase.html",
    "title": "AsyncStateBase | Project Starter Package Doc",
    "keywords": "AsyncStateBase Base class for performing State transition with fade in SceneStateManager namespace GarageKit public class AsyncStateBase : StateBase, IAsyncState Inheritance AsyncStateBase -> StateBase, IAsyncState -> MonoBehaviour Inspector Properties member type description fadeTime float Fade time fadeColor Color Fade color Methods The first process executed within a State after a State transition public virtual void StateStart(object context) Processing executed every frame within State after State transition public virtual void StateUpdate() The last process executed within a State during a State transition public virtual void StateExit() Processing executed after the fade is completed public virtual void StateExitAsync()"
  },
  "Scripts_en/Utils/State/Base/MultipleSceneAsyncStateBase.html": {
    "href": "Scripts_en/Utils/State/Base/MultipleSceneAsyncStateBase.html",
    "title": "MultipleSceneAsyncStateBase | Project Starter Package Doc",
    "keywords": "MultipleSceneAsyncStateBase SceneStateManager Base class for performing state transition with fade using multiple scenes. namespace GarageKit public class MultipleSceneAsyncStateBase : MultipleSceneStateBase, IAsyncState Inheritance MultipleSceneAsyncStateBase -> MultipleSceneStateBase, IAsyncState -> StateBase -> MonoBehaviour Inspector Properties member type description loadSceneName string Scene name to load correspondingly asAsyncLoad bool Scene asynchronous loading settings asAdditiveLoad bool Additional scene loading settings Methods Get SceneRepository public SceneRepositoryBase SceneRepository { get; } The first process executed within a State after a State transition public virtual void StateStart(object context) Processing executed after scene loading is complete public virtual void SceneLoaded() Processing executed every frame within State after State transition public virtual void StateUpdate() The last process executed within a State during a State transition public virtual void StateExit() Processing executed after the fade is completed public virtual void StateExitAsync()"
  },
  "Scripts_en/Utils/State/Base/MultipleSceneStateBase.html": {
    "href": "Scripts_en/Utils/State/Base/MultipleSceneStateBase.html",
    "title": "MultipleSceneStateBase | Project Starter Package Doc",
    "keywords": "MultipleSceneStateBase SceneStateManager Base class for performing State transition using multiple scenes. namespace GarageKit public class MultipleSceneStateBase : StateBase, IAsyncState Inheritance MultipleSceneStateBase -> StateBase, IMultipleSceneState -> MonoBehaviour Inspector Properties member type description loadSceneName string Scene name to load correspondingly asAsyncLoad bool Scene asynchronous loading settings asAdditiveLoad bool Additional scene loading settings Methods Get SceneRepository public SceneRepositoryBase SceneRepository { get; } The first process executed within a State after a State transition public virtual void StateStart(object context) Processing executed after scene loading is complete public virtual void SceneLoaded() Processing executed every frame within State after State transition public virtual void StateUpdate() The last process executed within a State during a State transition public virtual void StateExit() Processing executed after scene destruction public virtual void SceneUnloaded()"
  },
  "Scripts_en/Utils/State/Base/StateBase.html": {
    "href": "Scripts_en/Utils/State/Base/StateBase.html",
    "title": "StateBase | Project Starter Package Doc",
    "keywords": "StateBase Base class for performing State transitions in SceneStateManager. namespace GarageKit public class StateBase : MonoBehaviour, IState Inheritance StateBase -> MonoBehaviour, IState Properties member type description updateEnable bool Can be used to enable/disable StateUpdate() processing Methods Checking the validity of StateUpdate() processing public bool IsUpdateEnable { get; } The first process executed within a State after a State transition public virtual void StateStart(object context) Processing executed every frame within State after State transition public virtual void StateUpdate() The last process executed within a State during a State transition public virtual void StateExit()"
  },
  "Scripts_en/Utils/State/Base/TimelinedSceneStateBase.html": {
    "href": "Scripts_en/Utils/State/Base/TimelinedSceneStateBase.html",
    "title": "TimelinedSceneStateBase | Project Starter Package Doc",
    "keywords": "TimelinedSceneStateBase SceneStateManager Base class for performing State transition using timeline. namespace GarageKit public class TimelinedSceneStateBase : AsyncStateBase, ITimelinedSceneState Inheritance TimelinedSceneStateBase -> AsyncStateBase, ITimelinedSceneState -> StateBase -> MonoBehaviour Inspector Properties member type description durationSec int Timeline length (seconds) Methods Current timeline time public float CurrentActionTime { get; } Check timeline playback public bool IsPlay { get; } Check timeline it is paused public bool IsPaused { get; } The first process executed within a State after a State transition public virtual void StateStart(object context) Processing executed every frame within State after State transition public virtual void StateUpdate() The last process executed within a State during a State transition public virtual void StateExit() Process when timeline completes public virtual void OnStateTimer(GameObject sender) Start timeline public void StartTimeline() Pause timeline public virtual void Pause() Resume timeline public virtual void Resume()"
  },
  "Scripts_en/Utils/State/Base/VRSceneStateBase.html": {
    "href": "Scripts_en/Utils/State/Base/VRSceneStateBase.html",
    "title": "VRSceneStateBase | Project Starter Package Doc",
    "keywords": "VRSceneStateBase SceneStateManager Base class for performing state transitions for VR content。 namespace GarageKit public class VRSceneStateBase : TimelinedSceneStateBase, ISequentialState, IVRSceneState Inheritance VRSceneStateBase -> TimelinedSceneStateBase, ISequentialState, IVRSceneState -> AsyncStateBase -> StateBase -> MonoBehaviour Inspector Properties member type description viewReferenceObj GameObject Reference of viewpoint position object viewGuideTarget GameObject Reference to gaze guide object enables StageManagedObject[] Display management object list Methods The first process executed within a State after a State transition public virtual void StateStart(object context) Processing executed every frame within State after State transition public virtual void StateUpdate() The last process executed within a State during a State transition public virtual void StateExit() Transition processing to the next State public virtual void ToNextState() Transition process to previous State public virtual void ToPrevState() Processing to reset the current state public virtual void ResetCurrentState() Display object setting processing public void SetStagingObjects()"
  },
  "Scripts_en/Utils/State/Interface/IAsyncState.html": {
    "href": "Scripts_en/Utils/State/Interface/IAsyncState.html",
    "title": "IAsyncState | Project Starter Package Doc",
    "keywords": "IAsyncState Interface for performing State transition with fade in SceneStateManager. namespace GarageKit public interface IAsyncState Methods Implementation of the process to be executed after the fade is completed void StateExitAsync()"
  },
  "Scripts_en/Utils/State/Interface/IMultipleSceneState.html": {
    "href": "Scripts_en/Utils/State/Interface/IMultipleSceneState.html",
    "title": "IMultipleSceneState | Project Starter Package Doc",
    "keywords": "IMultipleSceneState SceneStateManager Interface for performing State transition using multiple scenes. namespace GarageKit public interface IMultipleSceneState Methods Implementation of processing executed after scene loading is complete. void SceneLoaded()"
  },
  "Scripts_en/Utils/State/Interface/ISequentialState.html": {
    "href": "Scripts_en/Utils/State/Interface/ISequentialState.html",
    "title": "ISequentialState | Project Starter Package Doc",
    "keywords": "ISequentialState Interface for performing continuous State transitions with SceneStateManager. namespace GarageKit public interface ISequentialState Methods Implementation of transition processing to the next State void ToNextState() Implementation of transition processing to previous State void ToNextState()"
  },
  "Scripts_en/Utils/State/Interface/IState.html": {
    "href": "Scripts_en/Utils/State/Interface/IState.html",
    "title": "IState | Project Starter Package Doc",
    "keywords": "IState Interface for performing State transition in SceneStateManager. namespace GarageKit public interface IState Methods Implementation of the first process executed within a State after a State transition void StateStart(object context) Implementation of processing executed every frame within State after State transition void StateUpdate() Implementation of the last process executed within a State during a State transition void StateExit()"
  },
  "Scripts_en/Utils/State/Interface/ITimelinedSceneState.html": {
    "href": "Scripts_en/Utils/State/Interface/ITimelinedSceneState.html",
    "title": "IStITimelinedSceneStateate | Project Starter Package Doc",
    "keywords": "IStITimelinedSceneStateate SceneStateManager Interface for performing State transition using timeline. namespace GarageKit public interface ITimelinedSceneState Methods Implementation of processing to pause the timeline void Pause() Implementation of processing to rresume the timeline void Resume() Implementation of processing when the timeline is completed void OnStateTimer(GameObject sender)"
  },
  "Scripts_en/Utils/State/Interface/IVRSceneState.html": {
    "href": "Scripts_en/Utils/State/Interface/IVRSceneState.html",
    "title": "VRSceneStateBase | Project Starter Package Doc",
    "keywords": "VRSceneStateBase SceneStateManager Interface for performing state transition for VR content. namespace GarageKit public interface VRSceneStateBase Methods Implementation of processing to reset the current state void ResetCurrentState() Implementation of display object setting processing void SetStagingObjects();"
  },
  "Scripts_en/Utils/TextUtil.html": {
    "href": "Scripts_en/Utils/TextUtil.html",
    "title": "TextUtil | Project Starter Package Doc",
    "keywords": "TextUtil Provides text related utility functions. namespace GarageKit public class TextUtil Static Methods Character limit public static string CutoutText(string text, int maxCount) Align the number of lines public static string AlignText(string text, int lineCount) Format text with line breaks by specifying the number of line characters and number of lines public static string CutoutLineAndLfText(string lfText, int maxLineCount, int maxLineStringCount) Format text with line breaks by specifying the number of lines public static string CutoutLine(string lfText, int maxLineCount) Remove line breaks public static string RemoveEOL(string text) Avoid half-width # error when using WWW class public static string EscapeSingleByteSharpForWWW(string text) Text encoding conversion public static string ConvertEncoding(string srcString, Encoding destEncording) Substring considering the number of bytes in multibyte characters public static string SubstringDoubleByte(string srcString, int startIndex, int endIndex, Encoding encoding) Character count considering the number of bytes in multibyte characters public static int MultiByteLength(string srcString, Encoding encoding) Check for multibyte characters public static bool IsMultiByteChar(char srcChar, Encoding encoding) Checks if the TextMesh fits within the specified width, and if it does not fit, breaks a line. public static void CalcTextBox(TextMesh textMesh, float width = 1000.0f) Parse string by splitting it into IP address and port number public static bool ParseIpAndPort(string ipStr, out string ip, out int port)"
  },
  "Scripts_en/Utils/Texture/NumberTexture.html": {
    "href": "Scripts_en/Utils/Texture/NumberTexture.html",
    "title": "NumberTexture | Project Starter Package Doc",
    "keywords": "NumberTexture Set and switch textures from the input values ​​0-9. namespace GarageKit public class NumberTexture : MonoBehaviour Inheritance NumberTexture -> MonoBehaviour Inspector Properties member type description numTextures Texture2D[] Number texture 0-9 numPlates GameObject[] Digit object starting with the ones digit Methods Set number texture public void SetNumber(int num)"
  },
  "Scripts_en/Utils/Texture/SequenceSprite.html": {
    "href": "Scripts_en/Utils/Texture/SequenceSprite.html",
    "title": "SequenceSprite | Project Starter Package Doc",
    "keywords": "SequenceSprite Switch sequential number Sprites in frames. namespace GarageKit public class SequenceSprite : MonoBehaviour Inheritance SequenceSprite -> MonoBehaviour Inspector Properties member type description uiImage Image Image reference sprites Sprite[] Sequential sprite Methods Reset sequence public void ResetSequence() Start sequence public void StartSequence() Stop sequence public void StopSequence()"
  },
  "Scripts_en/Utils/Texture/SequenceTexture.html": {
    "href": "Scripts_en/Utils/Texture/SequenceTexture.html",
    "title": "SequenceTexture | Project Starter Package Doc",
    "keywords": "SequenceTexture Automatically switch sequential number Texture in frame. namespace GarageKit public class SequenceTexture : MonoBehaviour Inheritance SequenceTexture -> MonoBehaviour Inspector Properties member type description fps int Switching FPS isLoop bool Loop settings textures Texture2D[] Sequential texture list textureParamName string Shader parameter name where texture is set"
  },
  "Scripts_en/Utils/TimelineUtil.html": {
    "href": "Scripts_en/Utils/TimelineUtil.html",
    "title": "TimelineUtil | Project Starter Package Doc",
    "keywords": "TimelineUtil Provides utility functions related to Timeline operations. Important When using it, please enable #define definition in the source code. namespace GarageKit public class TimelineUtil Static Methods Perform GC processing on management tracks public static void GavageManagedTracks() Add track to timeline public static TrackAsset AddTrack<T>(PlayableDirector playableDirector, string trackName, UnityEngine.Object bindObj, TrackAsset parent = null) where T : TrackAsset タイムラインからトラックを削除 public static void DeleteTrack(PlayableDirector playableDirector, TrackAsset track) Delete track from timeline public static void DeleteAllTrack(PlayableDirector playableDirector) Delete a track from the timeline by specifying the track name public static void DeleteTrackByName(PlayableDirector playableDirector, string trackName) Get by specifying track name public static TrackAsset GetTrackByName(PlayableDirector playableDirector, string trackName) Get all tracks public static List<TrackAsset> GetAllTracks(PlayableDirector playableDirector) Clear all clips by specifying track name public static void ClearTrackByName(PlayableDirector playableDirector, string trackName) Clear all clips on all tracks public static void ClearAllTracks(PlayableDirector playableDirector) Setting up a new track public static void SetTrack<T>(PlayableDirector playableDirector, string trackName, double start, double end) where T : TrackAsset Setting up a new audio track public static void SetAudioTrack(PlayableDirector playableDirector, string trackName, AudioClip audioClip, double start, double? end = null, bool loop = false, double easeInDuration = 0.0, double easeOutDuration = 0.0) Setting up a new RawImage track public static void SetRawImageTrack(PlayableDirector playableDirector, string trackName, Texture2D tex, double start, double end) Setting up a new AVPro MediaPlayer track public static void SetMediaPlayerTrack(PlayableDirector playableDirector, string trackName, MediaPathType mediaPathType, string moviePath, double start, double? end = null) public static void SetMediaPlayerTrack(PlayableDirector playableDirector, string trackName, double start, double? end = null, float vol = 1.0f) Setting up a new activation track public static void SetActivationTrack(PlayableDirector playableDirector, string trackName, double start, double end) Setting up a new animation track public static void SetAnimationTrack(PlayableDirector playableDirector, string trackName, AnimationClip animClip, double start, double end) Setting up a new signal track public static void SetSignalTrack(PlayableDirector playableDirector, string trackName, SignalAsset signal, double time, string emitterName = \"\") public static void SetSignalTrack(PlayableDirector playableDirector, SignalAsset signal, double time, string emitterName = \"\") Get a list of each Clip In/Out time in a track public static List<Tuple<Double, Double>> GetClipsInOut(TrackAsset track)"
  },
  "Scripts_en/Utils/UI/InputfieldZenkakuBSFix.html": {
    "href": "Scripts_en/Utils/UI/InputfieldZenkakuBSFix.html",
    "title": "InputfieldZenkakuBSFix | Project Starter Package Doc",
    "keywords": "InputfieldZenkakuBSFix A function to address the bug where the characters being converted double when the focus is removed from the InputField without finalizing it during full-width conversion of Japanese input. reference: https://qiita.com/monolith8/items/a88b13ecc1121fa10450 namespace GarageKit [RequireComponent(typeof(InputField))] public class InputfieldZenkakuBSFix : MonoBehaviour Inheritance InputfieldZenkakuBSFix -> MonoBehaviour"
  },
  "Scripts_en/Utils/UI/UIFadeGroupComponent.html": {
    "href": "Scripts_en/Utils/UI/UIFadeGroupComponent.html",
    "title": "UIFadeGroupComponent | Project Starter Package Doc",
    "keywords": "UIFadeGroupComponent Manages fade processing for a CanvasGroup. namespace GarageKit public class UIFadeGroupComponent : MonoBehaviour Inheritance UIFadeGroupComponent -> MonoBehaviour Methods Reset fade public void ResetFade() Start fade public void StartFade(float fixTime = 5.0f, float tweenTime = 0.5f) Set UI position by distance to camera position public void SetUiPosition3D(Vector3 camPos, Vector3 targetPos, float height = 1.8f, float depth = 1.5f)"
  },
  "Scripts_en/Utils/UI/UIFadeTelop.html": {
    "href": "Scripts_en/Utils/UI/UIFadeTelop.html",
    "title": "UIFadeTelop | Project Starter Package Doc",
    "keywords": "UIFadeTelop Displays faded text in a CanvasGroup. namespace GarageKit public class UIFadeTelop : MonoBehaviour Inheritance UIFadeTelop -> UIFadeGroupComponent -> MonoBehaviour Inspector Properties member type description uiText TMP_Text TMP_Text reference uiTextBg Image Background image resizeBg bool Resize the background to fit the text size Methods Start of fading of captions public void StartTelop(string message, float fixTime = 5.0f, float tweenTime = 0.5f)"
  },
  "Scripts_en/Utils/UI/UILongPressButton.html": {
    "href": "Scripts_en/Utils/UI/UILongPressButton.html",
    "title": "UILongPressButton | Project Starter Package Doc",
    "keywords": "UILongPressButton Button component that can be executed by long press. namespace GarageKit [RequireComponent(typeof(EventTrigger))] public class UILongPressButton : MonoBehaviour Inheritance UILongPressButton -> MonoBehaviour Inspector Properties member type description holdTime float Long press time Methods Long press execution callback public Action OnHoldButton"
  },
  "Scripts_en/Utils/UI/UIMovieControllPanel.html": {
    "href": "Scripts_en/Utils/UI/UIMovieControllPanel.html",
    "title": "UIMovieControllPanel | Project Starter Package Doc",
    "keywords": "UIMovieControllPanel Provides control panel functionality for movie playback using AVProVideo. Important Requires the AVProVideo package. When using it, please enable #define definition in the source code. Important Available from configured prefabs within the package. Add DisplayUGUI and TMP_Text components in the prefab and reset each reference to use them. namespace GarageKit public class UIMovieControllPanel : MonoBehaviour Inheritance ARTrackedImageMarkerManager -> MonoBehaviour Inspector Properties member type description player MediaPlayer MediaPlayer reference setupOnStart bool Set up with Start() uiMovie DisplayUGUI DisplayUGUI reference uiPlayPauseBtn Button Play/Pause button reference uiSeekSlider Slider Seek slider reference uiElapsedTxt TMP_Text Remaining time TMP_Text reference seekEventTrg EventTrigger EventTrigger reference for seek event playSprite Sprite Play button Sprite pauseSprite Sprite Pause button Sprite Methods Callback when playback start public Action OnPlay Callback when paused public Action OnPause Callback when seek start public Action<float> OnSeekStart Callback when seeking public Action<float> OnSeek Callback when seek end public Action<float> OnSeekEnd Callback when playback complete public Action OnFinishedPlaying Clear movie public void Clear() Setup this controll panel public void Setup() Load movie public bool Load(string moviePathOrUrl, MediaPathType pathType = MediaPathType.AbsolutePathOrURL, bool autoPlay = false) Example __ProjectName__/Prefabs/Utils/UI/MovieControllPanel.prefab // Setup required before loading and playing uiMovieControllPanel.Setup(); uiMovieControllPanel.Load(\"test.mp4\");"
  },
  "Scripts_en/Utils/UI/UIWebCamRawImage.html": {
    "href": "Scripts_en/Utils/UI/UIWebCamRawImage.html",
    "title": "UIWebCamRawImage | Project Starter Package Doc",
    "keywords": "UIWebCamRawImage Simplifies uGUI RawImage settings that use a web camera. namespace GarageKit [RequireComponent(typeof(RawImage))] public class UIWebCamRawImage : MonoBehaviour Inheritance UIWebCamRawImage -> MonoBehaviour Inspector Properties member type description webcamPlayOnStart bool Start playback with Start() deviceName string Specifying camera device name deviceIndex int Specifying camera device id requestedWidth int Camera image width specification requestedHeight int Camera image height specification requestedFPS int Camera image FPS specification anisoLevel int Anisotropic filtering level of texture filteMode FilterMode Filter mode of texture wrapMode TextureWrapMode Wrap mode of texture isAutoScreenAspect bool Automatic aspect setting isMirror bool Horizontal flip setting appOrientation APP_ORIENTATION Screen orientation Enums APP_ORIENTATION enums description PORTRAIT Device vertical position LANDSCAPE Device horizontal position Methods Get WebCamTexture public WebCamTexture WebCamTexture { get; } Start webcam public IEnumerator WebcamPlay() Stop webcam public void WebcamStop() Check if the webcam is open public bool IsWebcamPlay()"
  },
  "Scripts_en/Utils/VR/VRGazeGuideArrow.html": {
    "href": "Scripts_en/Utils/VR/VRGazeGuideArrow.html",
    "title": "VRGazeGuideArrow | Project Starter Package Doc",
    "keywords": "VRGazeGuideArrow Controls the display of eye guide arrows in VR. namespace GarageKit public class VRGazeGuideArrow : MonoBehaviour Inheritance VRGazeGuideArrow -> MonoBehaviour Inspector Properties member type description viewCamera Camera HMD camera reference smoothTime float Smooth moving amount screenRatio float Screen range where guides are enabled arrows GameObject[] Arrow object modeGreen Color32 Green mode color modeRed Color32 Red mode color useArrow bool Arrow display settings Enums COLOR_MODE enums description GREEN Green mode RED Red mode Methods Check if HMD device is in use public bool IsDevicePresent() Change color mode public void ChangeColor(COLOR_MODE mode)"
  },
  "Scripts_en/Utils/WindowsUtil.html": {
    "href": "Scripts_en/Utils/WindowsUtil.html",
    "title": "WindowsUtil | Project Starter Package Doc",
    "keywords": "WindowsUtil Provides Windows related utility functions. namespace GarageKit public class WindowsUtil Static Methods Get the Rect of the application window public static Rect GetApplicationWindowRect() Bring the application window to the foreground public static void SetForeGroundApplicationWindow() Set application window to popup public static void SetPopupWindow() Set application window position public static void SetWindowPos(int x, int y, int w, int h) Minimize the specified application window public static void MinimizeWindow(string className, string windowName) Minimize the application window public static void MinimizeWindow() Maximize the specified application window public static void MaximizeWindow(string className, string windowName) Maximize the application window public static void MaximizeWindow()"
  },
  "Scripts_ja/AppMain.html": {
    "href": "Scripts_ja/AppMain.html",
    "title": "AppMain | Project Starter Package Doc",
    "keywords": "AppMain シングルトンインスタンスで、各マネージャーへの参照経路を受け持ちます。 namespace GarageKit public class AppMain : MonoBehaviour Inheritance AppMain -> MonoBehaviour Inspector Properties member type description asDontDestroyOnLoad bool 複数シーンで利用する場合に、シーン移動時に破棄されずにシーン間で共有される Static Methods シングルトンインスタンスの取得 public static AppMain Instance { get; } Example // 各マネージャーへのルーティング AppMain.Instance.sceneStateManager.ChangeState(\"PLAY\"); AppMain.Instance.soundManager.Play(\"SE\", \"CLICK\");"
  },
  "Scripts_ja/Managers/DebugManager.html": {
    "href": "Scripts_ja/Managers/DebugManager.html",
    "title": "DebugManager | Project Starter Package Doc",
    "keywords": "DebugManager デバッグ用の機能を管理します。全てのデバッグ用機能は isDebug フラグによって管理されるようにすると便利です。 namespace GarageKit [RequireComponent(typeof(VisibleMouseCursor))] public class DebugManager : ManagerBase Inheritance DebugManager -> ManagerBase -> MonoBehaviour Inspector Properties member type description isDebug bool デバッグ状態管理用フラグ useIngameDebugConsole bool IngameDebugConsole パッケージ利用の有無 useGraphy bool Graphy パッケージ利用の有無 Example // デバッグ状態の確認 if(AppMain.Instance.debugManager.isDebug) Debug.Log(\"debug is true\");"
  },
  "Scripts_ja/Managers/SceneStateManager.html": {
    "href": "Scripts_ja/Managers/SceneStateManager.html",
    "title": "SceneStateManager | Project Starter Package Doc",
    "keywords": "SceneStateManager ステート遷移機能を管理します。StateBase を継承したステートオブジェクトを SceneStateManager 階層下に配置して管理します。 namespace GarageKit public class SceneStateManager : ManagerBase Inheritance SceneStateManager -> ManagerBase -> MonoBehaviour Inspector Properties member type description sceneStateTable List<SceneStateData> ステート遷移情報テーブル Methods 現在のステート情報 public SceneStateData CurrentState { get; } 一つ前のステート名 public string FromStateName { get; } ステート遷移処理中フラグ public bool StateChanging { get; } ステート遷移フェード処理中フラグ public bool AsyncChangeFading { get; } ステート初期化完了フラグ public bool StateInitted { get; } シーンからステートオブジェクトの取得 public T FindStateObjectOfType<T>() where T : StateBase public StateBase FindStateObjectByName(string stateName) 初期ステートへの遷移（AppMain の Start() から WaitForEndOfFrame() 後に呼ばれる） public void InitState() 指定ステートへの遷移 public void ChangeState(string stateName, object context = null) 指定ステートへのフェード付き遷移 public void ChangeAsyncState(string stateName, object context = null) Example // 指定ステートへの遷移 AppMain.Instance.sceneStateManager.ChangeState(\"PLAY\"); // 指定ステートへパラメータを渡してのフェード付き遷移 AppMain.Instance.sceneStateManager.ChangeAsyncState(\"PLAY\", \"param\"); SceneStateData ステート遷移情報の構造体 namespace GarageKit [Serializable] public class SceneStateData Properties member type description stateName string ステート名 stateObj StateBase ステートオブジェクトの参照 asInitial bool 初期ステートフラグ"
  },
  "Scripts_ja/Managers/SoundManager.html": {
    "href": "Scripts_ja/Managers/SoundManager.html",
    "title": "SoundManager | Project Starter Package Doc",
    "keywords": "SoundManager 音声機能を管理します。再生に必要な AudioSource は内部で自動生成されて管理されます。 namespace GarageKit public class SoundManager : ManagerBase Inheritance SoundManager -> ManagerBase -> MonoBehaviour Inspector Properties member type description soundLayers List<SoundLayerData> サウンド設定 soundLayers3D List<Sound3DLayerData> 3D サウンド設定 SoundLayers Dictionary<string, SoundLayerData> サウンド設定レイヤー名でのテーブル SoundLayers3D Dictionary<string, Sound3DLayerData> 3D サウンド設定レイヤー名でのテーブル masterMixerGroup AudioMixerGroup オプション: マスターミキサーグループ decibelByStep AnimationCurve オプション: マスター音量のステップ調整用カーブ Methods 音声レイヤーの追加 public void AddLayer(SoundLayerData layer) 音声レイヤーに音声クリップの追加 public void AddClip(string layerName, string clipName, AudioClip clip) 音声の再生 public void Play(string layerName, string clipName, bool overlap = false) public void Play(string layerName, string clipName, bool overlap, bool loop, bool asOneShot) 音声レイヤーの再生状態確認 public bool IsPlay(string layerName) 音声の再生停止 public void Stop(string layerName = \"\") 全音声の再生停止 public void StopAll(string layerName = \"\") 3D 音声レイヤーの追加 public void AddLayer3D(Sound3DLayerData layer) 3D 音声レイヤーに 3D 音声ソースの追加 public void AddSource3D(string layerName, string sourceName, AudioSource source) 3D 音声の再生 public void Play3D(string layerName, string sourceName, bool overlap = false) public void Play3D(string layerName, string sourceName, bool overlap, bool loop, bool asOneShot) 3D 音声レイヤーの再生状態確認 public bool IsPlay3D(string layerName, string sourceName) 3D 音声の再生停止 public void Stop3D(string layerName = \"\", string sourceName = \"\") 全 3D 音声の再生停止 public void Stop3DAll(string layerName = \"\") 全音声のフェードイン public void FadeInAllSound(float time = 1.0f) 全音声のフェードアウト public void FadeOutAllSound(float time = 1.0f) 指定音声のフェード public void Fade(string layerName, float fromVol, float toVol, float time) 指定 3D 音声のフェード public void Fade3D(string layerName, string sourceName, float fromVol, float toVol, float time) マスター音量ボリュームの設定 public void SetMasterVol(float vol, string exposeProperty = \"MasterVolume\") マスター音量ボリュームの1ステップアップ public void MasterVolUp(string exposeProperty = \"MasterVolume\") マスター音量ボリュームの1ステップダウン public void MasterVolDown(string exposeProperty = \"MasterVolume\") Example // 通常再生 AppMain.Instance.soundManager.Play(\"SE\", \"CLICK\"); // オーバーラップ無しでループ再生 AppMain.Instance.soundManager.Play(\"BGM\", \"CLIP\", false, true); SoundClipData クリップ情報の構造体 namespace GarageKit [Serializable] public class SoundClipData Properties member type description clipName string クリップ名 clip AudioClip オーディオクリップ SoundData サウンド情報の構造体 namespace GarageKit [Serializable] public class SoundData Properties member type description use bool 利用の有無 volume float 音量ボリューム clips List<SoundClipData> クリップ情報リスト SoundLayerData レイヤー情報の構造体 namespace GarageKit [Serializable] public class SoundLayerData Properties member type description layerName string レイヤー名 soundData SoundData サウンド情報 Methods レイヤーごとの処理の無効化設定 public bool IgnoreAllMethod { get; set; } SoundSourceData 3D サウンドソース情報の構造体 namespace GarageKit [Serializable] public class SoundSourceData Properties member type description sourceName string 3D サウンドソース名 source AudioSource オーディオソース Sound3DData 3D サウンド情報の構造体 namespace GarageKit [Serializable] public class Sound3DData Properties member type description use bool 利用の有無 volume float 音量ボリューム sources List<SoundSourceData> 3D サウンドソース情報リスト Sound3DLayerData 3D レイヤー情報の構造体 namespace GarageKit [Serializable] public class Sound3DLayerData Properties member type description layerName string レイヤー名 soundData Sound3DData サウンド情報 Methods レイヤーごとの処理の無効化設定 public bool IgnoreAllMethod { get; set; }"
  },
  "Scripts_ja/Managers/TimeManager.html": {
    "href": "Scripts_ja/Managers/TimeManager.html",
    "title": "TimeManager | Project Starter Package Doc",
    "keywords": "TimeManager タイマー機能を管理します。TimerEvent を登録して利用します。デフォルトでは MainTimer を登録しています。 namespace GarageKit public class TimeManager : ManagerBase Inheritance TimeManager -> ManagerBase -> MonoBehaviour Inspector Properties member type description timerEvents List<TimerEvent> タイマーイベントリスト Methods メインタイマーへの参照取得 public TimerEvent mainTimer { get; } Example // タイマー完了イベントを追加 AppMain.Instance.timeManager.mainTimer.OnCompleteTimer += (sender) => { Debug.Log(\"on complete timer\"); }; // タイムカウント10秒sを開始 AppMain.Instance.timeManager.mainTimer.StartTimer(10);"
  },
  "Scripts_ja/Managers/UserInputManager.html": {
    "href": "Scripts_ja/Managers/UserInputManager.html",
    "title": "UserInputManager | Project Starter Package Doc",
    "keywords": "UserInputManager ユーザー入力機能を管理します。全てのユーザー入力のコードはここに纏めると便利です。 namespace GarageKit public class UserInputManager : ManagerBase Inheritance UserInputManager -> ManagerBase -> MonoBehaviour Example デフォルト実装済みキー 操作キー 機能 Esc アプリケーションの終了 D デバッグ機能のトグル R 設定ファイル ApplicationSetting.xml の再読み込み Backspace 現在の GameView をキャプチャーしてデスクトップに画像保存"
  },
  "Scripts_ja/Utils/ARFoundationExtention/ARCameraSync.html": {
    "href": "Scripts_ja/Utils/ARFoundationExtention/ARCameraSync.html",
    "title": "ARCameraSync | Project Starter Package Doc",
    "keywords": "ARCameraSync AR カメラオブジェクトとパラメータを同期させます。 Important 利用の際はソースコード内の #define 定義を有効にしてください。 namespace GarageKit.ARFoundationExtention [RequireComponent(typeof(Camera))] public class ARCameraSync : MonoBehaviour Inheritance ARCameraSync -> MonoBehaviour Inspector Properties member type description arCameraManager ARCameraManager ARCameraManager の参照 syncFov bool カメラ FOV の同期設定 syncPosition bool Position の同期設定 syncRotation bool Rotation の同期設定 asLocal bool ローカル座標系での同期"
  },
  "Scripts_ja/Utils/ARFoundationExtention/ARCoreCoachingView.html": {
    "href": "Scripts_ja/Utils/ARFoundationExtention/ARCoreCoachingView.html",
    "title": "ARCoreCoachingView | Project Starter Package Doc",
    "keywords": "ARCoreCoachingView Android ARCore 利用時に iOS ARKit のコーチングビュー表示を真似て表示できます。 Important 利用の際はソースコード内の #define 定義を有効にしてください。 namespace GarageKit.ARFoundationExtention public class ARCoreCoachingView : MonoBehaviour Inheritance ARCoreCoachingView -> MonoBehaviour Inspector Properties member type description planeManager ARPlaneManager ARPlaneManager の参照 view CanvasGroup View グループ Methods View の有効化 public void ActivateCoaching() View の無効化 public void DisableCoaching()"
  },
  "Scripts_ja/Utils/ARFoundationExtention/ARKitCoachingOverlay.html": {
    "href": "Scripts_ja/Utils/ARFoundationExtention/ARKitCoachingOverlay.html",
    "title": "ARKitCoachingOverlay | Project Starter Package Doc",
    "keywords": "ARKitCoachingOverlay iOS ARKit のネイティブ機能のコーチングビューをコントロールします。 https://developer.apple.com/documentation/arkit/arcoachingoverlayview Important 利用の際はソースコード内の #define 定義を有効にしてください。 namespace GarageKit.ARFoundationExtention [RequireComponent(typeof(ARSession))] public class ARKitCoachingOverlay : MonoBehaviour Inheritance ARKitCoachingOverlay -> MonoBehaviour Inspector Properties member type description Goal CoachingGoal 追跡要件を指示する為のゴール ActivatesAutomatically bool 自動有効化 Enums CoachingGoal enums description Tracking ワールドトラッキング HorizontalPlane 水平面 VerticalPlane 垂直面 AnyPlane 任意の平面 Methods コーチング機能のサポート確認 public bool supported { get; } コーチングの有効化 public void ActivateCoaching(bool animated) コーチングの無効化 public void DisableCoaching(bool animated)"
  },
  "Scripts_ja/Utils/ARFoundationExtention/ARObjectPlacementManager.html": {
    "href": "Scripts_ja/Utils/ARFoundationExtention/ARObjectPlacementManager.html",
    "title": "ARObjectPlacementManager | Project Starter Package Doc",
    "keywords": "ARObjectPlacementManager タッチ入力での ARRaycastHit によって AR オブジェクトを配置固定します。 Important 利用の際はソースコード内の #define 定義を有効にしてください。 namespace GarageKit.ARFoundationExtention public class ARObjectPlacementManager : MonoBehaviour Inheritance ARObjectPlacementManager -> MonoBehaviour Inspector Properties member type description raycastManager ARRaycastManager ARRaycastManager の参照 isInstantiate bool インスタンス配置の有効化 instantiateRef GameObject インスタンス化元のプレハブ touchBlockers RectTransform[] タッチ入力判定をブロックする UI オブジェクトリスト Methods 最後に配置した AR オブジェクトの参照 public IPlacableObject PlacableObj { get; } IPlacableObject 配置する AR オブジェクトのインターフェース namespace GarageKit.ARFoundationExtention public interface IPlacableObject Methods 配置時に SendMessage で呼ばれるコールバック void OnPlace();"
  },
  "Scripts_ja/Utils/ARFoundationExtention/ARSessionStartHelper.html": {
    "href": "Scripts_ja/Utils/ARFoundationExtention/ARSessionStartHelper.html",
    "title": "ARSessionStartHelper | Project Starter Package Doc",
    "keywords": "ARSessionStartHelper ARSession コンポーネントのヘルパークラスです。端末内の AR システムのインストール確認と AR セッション開始を自動管理します。 Important 利用の際はソースコード内の #define 定義を有効にしてください。 namespace GarageKit.ARFoundationExtention [RequireComponent(typeof(ARSession))] public class ARSessionStartHelper : MonoBehaviour Inheritance ARSessionStartHelper -> MonoBehaviour Inspector Properties member type description arSession ARSession ARSession の参照 Methods AR 機能の初期化失敗時コールバック public Action OnFailARSession AR ライブラリのインストールリクエスト時コールバック(ARCore) public Action OnRequestARLibInstall AR 機能の初期化完了コールバック public Action OnReadyAR"
  },
  "Scripts_ja/Utils/ARFoundationExtention/ARTrackedImageMarkerManager.html": {
    "href": "Scripts_ja/Utils/ARFoundationExtention/ARTrackedImageMarkerManager.html",
    "title": "ARTrackedImageMarkerManager | Project Starter Package Doc",
    "keywords": "ARTrackedImageMarkerManager AR イメージマーカーのトラッキング機能を管理します。マーカー認識開始時のオブジェクト生成機能や、認識開始時と認識終了時のイベントを利用できます。 Important 利用の際はソースコード内の #define 定義を有効にしてください。 namespace GarageKit.ARFoundationExtention [DisallowMultipleComponent] [RequireComponent(typeof(ARTrackedImageManager))] public class ARTrackedImageMarkerManager : MonoBehaviour Inheritance ARTrackedImageMarkerManager -> MonoBehaviour Inspector Properties member type description trackedImageMarkerDatas List<ARTrackedImageMarkerData> 生成するイメージマーカー プレハブデータリスト destroyOnInvisible bool 画面外判定で自動 Destroy を行う numberOfTrackingImage int 同時トラッキング可能な最大イメージ数 Methods トラッキング中のイメージテーブル public Dictionary<string, ARTrackedImage> TrackedImages { get; } イメージマーカー認識開始時コールバック public Action<ARTrackedImage> OnAddedImageMarker イメージマーカー認識終了時コールバック public Action<ARTrackedImage> OnRemoveImageMarker トラッキング中マーカーからイメージマーカー名での削除 public void RemoveImageMarkerByImageName(string imageName) 全トラッキング中マーカーのリセット public void ResetImageMarkers() ARTrackedImageMarkerData イメージマーカーに対応する生成プレハブデータの構造体 namespace GarageKit.ARFoundationExtention [Serializable] public class ARTrackedImageMarkerData Properties member type description imageName string イメージマーカー名 imageMarkerPrefab GameObject 生成するプレハブの参照"
  },
  "Scripts_ja/Utils/AndroidRuntimePermission.html": {
    "href": "Scripts_ja/Utils/AndroidRuntimePermission.html",
    "title": "AndroidRuntimePermission | Project Starter Package Doc",
    "keywords": "AndroidRuntimePermission Android 実行時のランタイムパーミッション要求手続きを自動化します。また、関連するユーティリティ関数を提供します。 namespace GarageKit public class AndroidRuntimePermission : ManagerBase Inheritance AndroidRuntimePermission -> MonoBehaviour Inspector Properties member type description permissions string[] Android パーミッション文字列リスト Methods 成功時コールバック public Action OnVerifiedPermission 失敗時コールバック public Action OnFailurePermission Static Methods 現在のアクティビティの取得 public static AndroidJavaObject GetActivity() OS バージョンが Android M(Android 6.0 APIレベル23) 以降の確認 public static bool IsAndroidMOrGreater() パーミッション保持の確認 public static bool HasPermission(string permission) 以前にパーミッションを許可しなかった場合に「今後表示しない」を選んでいないか（ダイアログを表示するか） public static bool ShouldShowRequestPermissionRationale(string permission) パーミッション許可のリクエストでダイアログを表示 public static void RequestPermission(string[] permissions)"
  },
  "Scripts_ja/Utils/AndroidUtil.html": {
    "href": "Scripts_ja/Utils/AndroidUtil.html",
    "title": "AndroidUtil | Project Starter Package Doc",
    "keywords": "AndroidUtil Android 用のユーティリティ関数を提供します。 namespace GarageKit public class AndroidUtil Static Methods デバイスの内部データ領域へのパスを取得 public static string FileDir() デバイスの内部キャッシュ領域へのパスを取得 public static string CacheDir() デバイスの外部データ領域へのパスを取得 public static string ExternalFilesDir() デバイスの外部キャッシュ領域へのパスを取得 public static string ExternalCacheDir() デバイスの外部ストレージ領域へのパスを取得 public static string ExternalStorageDir() デバイスの外部ストレージ共有領域へのパスを取得 public static string ExternalStoragePublicDir() デバイスのダウンロードフォルダへのパスを取得 public static string DownloadDir() 指定したアクティビティを開く public static void OpenActivity(string packageName, string className, bool asNewTask) システムへブロードキャストメッセージの送信 public static void SendBroadcast(string action) APIレベルの取得 public static int GetApiLevel() Android 11 以上でファイルアクセスパーミッションのリクエスト public static void RequestAllFilesAccessPermission()"
  },
  "Scripts_ja/Utils/AnimationCurveUtil.html": {
    "href": "Scripts_ja/Utils/AnimationCurveUtil.html",
    "title": "AnimationCurveUtil | Project Starter Package Doc",
    "keywords": "AnimationCurveUtil アニメーションカーブ設定関連のユーティリティ関数を提供します。 reference: UnityEditor.CurveUtility.cs (c) Unity Technologies namespace GarageKit public class AnimationCurveUtil Static Methods アニメーションカーブの補完をリニアに設定する public static void UpdateAllLinearTangents(AnimationCurve curve) アニメーションカーブ指定キーフレームのタンジェントモード更新 public static void UpdateTangentsFromMode(AnimationCurve curve, int index) キーフレームの新規生成と取得 public static Keyframe GetNewKey(float time, float value, TangentMode leftAndRight) public static Keyframe GetNewKey(float time, float value, TangentMode left, TangentMode right) キーフレームのタンジェントモード取得 public static TangentMode GetKeyTangentMode(int tangentMode, int leftRight) public static TangentMode GetKeyTangentMode(Keyframe keyframe, int leftRight) キーフレームの左右ハンドル連結を外す public static void SetKeyBroken(object keyframe, bool broken) Enums TangentMode enums description Editable エディット Smooth スムーズ Linear リニア Stepped ステップ"
  },
  "Scripts_ja/Utils/AnimationUtil.html": {
    "href": "Scripts_ja/Utils/AnimationUtil.html",
    "title": "AnimationUtil | Project Starter Package Doc",
    "keywords": "AnimationUtil アニメーション関連のユーティリティ関数を提供します。 namespace GarageKit public class AnimationUtil Static Methods Animation コンポーネント現在のクリップを巻き戻しリセットして停止する public static void RewindReset(Animation anim)"
  },
  "Scripts_ja/Utils/Application/ApplicationSetting.html": {
    "href": "Scripts_ja/Utils/Application/ApplicationSetting.html",
    "title": "ApplicationSetting | Project Starter Package Doc",
    "keywords": "ApplicationSetting 外部設定ファイル ApplicationSetting.xml を読み込んでアプリケーションに反映できます。xml は MonoBehaviour の Awake() で読み込まれるため、Start() 以降のタイミングで利用することができます。 namespace GarageKit public class ApplicationSetting : MonoBehaviour Inheritance ApplicationSetting -> MonoBehaviour Inspector Properties member type description loadFrom XML_FROM xml ファイルの読み込み先 xmlFile string xml ファイル名 Enums XML_FROM enums description STREAMING_ASSETS StreasmingAssets フォルダ PROJECT_DIRECTORY プロジェクトフォルダ CURRENT_WORK_DIRECTORY カレントフォルダ Static Methods シングルトンインスタンスの取得 public static ApplicationSetting Instance { get; } Methods xml 生データテーブル public Dictionary<string, string> RawData { get; } データ有効確認 public bool IsValid { get; } xml 読み込み完了コールバック public Action OnLoadXML xml 読み込み public void LoadXML() xml 項目名から string 値の取得 public string GetString(string key, string defaultValue = \"\") xml 項目名から bool 値の取得 public bool GetBool(string key, bool defaultValue = false) xml 項目名から int 値の取得 public int GetInt(string key, int defaultValue = 0) xml 項目名から float 値の取得 public float GetFloat(string key, float defaultValue = 0.0f) xml 項目名から string 配列の取得 public string[] GetStringArray(string key, string separator = \",\") xml 項目名から int 配列の取得 public int[] GetIntArray(string key, string separator = \",\", int defaultValue = 0) xml 項目名から float 配列の取得 public float[] GetFloatArray(string key, string separator = \",\", float defaultValue = 0.0f) xml 項目名から bool 配列の取得 public bool[] GetBoolArray(string key, string separator = \",\", bool defaultValue = false) xml 項目名からフォーマット定義された DateTime 値の取得 public DateTime GetFormattedDateTime(string key, string format = \"HH:mm:ss\") xml 項目名から DateTime 値の取得 public DateTime GetDateTime(string key) xml 項目名から Vector3 値の取得 public Vector3 GetVector3(string key, string separator = \",\", Vector3 defaultValue = default(Vector3)) xml 項目名から Vector2 値の取得 public Vector2 GetVector2(string key, string separator = \",\", Vector2 defaultValue = default(Vector2)) xml 項目名から RGB 0.0-1.0 として Color 値の取得 public Color GetColor(string key, string separator = \",\", Color defaultValue = default(Color)) xml 項目名から RGB 0-255 として Color 値の取得 public Color GetColor255(string key, string separator = \",\", Color defaultValue = default(Color)) Example /Scenes/Examples/ApplicationSettingExample.unity bool isDebug = ApplicationSetting.Instance.GetBool(\"IsDebug\"); int gameTime = ApplicationSetting.Instance.GetInt(\"GameTime\"); string text = ApplicationSetting.Instance.GetString(\"Text\"); StreamingAssets/ApplicationSetting.xml <?xml version=\"1.0\" encoding=\"utf-8\"?> <data> <item name=\"IsDebug\" value=\"true\"/> <item name=\"GameTime\" value=\"10\"/> <item name=\"Text\" value=\"this is test.\"/> </data>"
  },
  "Scripts_ja/Utils/Application/ExternalProcess.html": {
    "href": "Scripts_ja/Utils/Application/ExternalProcess.html",
    "title": "ExternalProcess | Project Starter Package Doc",
    "keywords": "ExternalProcess 外部プロセスを起動します。 namespace GarageKit public class ExternalProcess : MonoBehaviour Inheritance ExternalProcess -> MonoBehaviour Inspector Properties member type description exePath string 実行ファイルのパス pathFromStreamingAssets bool StreamingAssets からの読み込みフラグ arguments string 実行時パラメータ引数 startupOnStart bool Start() での自動実行フラグ showWindow bool プロセス実行時のウィンドウ表示 Methods 内部プロセス ID の取得 public int ProcId { get; } プロセスの実行状態 public bool IsRunning { get; } プロセスを開始 public void StartProcess()"
  },
  "Scripts_ja/Utils/Application/RemotePrefs.html": {
    "href": "Scripts_ja/Utils/Application/RemotePrefs.html",
    "title": "RemotePrefs | Project Starter Package Doc",
    "keywords": "RemotePrefs UDP 通信を利用して PlayerPrefs へのデータ読み書きを行います。 namespace GarageKit [RequireComponent(typeof(UDPReceiver))] public class RemotePrefs : MonoBehaviour Inheritance ExternalProcess -> MonoBehaviour Methods 情報更新時直前コールバック public Action<RemotePrefsData> WillUpdatedPrefs 情報更新時コールバック public Action<RemotePrefsData> OnUpdatedPrefs Example 受信する Json のサンプル { \"command\": \"set\", // \"set\" or \"delete\" or \"delete_all\" \"key\": \"prefs_key\", \"value_type\": \"int\", // \"int\" or \"float\" or \"string\" \"int_value\": 123 } RemotePrefsData 保存情報の構造体 Properties member type description command string 実行コマンド: \"set\" or \"delete\" or \"delete_all\" key string 保存情報 キー value_type string 保存情報 型: \"int\" or \"float\" or \"string\" int_value int 保存情報 値: int float_value float 保存情報 値: float string_value string 保存情報 値: string"
  },
  "Scripts_ja/Utils/Application/SetAntiAliasing.html": {
    "href": "Scripts_ja/Utils/Application/SetAntiAliasing.html",
    "title": "SetAntiAliasing | Project Starter Package Doc",
    "keywords": "SetAntiAliasing アンチエイリアス設定をインスペクタから行います。 namespace GarageKit public class SetAntiAliasing : MonoBehaviour Inheritance SetAntiAliasing -> MonoBehaviour Inspector Properties member type description AA_2x int サンプリング設定"
  },
  "Scripts_ja/Utils/Application/SetAppResolution.html": {
    "href": "Scripts_ja/Utils/Application/SetAppResolution.html",
    "title": "SetAppResolution | Project Starter Package Doc",
    "keywords": "SetAppResolution 解像度設定をインスペクタから行います。 namespace GarageKit public class SetAppResolution : MonoBehaviour Inheritance SetAppResolution -> MonoBehaviour Inspector Properties member type description resolutionType APP_RESOLUTION 解像度タイプ設定 fullScreen bool フルスクリーン設定 resolutionID int ディスプレイ対応解像度指定時の ID customWindowRect Vector4 カスタムタイプ時のウィンドウ位置解像度 useFixAspect bool アスペクト比固定設定 aspectRatio float アスペクト比 Enums APP_RESOLUTION enums description PLAYER_SETTINGS_RESOLUTIOM プレイヤー設定で行う CURRENT_FULLSCREEN 現在のフルスクリーン DISPLAY_SUPPORTED ディスプレイ対応解像度指定 CUSTOM_RESOLUTION 解像度指定 CUSTOM_RESOLUTION_POPUPWINDOW ポップアップウィンドウでの解像度指定"
  },
  "Scripts_ja/Utils/Application/StandalonePlayerResolutionHelper.html": {
    "href": "Scripts_ja/Utils/Application/StandalonePlayerResolutionHelper.html",
    "title": "StandalonePlayerResolutionHelper | Project Starter Package Doc",
    "keywords": "StandalonePlayerResolutionHelper Windows の StandalonePlayer 実行時に、レジストリに自動保存される解像度設定を削除して、次回起動時に間違った解像度で実行される問題を回避します。 Important Windows 以外では利用しません。 Important 利用する場合は PlayerSettings の ApiCompatibilityLevel を .NET Framework に変更します。 namespace GarageKit [ExecuteInEditMode] public class StandalonePlayerResolutionHelper : MonoBehaviour Inheritance StandalonePlayerResolutionHelper -> MonoBehaviour Inspector Properties member type description playerSettingsCompanyName string プレイヤー設定の CompanyName playerSettingsProductName string プレイヤー設定の ProductName Important OnApplicationQuit() で実行されるため、プロセス Kill や Shutdown コマンドなど、正常終了以外ではレジストリから削除されません。"
  },
  "Scripts_ja/Utils/AsyncUtil.html": {
    "href": "Scripts_ja/Utils/AsyncUtil.html",
    "title": "AsyncUtil | Project Starter Package Doc",
    "keywords": "AsyncUtil Async 関連のユーティリティ関数を提供します。 namespace GarageKit public class AsyncUtil Static Methods Texture2D 非同期読み込み public static async UniTask<Texture2D> LoadTextureAsync(string path, CancellationToken ct = default) Texture2D 複数同時の非同期読み込み public static async UniTask<Texture2D[]> LoadTextureAllAsync(string[] paths, CancellationToken ct = default)"
  },
  "Scripts_ja/Utils/CSV/CsvReader.html": {
    "href": "Scripts_ja/Utils/CSV/CsvReader.html",
    "title": "CsvReader | Project Starter Package Doc",
    "keywords": "CsvReader CSV ファイルの読み込み用クラス namespace GarageKit.CSV public class CsvReader Inheritance CsvReader Static Methods 2 次元配列のデバッグ用出力 static public void DebugLogGrid(string[,] grid) Methods データ読み込み確認 public bool IsVaild { get； } 2 次元配列の取得 public string[,] CsvGrid { get; } CSV ファイルの読み込み public void Read(string file)"
  },
  "Scripts_ja/Utils/CSV/CsvWriter.html": {
    "href": "Scripts_ja/Utils/CSV/CsvWriter.html",
    "title": "CsvWriter | Project Starter Package Doc",
    "keywords": "CsvWriter CSV ファイルの書き込み用クラス namespace GarageKit.CSV public class CsvWriter Inheritance CsvWriter Methods CSV 書き込み public string Write(string file, ICsvWritable data) public string Write(string file, List<ICsvWritable> datas)"
  },
  "Scripts_ja/Utils/CSV/Interfece/ICsvWritable.html": {
    "href": "Scripts_ja/Utils/CSV/Interfece/ICsvWritable.html",
    "title": "ICsvWritable | Project Starter Package Doc",
    "keywords": "ICsvWritable CSV 書き込みに対応するためのデータクラスインターフェース namespace GarageKit.CSV public interface ICsvWritable Methods ヘッダー行文字列の取得 string GetCsvHeader() 行文字列の取得 string ToCsvRowString()"
  },
  "Scripts_ja/Utils/CameraControl/CameraShifter.html": {
    "href": "Scripts_ja/Utils/CameraControl/CameraShifter.html",
    "title": "CameraShifter | Project Starter Package Doc",
    "keywords": "CameraShifter カメラシフトを行います。projectionMatrix が内部で上書きされるのでカメラ FOV 設定は無効になります。 namespace GarageKit public class CameraShifter Inheritance CameraShifter -> MonoBehaviour Inspector Properties member type description shiftX float 横方向シフトの割合 shiftY float 縦方向シフトの割合 calcAlways bool Update 更新設定 Methods 初期状態へリセット public void ResetProjMat()"
  },
  "Scripts_ja/Utils/CameraControl/FlyThroughCamera.html": {
    "href": "Scripts_ja/Utils/CameraControl/FlyThroughCamera.html",
    "title": "FlyThroughCamera | Project Starter Package Doc",
    "keywords": "FlyThroughCamera ドラッグによるカメラのフライスルー操作を行います。マウス & タッチ対応。 Important TouchScript パッケージを利用の場合はソースコード内の #define 定義を有効にしてください。 namespace GarageKit [RequireComponent(typeof(Camera))] public class FlyThroughCamera Inheritance FlyThroughCamera -> MonoBehaviour Inspector Properties member type description groundCollider Collider 地面判定用のコライダー limitAreaCollider Collider 移動制限用のコライダー useLimitArea bool 移動制限設定 moveBias float 移動量 moveSmoothTime float 移動スムーズ量 dragInvertX bool 横ドラッグ方向反転設定 dragInvertY bool 縦ドラッグ方向反転設定 rotateBias float 方向回転量 rotateSmoothTime float 方向回転スムーズ量 rotateInvert bool 方向回転反転設定 combinationOrbitCamera OrbitCamera 組み合わせ操作の対象コンポーネント Enums FLYTHROUGH_CONTROLL_TYPE enums description DRAG ドラッグで移動 DRAG_HOLD ドラッグ後ホールドで移動 FLYTHROUGH_MOVE_TYPE enums description XZ XZ 平面操作 XY XY 平面操作 Methods 階層ルートの取得 public GameObject FlyThroughRoot { get; } 位置シフト用ルートの取得 public Transform ShiftTransform { get; } 現在の位置情報取得 public Vector3 currentPos { get; } 現在の回転情報取得 public Quaternion currentRot { get; } 入力ロックの確認 public bool IsInputLock { get; } 入力のロック public void LockInput(object sender) 入力のロック解除 public void UnlockInput(object sender) 目標位置にカメラをフライスルー移動させる public void MoveToFlyThrough(Vector3 targetPosition, float time = 1.0f) 指定量でカメラを即時移動させる public void TranslateToFlyThrough(Vector3 move) 目標方向にカメラをフライスルー回転させる public void RotateToFlyThrough(float targetAngle, float time = 1.0f) 指定量でカメラをフライスルー移動させる public void PushMove(Vector3 move) 指定量でカメラをフライスルー回転させる public void PushRotate(float rotate) カメラの位置と回転をリセット public void ResetFlyThrough() Example /Scenes/Examples/CameraControllExample.unity"
  },
  "Scripts_ja/Utils/CameraControl/GrabMove.html": {
    "href": "Scripts_ja/Utils/CameraControl/GrabMove.html",
    "title": "GrabMove | Project Starter Package Doc",
    "keywords": "GrabMove マルチタッチのグラブ操作でオブジェクトを移動させます。マウス & タッチ対応。 Important TouchScript パッケージを利用の場合はソースコード内の #define 定義を有効にしてください。 namespace GarageKit public class GrabMove Inheritance GrabMove -> MonoBehaviour Inspector Properties member type description renderCamera Camera ヒット判定用のカメラ grabTouchNum int マルチタッチ操作時の判定用タッチ本数 moveBias float 移動量 smoothTime float 移動スムーズ量 disableComponents MonoBehaviour[] 組み合わせ操作で OFF にするコンポーネント Methods 入力ロックの確認 public bool IsInputLock { get; } 入力のロック public void LockInput(object sender) 入力のロック解除 public void UnlockInput(object sender) 初期位置にリセット public void ResetGrabMove()"
  },
  "Scripts_ja/Utils/CameraControl/GyroCamera.html": {
    "href": "Scripts_ja/Utils/CameraControl/GyroCamera.html",
    "title": "GyroCamera | Project Starter Package Doc",
    "keywords": "GyroCamera ジャイロでカメラ回転を操作します。 Important GyroDroid パッケージを利用の場合はソースコード内の #define 定義を有効にしてください。 namespace GarageKit public class GyroCamera Inheritance GyroCamera -> MonoBehaviour Inspector Properties member type description northDirection NORTH_DIRECTION 基準方向(北)の設定 Enums NORTH_DIRECTION enums description NONE なし COMPASS_NORTH コンパス機能の北方向 GYRO_HEAD_DIRECTION ジャイロの Z 方向 Methods 準備完了の確認 public bool IsReady { get; } 準備完了時コールバック public Action OnReady 現在の Z を基準方向(北)に設定 public void CalibrateNorth() カメラ FOV の変更 public void SetFov(float fov)"
  },
  "Scripts_ja/Utils/CameraControl/ObjectOrbit.html": {
    "href": "Scripts_ja/Utils/CameraControl/ObjectOrbit.html",
    "title": "ObjectOrbit | Project Starter Package Doc",
    "keywords": "ObjectOrbit ドラッグ操作によりオブジェクトをターゲット中心にオービット回転させます。マウス & タッチ対応。 Important TouchScript パッケージを利用の場合はソースコード内の #define 定義を有効にしてください。 namespace GarageKit public class ObjectOrbit Inheritance ObjectOrbit -> MonoBehaviour Inspector Properties member type description sensitivity float 操作感度 speed float 回転速度 smoothTime float 回転スムーズ量 clampRotationX bool X 回転の制限 clampRotationX_Min float X 回転の制限 最小値 clampRotationX_Max float X 回転の制限 最大値 invertDragX bool 横ドラッグ方向反転設定 invertDragY bool 縦ドラッグ方向反転設定 Methods 入力ロックの確認 public bool IsInputLock { get; } 入力のロック public void LockInput(object sender) 入力のロック解除 public void UnlockInput(object sender) 回転をリセット public void ResetOrbit()"
  },
  "Scripts_ja/Utils/CameraControl/ObjectOrbit2.html": {
    "href": "Scripts_ja/Utils/CameraControl/ObjectOrbit2.html",
    "title": "ObjectOrbit2 | Project Starter Package Doc",
    "keywords": "ObjectOrbit2 ドラッグ操作によりオブジェクトをターゲット中心にオービット回転させます。マウス & タッチ対応。 Important TouchScript パッケージを利用の場合はソースコード内の #define 定義を有効にしてください。 namespace GarageKit public class ObjectOrbit2 Inheritance ObjectOrbit2 -> MonoBehaviour Inspector Properties member type description renderCam Camera Hit 判定用カメラ sensitivity float 操作感度 smoothTime float 回転スムーズ量 invertRot bool 回転方向反転設定 collidRadiusFromBounds bool 判定用コライダーサイズをバウンディングから自動設定 collidRadius float 判定用コライダー半径 Methods 入力ロックの確認 public bool IsInputLock { get; } 入力のロック public void LockInput(object sender) 入力のロック解除 public void UnlockInput(object sender)"
  },
  "Scripts_ja/Utils/CameraControl/OrbitCamera.html": {
    "href": "Scripts_ja/Utils/CameraControl/OrbitCamera.html",
    "title": "OrbitCamera | Project Starter Package Doc",
    "keywords": "OrbitCamera ドラッグ操作によりカメラをターゲット中心にオービット回転させます。マウス & タッチ対応。 Important TouchScript パッケージを利用の場合はソースコード内の #define 定義を有効にしてください。 namespace GarageKit [RequireComponent(typeof(Camera))] public class OrbitCamera Inheritance OrbitCamera -> MonoBehaviour Inspector Properties member type description orbitInputType ORBIT_INPUT_TYPE 操作入力タイプ target GameObject 回転中心ターゲット sensitivity float 操作感度 smoothTime float 回転スムーズ量 clampRotationX_Min float X 回転の制限 最小値 clampRotationX_Max float X 回転の制限 最大値 invertDragX bool 横ドラッグ方向反転設定 invertDragY bool 縦ドラッグ方向反転設定 ratioForMouse float マウス操作時の回転量 combinationFlyThroughCamera FlyThroughCamera 組み合わせ操作の対象コンポーネント Enums ORBIT_INPUT_TYPE enums description PRIMARY プライマリ入力 SECONDARY セカンダリ入力 Methods 階層ルートの取得 public GameObject OrbitRoot { get; } 入力ロックの確認 public bool IsInputLock { get; } 入力のロック public void LockInput(object sender) 入力のロック解除 public void UnlockInput(object sender) 回転をリセット public void ResetOrbit() Example /Scenes/Examples/CameraControllExample.unity"
  },
  "Scripts_ja/Utils/CameraControl/Panorama360Camera.html": {
    "href": "Scripts_ja/Utils/CameraControl/Panorama360Camera.html",
    "title": "Panorama360Camera | Project Starter Package Doc",
    "keywords": "Panorama360Camera パノラマ 360° のカメラ操作を行います。 namespace GarageKit public class Panorama360Camera Inheritance Panorama360Camera -> MonoBehaviour Inspector Properties member type description mode OPERATION_MODE 操作モード rotationSpeed float 回転スピード useLimit bool 回転制限設定 limitRotL float 左回転方向の制限角度 limitRotR float 右回転方向の制限角度 invertRotH bool 横回転方向の反転設定 invertRotV bool 縦回転方向の反転設定 useSmooth bool 回転スムーズ設定 smoothTime float 回転スムーズ量 Enums OPERATION_MODE enums description GYRO ジャイロ操作 DRAG_MOUSE マウス操作 DRAG_TOUCH タッチ操作 GAME_PAD ゲームパッド操作 Methods ジャイロをリセット public void ResetGyro() カメラの回転をリセット public void ResetRotation(bool force = false) カメラの回転値を設定 public void SetRotate(float h, float v, float speed) Example /Scenes/Examples/CameraControllExample.unity"
  },
  "Scripts_ja/Utils/CameraControl/PinchZoomCamera.html": {
    "href": "Scripts_ja/Utils/CameraControl/PinchZoomCamera.html",
    "title": "PinchZoomCamera | Project Starter Package Doc",
    "keywords": "PinchZoomCamera マルチタッチのピンチ操作でのカメラズームを行います。マウス & タッチ対応。 Important TouchScript パッケージを利用の場合はソースコード内の #define 定義を有効にしてください。 namespace GarageKit [RequireComponent(typeof(Camera))] public class PinchZoomCamera Inheritance PinchZoomCamera -> MonoBehaviour Inspector Properties member type description zoomType PINCH_ZOOM_TYPE ズーム処理タイプ zoomBias float ズーム量 zoomSmoothTime float ズームスムーズ量 invertZoom bool ズーム方向反転設定 limitMinMaxForRelativePosZ LimitValue Z 位置の相対値制限 limitMinMaxForFOV LimitValue FOV 値制限 limitMinMaxForOrthoSize LimitValue オルソカメラのサイズ値制限 disableComponents MonoBehaviour[] 組み合わせ操作で OFF にするコンポーネント zoomToPinchCenterFor2D bool 2D ズーム時の中心をピンチ座標センターにする ratioForWheel float マウスホイールでのズーム量 Enums PINCH_ZOOM_TYPE enums description POSITION_Z Z 位置でのズーム FOV FOV 値でのズーム ORTHOSIZE オルソカメラのサイズ値でのズーム Methods 現在のズーム値 public float currentZoom { get; } 入力ロックの確認 public bool IsInputLock { get; } 入力のロック public void LockInput(object sender) 入力のロック解除 public void UnlockInput(object sender) 指定量でズームさせる public void PushZoom(float zoomDelta) 目標値でズームさせる public void SetToPinchZoom(float zoom, float time = 1.0f) ズームをリセット public void ResetPinchZoom() Example /Scenes/Examples/CameraControllExample.unity LimitValue 最小最大制限値の構造体 namespace GarageKit [Serializable] public class LimitValue Properties member type description min float 最小値 max float 最大値"
  },
  "Scripts_ja/Utils/CameraControl/UrbanViewerLikeCamera.html": {
    "href": "Scripts_ja/Utils/CameraControl/UrbanViewerLikeCamera.html",
    "title": "UrbanViewerLikeCamera | Project Starter Package Doc",
    "keywords": "UrbanViewerLikeCamera マウス、タッチ、ゲームパッドを利用してカメラの前後上下左右の移動操作、左右の旋回操作を行います。 Important TouchScript パッケージを利用の場合はソースコード内の #define 定義を有効にしてください。 namespace GarageKit public class UrbanViewerLikeCamera Inheritance UrbanViewerLikeCamera -> MonoBehaviour Inspector Properties member type description childCamera Camera コントロール対象の子階層カメラ moveSpeed float 移動速度 rotateSpeed float 回転速度 updateEnable bool 値更新設定 primaryDragType DragType プライマリ入力(左ドラッグ / 1本指操作)の操作対象 secondaryDragType DragType セカンダリ入力(右ドラッグ / 2本指操作)の操作対象 tertiaryDragType DragType ターシャリ入力(中ドラッグ / 3本指操作)の操作対象 camMoveSpeedForPad float ゲームパッド操作時の移動速度 camRotSpeedForPad float ゲームパッド操作時の回転速度 invertCamRotXForPad bool ゲームパッド操作時の X 回転方向反転設定 invertCamRotYForPad bool ゲームパッド操作時の Y 回転方向反転設定 padType PadType ゲームパッドタイプ設定 Enums DragType enums description NO_USE 利用しない MOVE 前後移動 PAN 左右旋回 SHIFT 上下左右移動 PadType enums description DEFAULT 標準コントローラー XBOXONE XboxOne コントローラー Example /Scenes/Examples/CameraControllExample.unity"
  },
  "Scripts_ja/Utils/CameraUtil.html": {
    "href": "Scripts_ja/Utils/CameraUtil.html",
    "title": "CameraUtil | Project Starter Package Doc",
    "keywords": "CameraUtil カメラ関連のユーティリティ関数を提供します。 namespace GarageKit public class CameraUtil Static Methods レイヤーからカメラを取得 public static Camera FindCameraForLayer(int layer) デプスによる全カメラリストを取得 public static List<Camera> GetCameraListByDepth() スクリーン座標をカメラ座標で正規化(-1.0～1.0) public static Vector3 NormalizeScreenPosition(Camera orthoCamera, Vector3 screenPosition) Viewport で画面をはみ出した場合の座標を修正する public static Vector3 ViewportProtrusion(Vector3 viewportPosition, Vector2 ratio)"
  },
  "Scripts_ja/Utils/CaptureUtil.html": {
    "href": "Scripts_ja/Utils/CaptureUtil.html",
    "title": "CaptureUtil | Project Starter Package Doc",
    "keywords": "CaptureUtil キャプチャ関連のユーティリティ関数を提供します。 namespace GarageKit public class CaptureUtil Static Methods 範囲指定をして画面をキャプチャ保存 public static IEnumerator CaptureRect(string fileName, bool withTimestamp) public static IEnumerator CaptureRect(string dirPath, string fileName, Rect range, bool withTimestamp)"
  },
  "Scripts_ja/Utils/CommonUtil.html": {
    "href": "Scripts_ja/Utils/CommonUtil.html",
    "title": "CommonUtil | Project Starter Package Doc",
    "keywords": "CommonUtil ユーティリティ関数を提供します。 namespace GarageKit public class CommonUtil Static Methods ファイルブラウザで指定フォルダを開く public static void OpenFolder(string path)"
  },
  "Scripts_ja/Utils/DataLoader/ContentsDownLoader.html": {
    "href": "Scripts_ja/Utils/DataLoader/ContentsDownLoader.html",
    "title": "ContentsDownLoader | Project Starter Package Doc",
    "keywords": "ContentsDownLoader 外部データをダウンロードしてローカル保存する管理機能を提供します。 namespace GarageKit public class ContentsDownLoader : MonoBehaviour Inheritance ContentsDownLoader -> MonoBehaviour Static Methods ダウンロードした外部データの保存先を取得 public static string ContentsDataPath { get; } Methods ダウンロード完了イベント public event OnLoadCompleteDelegate OnLoadComplete ダウンロードエラーイベント public event OnLoadErrorDelegate OnLoadError 最新のローカル保存先パスの取得 public string LatestContentsPath { get; } ダウンロード中の確認 public bool IsLoading { get; }"
  },
  "Scripts_ja/Utils/DataLoader/ImageLoader.html": {
    "href": "Scripts_ja/Utils/DataLoader/ImageLoader.html",
    "title": "ImageLoader | Project Starter Package Doc",
    "keywords": "ImageLoader 指定したフォルダ内の画像を一括読み込みします。 namespace GarageKit public class ImageLoader : MonoBehaviour Inheritance ImageLoader -> MonoBehaviour Inspector Properties member type description folderPath string 読み込み対象のフォルダ absolute bool 絶対パス設定 autoLoad bool 自動読み込み開始設定 Methods 読み込み済み画像リスト public Dictionary<string, Texture2D> Images { get; } 読み込み完了イベント public event OnLoadCompleteDelegate OnLoadComplete 読み込み開始 public void Load(string folderPath)"
  },
  "Scripts_ja/Utils/Debug/CameraGizmoDrawer.html": {
    "href": "Scripts_ja/Utils/Debug/CameraGizmoDrawer.html",
    "title": "CameraGizmoDrawer | Project Starter Package Doc",
    "keywords": "CameraGizmoDrawer カメラオブジェクト非選択時にも SceneView に視錐台ギズモを表示します。 namespace GarageKit [ExecuteInEditMode] [RequireComponent(typeof(Camera))] public class CameraGizmoDrawer : MonoBehaviour Inheritance CameraGizmoDrawer -> MonoBehaviour Inspector Properties member type description gizmosColor Color ギズモ表示カラー"
  },
  "Scripts_ja/Utils/Debug/FpsCounter.html": {
    "href": "Scripts_ja/Utils/Debug/FpsCounter.html",
    "title": "FpsCounter | Project Starter Package Doc",
    "keywords": "FpsCounter uGUI による簡易的な FPS 表示を行います。(Graphy の利用をお勧めします) namespace GarageKit public class FpsCounter : MonoBehaviour Inheritance FpsCounter -> MonoBehaviour Inspector Properties member type description displayFPS bool 表示設定 text Text Text コンポーネントの参照 targetFPS int ターゲット FPS goodColor Color Good 時カラー warnColor Color Warn 時カラー badColor Color Bad 時カラー"
  },
  "Scripts_ja/Utils/Debug/FrameRateUtil.html": {
    "href": "Scripts_ja/Utils/Debug/FrameRateUtil.html",
    "title": "FrameRateUtil | Project Starter Package Doc",
    "keywords": "FrameRateUtil MonoBehaviour.OnGUI() による簡易的な FPS 表示を行います。(Graphy の利用をお勧めします) namespace GarageKit public class FrameRateUtil : MonoBehaviour Inheritance FrameRateUtil -> MonoBehaviour Properties member type description useHUD bool 表示設定 Static Methods 現在の FPS 値の取得 public static float Fps { get; }"
  },
  "Scripts_ja/Utils/Debug/GizmoDrawer.html": {
    "href": "Scripts_ja/Utils/Debug/GizmoDrawer.html",
    "title": "GizmoDrawer | Project Starter Package Doc",
    "keywords": "GizmoDrawer オブジェクト非選択時にも SceneView にギズモを表示します。 namespace GarageKit public class GizmoDrawer : MonoBehaviour Inheritance GizmoDrawer -> MonoBehaviour Inspector Properties member type description gizmoType GIZMO_TYPE ギズモ表示タイプ color Color ギズモ表示カラー gizmoSize Vector3 ギズモ表示サイズ（SPHERE の場合は X のみ有効） centerToCornerX bool X 軸位置をコーナーとする centerToCornerY bool Y 軸位置をコーナーとする centerToCornerZ bool Z 軸位置をコーナーとする invertCornerX bool X 軸位置を逆コーナーとする invertCornerY bool Y 軸位置を逆コーナーとする invertCornerZ bool Z 軸位置を逆コーナーとする Enums GIZMO_TYPE enums description CUBE 立方体 SPHERE 球"
  },
  "Scripts_ja/Utils/Debug/LookAtGizmoDrawer.html": {
    "href": "Scripts_ja/Utils/Debug/LookAtGizmoDrawer.html",
    "title": "LookAtGizmoDrawer | Project Starter Package Doc",
    "keywords": "LookAtGizmoDrawer SceneView に指定ターゲットまでのラインギズモを表示します。 namespace GarageKit public class LookAtGizmoDrawer : MonoBehaviour Inheritance LookAtGizmoDrawer -> MonoBehaviour Inspector Properties member type description color Color ギズモ表示カラー target GameObject ライン終点のターゲット worldUp Vector3 上方向ベクトル"
  },
  "Scripts_ja/Utils/Debug/MemoryProfiler.html": {
    "href": "Scripts_ja/Utils/Debug/MemoryProfiler.html",
    "title": "MemoryProfiler | Project Starter Package Doc",
    "keywords": "MemoryProfiler MonoBehaviour.OnGUI() による簡易的な使用メモリ量表示を行います。(Graphy の利用をお勧めします) namespace GarageKit public class MemoryProfiler : MonoBehaviour Inheritance MemoryProfiler -> MonoBehaviour Properties member type description useHUD bool 表示設定"
  },
  "Scripts_ja/Utils/Debug/VisibleMouseCursor.html": {
    "href": "Scripts_ja/Utils/Debug/VisibleMouseCursor.html",
    "title": "VisibleMouseCursor | Project Starter Package Doc",
    "keywords": "VisibleMouseCursor マウスカーソルの表示 / 非表示を管理します。 namespace GarageKit public class VisibleMouseCursor : MonoBehaviour Inheritance VisibleMouseCursor -> MonoBehaviour Properties member type description showCursor bool 表示設定"
  },
  "Scripts_ja/Utils/Envelope/C4DAnimDataApply.html": {
    "href": "Scripts_ja/Utils/Envelope/C4DAnimDataApply.html",
    "title": "C4DAnimDataApply | Project Starter Package Doc",
    "keywords": "C4DAnimDataApply Cinema4D から書き出されたアニメーションキーフレームデータ（.json）をアニメーションカーブに変換します。 namespace GarageKit public class C4DAnimDataApply : MonoBehaviour Inheritance C4DAnimDataApply -> MonoBehaviour Inspector Properties member type description filePath string 読み込み json ファイルパス animTracks C4DAnimationTrack[] Cinema4D アニメーショントラックリスト Methods 変換アニメーションデータテーブルの取得 public Dictionary<string, List<float>> Data { get; } アニメーションカーブの取得 public AnimationCurve GetCurve(C4DAnimationTrack.TRACK_TYPE type) アニメーションフレーム数の取得 public int GetTotalFrame() C4DAnimationTrack Cinema4D アニメーショントラックデータの構造体 namespace GarageKit [Serializable] public class C4DAnimationTrack Properties member type description type TRACK_TYPE アニメーショントラックタイプ curve AnimationCurve 読み込みデータから変換生成されるアニメーションカーブ Enums TRACK_TYPE enums description POS_X X 位置トラック POS_Y Y 位置トラック POS_Z Z 位置トラック ROT_X X 回転トラック ROT_Y Y 回転トラック ROT_Z Z 回転トラック Methods トラック名の取得 public string GetTrackName()"
  },
  "Scripts_ja/Utils/Envelope/Envelope.html": {
    "href": "Scripts_ja/Utils/Envelope/Envelope.html",
    "title": "Envelope | Project Starter Package Doc",
    "keywords": "Envelope キーフレームデータリストから実行時動的にアニメーションカーブを作成します。 namespace GarageKit public class Envelope : MonoBehaviour Inheritance Envelope -> MonoBehaviour Inspector Properties member type description propertyName string 識別用プロパティ名 preWrapMode WrapMode 前方向のラップモード postWrapMode WrapMode 後方向のラップモード envelopeKeys EnvelopeKey[] キーフレームデータリスト Methods アニメーションカーブの取得 public AnimationCurve GetCurve() EnvelopeKey キーフレームデータの構造体 namespace GarageKit [Serializable] public class EnvelopeKey Properties member type description time float 時間 X value float 値 Y leftTangent AnimationCurveUtil.TangentMode 左ハンドルタンジェント rightTangent AnimationCurveUtil.TangentMode 右ハンドルタンジェント"
  },
  "Scripts_ja/Utils/Event/AnimationEventDelegate.html": {
    "href": "Scripts_ja/Utils/Event/AnimationEventDelegate.html",
    "title": "AnimationEventDelegate | Project Starter Package Doc",
    "keywords": "AnimationEventDelegate アニメーションカーブに再生完了イベントを設定してイベント処理できるようにします。 namespace GarageKit public class AnimationEventDelegate : MonoBehaviour Inheritance AnimationEventDelegate -> MonoBehaviour Methods 再生完了イベント public event OnAnimationEventDelegate OnAnimationEvent"
  },
  "Scripts_ja/Utils/Event/ButtonObjectEvent.html": {
    "href": "Scripts_ja/Utils/Event/ButtonObjectEvent.html",
    "title": "ButtonObjectEvent | Project Starter Package Doc",
    "keywords": "ButtonObjectEvent コライダーが設定されているオブジェクトに対して、クリック操作のボタンイベントを設定できるようにします。uGUI は利用しないので、全ての 3D オブジェクトに対して利用可能できます。マウス & タッチ対応。 Important TouchScript パッケージを利用の場合はソースコード内の #define 定義を有効にしてください。 namespace GarageKit public class ButtonObjectEvent : MonoBehaviour Inheritance ButtonObjectEvent -> MonoBehaviour Inspector Properties member type description inputType INPUT_TYPE 入力タイプ buttonType BUTTON_TYPE ボタン実行タイプ asFirstResponder bool 最前面の場合に実行 asToggle bool トグルボタン設定 PressBtnsTotal int 押されているボタンの総数 Enums INPUT_TYPE enums description MOUSE マウスでの操作 TOUCH タッチでの操作 BUTTON_TYPE enums description CLICK クリック時実行 PRESS プレス時実行 RELEASE リリース時実行 PRESSHOLD プレス保持で実行 Static Methods 全 ButtonObjectEvent コンポーネントの入力タイプを変更 public static void SetAllInputType(INPUT_TYPE type) Methods ボタン有効確認 public bool IsEnableButton { get; } 入力有効確認 public bool InputEnable { get; } トグルボタン状態確認 public bool ToggleState { get; } タッチ入力座標の取得 public Vector3 TouchPosition { get; } ボタン実行時コールバック public Action OnButton トグルボタン実行時コールバック public Action<bool> OnToggleButton ボタンプレス時コールバック public Action OnPressButton ボタンリリース時コールバック public Action OnReleaseButton ボタンのホバー状態開始時コールバック public Action OnHoverInButton ボタンのホバー状態終了時コールバック public Action OnHoverExitButton ボタンの状態をリセット public void ResetButton() ボタン有効化 public void EnableButton() ボタン無効化 public void DisableButton() 入力有効化 public void EnableInput() 入力無効化 public void DisableInput() Example /Scenes/Examples/EventExample.unity"
  },
  "Scripts_ja/Utils/Event/ObservableValue.html": {
    "href": "Scripts_ja/Utils/Event/ObservableValue.html",
    "title": "ObservableValue | Project Starter Package Doc",
    "keywords": "ObservableValue 値を監視して更新変化があった場合にコールバックを実行します。 namespace GarageKit public class ObservableValue<T> Inheritance ObservableValue<T> Methods 値の取得更新 public T Value { get; set; } 値に更新変化があった場合にコールバック public Action<T> OnValueChange"
  },
  "Scripts_ja/Utils/Event/OnCollisionHandler.html": {
    "href": "Scripts_ja/Utils/Event/OnCollisionHandler.html",
    "title": "OnCollisionHandler | Project Starter Package Doc",
    "keywords": "OnCollisionHandler MonoBehaviour の OnCollision 系関数と OnTrigger 系関数をコールバック化して実行します。 namespace GarageKit [RequireComponent(typeof(Collider))] public class OnCollisionHandler : MonoBehaviour Inheritance OnCollisionHandler -> MonoBehaviour Methods public Action<Collision> OnCollisionEnterAction public Action<Collision> OnCollisionExitAction public Action<Collision> OnCollisionStayAction public Action<Collision> OnTriggerEnterAction public Action<Collision> OnTriggerExitAction public Action<Collision> OnTriggerStayAction"
  },
  "Scripts_ja/Utils/Event/OnRenderHandler.html": {
    "href": "Scripts_ja/Utils/Event/OnRenderHandler.html",
    "title": "OnRenderHandler | Project Starter Package Doc",
    "keywords": "OnRenderHandler MonoBehaviour の OnPreRender() と OnPostRender() 関数をコールバック化して実行します。 namespace GarageKit [RequireComponent(typeof(Camera))] public class OnRenderHandler : MonoBehaviour Inheritance OnRenderHandler -> MonoBehaviour Methods public Action OnPreRenderAction public Action OnPostRenderAction"
  },
  "Scripts_ja/Utils/Event/SevenTapLikeAndroid.html": {
    "href": "Scripts_ja/Utils/Event/SevenTapLikeAndroid.html",
    "title": "SevenTapLikeAndroid | Project Starter Package Doc",
    "keywords": "SevenTapLikeAndroid Android の設定画面隠し操作のように、uGUI のコンポーネント上で 7 回連続タップ操作でコールバックの実行をします。 namespace GarageKit public class SevenTapLikeAndroid : MonoBehaviour, IPointerDownHandler Inheritance SevenTapLikeAndroid -> MonoBehaviour, IPointerDownHandler Methods 7 回連続タップ時のコールバック public Action OnSevenTap Example /Scenes/Examples/EventExample.unity"
  },
  "Scripts_ja/Utils/Event/TimelineEvent/TimelineEventAction.html": {
    "href": "Scripts_ja/Utils/Event/TimelineEvent/TimelineEventAction.html",
    "title": "TimelineEventAction | Project Starter Package Doc",
    "keywords": "TimelineEventAction TimelinedSceneStateBase で利用するタイムラインイベントの登録アクションデータ構造体 namespace GarageKit public class TimelineEventAction Inheritance TimelineEventAction Properties member type description time float 経過時間 Methods 経過時間での登録アクション public Action action; アクション完了確認 public bool IsDone { get； }"
  },
  "Scripts_ja/Utils/Event/TimelineEvent/TimelineEventActionList.html": {
    "href": "Scripts_ja/Utils/Event/TimelineEvent/TimelineEventActionList.html",
    "title": "TimelineEventActionList | Project Starter Package Doc",
    "keywords": "TimelineEventActionList TimelinedSceneStateBase で利用するタイムラインイベントの登録アクションデータリスト構造体 namespace GarageKit public class TimelineEventActionList Inheritance TimelineEventActionList Methods 経過時間で登録アクションを実行 public void Update(float time) 新規アクション登録 public void Add(float time, Action action) 登録アクションリストをクリア public void Clear() Example /Scenes/Examples/EventExample.unity /Scenes/Examples/TimelinedStateExample.unity // TimelinedSceneStateBase.cs this.actionList = new TimelineEventActionList(); this.actionList.Add(0.0f, () => { sceneText.text = \"start\"; }); this.actionList.Add(5.0f, () => { sceneText.text = \"5 sec elapsed\"; }); this.actionList.Add(10.0f, () => { sceneText.text = \"10 sec elapsed\"; }); this.actionList.Add(20.0f, () => { sceneText.text = \"20 sec elapsed\"; }); this.StartTimeline();"
  },
  "Scripts_ja/Utils/Event/TimerEvent.html": {
    "href": "Scripts_ja/Utils/Event/TimerEvent.html",
    "title": "TimerEvent | Project Starter Package Doc",
    "keywords": "TimerEvent カウントダウンのタイマーで時間によるイベントを設定できます。 namespace GarageKit public class TimerEvent : MonoBehaviour Inheritance TimerEvent -> MonoBehaviour Methods タイマー開始済み確認 public bool IsStarted { get; } タイマー実行中確認 public bool IsRunning { get; } タイマー残り時間（秒） public int CurrentTime { get; } タイマー経過時間（秒） public float ElapsedTime { get; } タイマー毎秒経過イベント public event OnTimerDelegate OnTimer タイマー完了イベント public event OnCompleteTimerDelegate OnCompleteTimer タイマーの開始 public void StartTimer(int countTime, float delayTime = 0.0f, bool autoDestroy = false) タイマーの停止 public void StopTimer() タイマーの一時停止 public void ResumeTimer() タイマーのリセット public void ResetTimer(bool andStart) Example /Scenes/Examples/EventExample.unity GameObject obj = new GameObject(\"TimerEventObject\"); obj.AddComponent<TimerEvent>(); obj.GetComponent<TimerEvent>().OnTimer += (sender, sec) => {}; obj.GetComponent<TimerEvent>().OnCompleteTimerEvent += (sender) => {}; obj.GetComponent<TimerEvent>().StartTimer(10); // count down 10 sec"
  },
  "Scripts_ja/Utils/Input/VirtualInput.html": {
    "href": "Scripts_ja/Utils/Input/VirtualInput.html",
    "title": "VirtualInput | Project Starter Package Doc",
    "keywords": "VirtualInput Windows でのキーボード操作やマウス操作をエミュレーションして操作実行します。 namespace GarageKit public class VirtualInput Static Methods キーボード入力 public static void KeyDown(int keyCode) public static void KeyDown(int keyCode1, int keyCode2) public static void KeyDown(int keyCode1, int keyCode2, int keyCode3) マウス移動 public static void MouseMove(int posX, int posY) マウスクリック public static void MouseClick(int posX, int posY) マウスダブルクリック public static void MouseDoubleClick(int posX, int posY) Example // A キー入力 VirtualInput.KeyDown(KeyCode.VK_A); // SHIFT + B キー入力 VirtualInput.KeyDown(KeyCode.VK_L_SHIFT, KeyCode.VK_B); // マウス移動してクリック float x = Screen.Width / 2.0f; float y = Screen.Height / 2.0f; VirtualInput.MouseMove(x, y); VirtualInput.MouseClick(x, y); KeyCode キーコード情報の構造体 Properties http://msdn.microsoft.com/ja-jp/library/windows/desktop/dd375731(v=vs.85).aspx public const int VK_L_SHIFT = 0x00A0; public const int VK_R_SHIFT = 0x00A1; public const int VK_L_CONTROL = 0x00A2; public const int VK_R_CONTROL = 0x00A3; public const int VK_BACKSPACE = 0x0008; public const int VK_TAB = 0x0009; public const int VK_RETURN = 0x000D; public const int VK_ALT = 0x0012; public const int VK_ESCAPE = 0x001B; public const int VK_SPACE = 0x0020; public const int VK_LEFT_ARROW = 0x0025; public const int VK_UP_ARROW = 0x0026; public const int VK_RIGHT_ARROW = 0x0027; public const int VK_DOWN_ARROW = 0x0028; public const int VK_DELETE = 0x002E; public const int VK_0 = 0x0030; public const int VK_1 = 0x0031; public const int VK_2 = 0x0032; public const int VK_3 = 0x0033; public const int VK_4 = 0x0034; public const int VK_5 = 0x0035; public const int VK_6 = 0x0036; public const int VK_7 = 0x0037; public const int VK_8 = 0x0038; public const int VK_9 = 0x0039; public const int VK_A = 0x0041; public const int VK_B = 0x0042; public const int VK_C = 0x0043; public const int VK_D = 0x0044; public const int VK_E = 0x0045; public const int VK_F = 0x0046; public const int VK_G = 0x0047; public const int VK_H = 0x0048; public const int VK_I = 0x0049; public const int VK_J = 0x004A; public const int VK_K = 0x004B; public const int VK_L = 0x004C; public const int VK_M = 0x004D; public const int VK_N = 0x004E; public const int VK_O = 0x004F; public const int VK_P = 0x0050; public const int VK_Q = 0x0051; public const int VK_R = 0x0052; public const int VK_S = 0x0053; public const int VK_T = 0x0054; public const int VK_U = 0x0055; public const int VK_V = 0x0056; public const int VK_W = 0x0057; public const int VK_X = 0x0058; public const int VK_Y = 0x0059; public const int VK_Z = 0x005A; public const int VK_NUM_0 = 0x0060; public const int VK_NUM_1 = 0x0061; public const int VK_NUM_2 = 0x0062; public const int VK_NUM_3 = 0x0063; public const int VK_NUM_4 = 0x0064; public const int VK_NUM_5 = 0x0065; public const int VK_NUM_6 = 0x0066; public const int VK_NUM_7 = 0x0067; public const int VK_NUM_8 = 0x0068; public const int VK_NUM_9 = 0x0069; public const int VK_F1 = 0x0070; public const int VK_F2 = 0x0071; public const int VK_F3 = 0x0072; public const int VK_F4 = 0x0073; public const int VK_F5 = 0x0074; public const int VK_F6 = 0x0075; public const int VK_F7 = 0x0076; public const int VK_F8 = 0x0077; public const int VK_F9 = 0x0078; public const int VK_F10 = 0x0079; public const int VK_F11 = 0x007A; public const int VK_F12 = 0x007B; public const int VK_L_WINDOWS = 0x005B; public const int VK_R_WINDOWS = 0x005C;"
  },
  "Scripts_ja/Utils/Input/Win10VirtualKeyboard.html": {
    "href": "Scripts_ja/Utils/Input/Win10VirtualKeyboard.html",
    "title": "Win10VirtualKeyboard | Project Starter Package Doc",
    "keywords": "Win10VirtualKeyboard Windows 10 の OS 標準ソフトウェアキーボードを表示制御します。InputField 上のテキスト入力操作を制御するために Update() での監視を行なっているので、GameObject インスタンスとして利用します。 namespace GarageKit public class Win10VirtualKeyboard : MonoBehaviour Inheritance Win10VirtualKeyboard -> MonoBehaviour Static Methods ソフトウェアキーボード(tabtip.exe)を表示する public static void ShowTouchKeyboard() ソフトウェアキーボード(tabtip.exe)を非表示にする public static void HideTouchKeyboard() ソフトウェアキーボード(OSK)を表示する public static void ShowOnScreenKeyboard() ソフトウェアキーボード(OSK)を非表示にする public static void HideOnScreenKeyboard() ソフトウェアキーボード(OSK)の表示位置を変更 public static void RepositionOnScreenKeyboard(Rect rect)"
  },
  "Scripts_ja/Utils/Localize/Interface/ILocalize.html": {
    "href": "Scripts_ja/Utils/Localize/Interface/ILocalize.html",
    "title": "ILocalize | Project Starter Package Doc",
    "keywords": "ILocalize 多言語切り替えを実装するためのインターフェース namespace GarageKit.Localize public interface ILocalize Methods 多言語切り替え void Localize(LANGUAGE lang)"
  },
  "Scripts_ja/Utils/Localize/Language.html": {
    "href": "Scripts_ja/Utils/Localize/Language.html",
    "title": "LANGUAGE | Project Starter Package Doc",
    "keywords": "LANGUAGE 多言語切り替え時の指定言語。必要に応じて定義を追加します。 namespace GarageKit.Localize public enum LANGUAGE Enums LANGUAGE enums description JP Japanese EN English TC Traditional Chinese SC Simplified Chinese KR Korean"
  },
  "Scripts_ja/Utils/Localize/LocalizeDropdown.html": {
    "href": "Scripts_ja/Utils/Localize/LocalizeDropdown.html",
    "title": "LocalizeDropdown | Project Starter Package Doc",
    "keywords": "LocalizeDropdown 多言語切り替え対応の TMP_Dropdown コンポーネント namespace GarageKit.Localize public class LocalizeDropdown : MonoBehaviour, ILocalize Inheritance LocalizeDropdown -> MonoBehaviour, ILocalize Inspector Properties member type description uiDropdown TMP_Dropdown TMP_Dropdown の参照 localizeFonts List<TMP_FontAsset> 多言語切り替え用フォントリスト localizeDropdownStrings List<LocalizeDropdownStrings> 多言語切り替え用ドロップダウン内テキストリスト Static Methods 全 LocalizeDropdown の多言語切り替え public static void LocalizeAll(LANGUAGE lang) Methods 多言語切り替え public void Localize(LANGUAGE lang) LocalizeDropdownStrings 多言語切り替え用ドロップダウン内テキストリストデータの構造体 namespace GarageKit.Localize [Serializable] public class LocalizeDropdownStrings Properties member type description localizeStrings List 各言語テキスト"
  },
  "Scripts_ja/Utils/Localize/LocalizeDynamicRawImage.html": {
    "href": "Scripts_ja/Utils/Localize/LocalizeDynamicRawImage.html",
    "title": "LocalizeDynamicRawImage | Project Starter Package Doc",
    "keywords": "LocalizeDynamicRawImage 多言語切り替え対応の RawImage コンポーネント namespace GarageKit.Localize public class LocalizeDynamicRawImage : MonoBehaviour, ILocalize Inheritance LocalizeDynamicRawImage -> MonoBehaviour, ILocalize Inspector Properties member type description uiRawImage RawImage RawImage の参照 localizeTexturePaths List 多言語切り替え用画像のパスリスト lang LANGUAGE 選択言語 Static Methods 全 LocalizeDynamicRawImage の非同期多言語切り替え public static async UniTask LocalizeAllAsync(LANGUAGE lang) Methods 非同期多言語切り替え public async UniTask LocalizeAsync(LANGUAGE lang) TryCatch による非同期多言語切り替え public async UniTask TryCatchLocalizeAsync(LANGUAGE lang, Action<Exception> onCatch, Action onFinally = null)"
  },
  "Scripts_ja/Utils/Localize/LocalizeFontScriptable.html": {
    "href": "Scripts_ja/Utils/Localize/LocalizeFontScriptable.html",
    "title": "LocalizeFontScriptable | Project Starter Package Doc",
    "keywords": "LocalizeFontScriptable 多言語切り替え用フォント設定のシリアライズ ScriptableObject namespace GarageKit.Localize [CreateAssetMenu(menuName = \"GarageKit/Localize Font Asset\", fileName = \"LocalizeFontAsset\")] public class LocalizeFontScriptable : ScriptableObject Inheritance LocalizeFontScriptable -> ScriptableObject Inspector Properties member type description localizeFonts List<LocalizeFont> 多言語切り替えフォント設定のリスト LocalizeFont 多言語切り替えフォント設定の構造体 namespace GarageKit.Localize [Serializable] public class LocalizeFont Properties member type description lang LANGUAGE 選択言語 font TMP_FontAsset フォント"
  },
  "Scripts_ja/Utils/Localize/LocalizeImage.html": {
    "href": "Scripts_ja/Utils/Localize/LocalizeImage.html",
    "title": "LocalizeImage | Project Starter Package Doc",
    "keywords": "LocalizeImage 多言語切り替え対応の Image コンポーネント namespace GarageKit.Localize [ExecuteInEditMode] public class LocalizeImage : MonoBehaviour, ILocalize Inheritance LocalizeImage -> MonoBehaviour, ILocalize Inspector Properties member type description uiImage Image Image の参照 localizeSprites List 多言語切り替え用スプライトリスト lang LANGUAGE 選択言語 Static Methods 全 LocalizeImage の多言語切り替え public static void LocalizeAll(LANGUAGE lang) Methods 多言語切り替え public void Localize(LANGUAGE lang)"
  },
  "Scripts_ja/Utils/Localize/LocalizeText.html": {
    "href": "Scripts_ja/Utils/Localize/LocalizeText.html",
    "title": "LocalizeText | Project Starter Package Doc",
    "keywords": "LocalizeText 多言語切り替え対応の TMP_Text コンポーネント namespace GarageKit.Localize [ExecuteInEditMode] public class LocalizeText : MonoBehaviour, ILocalize Inheritance LocalizeText -> MonoBehaviour, ILocalize Inspector Properties member type description uiText TMP_Text TMP_Text の参照 localizeFonts List<TMP_FontAsset> 多言語切り替え用フォントリスト lalocalizeFontScriptableng LocalizeFontScriptable シリアライズされている多言語切り替え用フォント設定 localizeFonts よりも優先 localizeStrings List 多言語切り替え用テキストリスト lang LANGUAGE 選択言語 Static Methods 全 LocalizeText の多言語切り替え public static void LocalizeAll(LANGUAGE lang) Methods 多言語切り替え public void Localize(LANGUAGE lang)"
  },
  "Scripts_ja/Utils/Manager/Base/ManagerBase.html": {
    "href": "Scripts_ja/Utils/Manager/Base/ManagerBase.html",
    "title": "ManagerBase | Project Starter Package Doc",
    "keywords": "ManagerBase マネージャークラスのベースクラス namespace GarageKit public class ManagerBase : MonoBehaviour Inheritance ManagerBase -> MonoBehaviour"
  },
  "Scripts_ja/Utils/MathUtil.html": {
    "href": "Scripts_ja/Utils/MathUtil.html",
    "title": "MathUtil | Project Starter Package Doc",
    "keywords": "MathUtil 数学関連のユーティリティ関数を提供します。 namespace GarageKit public class MathUtil Static Methods ローパスフィルター public static float LowPassFilter(float pre, float current, float weight = 0.05f) KalmanFilter カルマンフィルター https://garchiving.com/gyro-drift-correction/ namespace GarageKit.MathUtil public class KalmanFilter Methods public float GetAngle(float newAngle, float newRate, float dt) public void SetAngle(float angle) public float GetRate() public void SetQangle(float Q_angle) public void SetQbias(float Q_bias) public float GetQangle() public float GetQbias() public float GetRmeasure() public void SetRmeasure(float R_measure)"
  },
  "Scripts_ja/Utils/Network/SerialPortController.html": {
    "href": "Scripts_ja/Utils/Network/SerialPortController.html",
    "title": "SerialPortController | Project Starter Package Doc",
    "keywords": "SerialPortController シリアル通信の送受信を行います。 Important 利用する場合は PlayerSettings の ApiCompatibilityLevel を .NET Framework に変更します。 namespace GarageKit public class SerialPortController : MonoBehaviour Inheritance SerialPortController -> MonoBehaviour Inspector Properties member type description autoOpen bool ポートを自動で開く autoSearchPort bool 利用可能ポートの自動検索 autoSearchInReverse bool 利用可能ポートの自動逆方向検索 portName List ポート名 シリアル接続パラメータ member type description baudRate int BaudRate parity Parity Parity dataBits int DataBits stopBits StopBits StopBits encoding Encoding テキストエンコード newLineCode NewLineCode 改行コード handShake Handshake Handshake dtrEnable bool DtrEnable rtsEnable bool RtsEnable readTimeout int ReadTimeout writeTimeout int WriteTimeout Enums NewLineCode enums description LF \\n CR \\r CRLF \\r\\n Methods データ受信コールバック public Action<string> OnReceive 最新の受信文字列 public string ReceivedDataStr { get; } ポート状態確認 public bool IsOpen { get;} ポートを検索して開く public bool TryRecursiveOpen() ポートを開く public void Open() ポートを閉じる public void Close() 文字列を送信 public void SendCommand(string str) 文字列を非同期送信 public async UniTask SendCommandAsync(string str) 文字列をバイトデータに変換して送信 public void SendCommandByte(string str) 文字列をバイトデータに変換して非同期送信 public async UniTask SendCommandByteAsync(string str) スペース区切りの数字のコマンド配列を16進数に変換して送信 public void SendCommandArrayHexByte(string str) スペース区切りの数字のコマンド配列を16進数に変換して非同期送信 public async UniTask SendCommandArrayHexByteAsync(string str) バイトデータを送信 public void SendByte(byte[] strBytes) バイトデータを非同期送信 public async UniTask SendByteAsync(byte[] strBytes)"
  },
  "Scripts_ja/Utils/Network/TinyHttpServer.html": {
    "href": "Scripts_ja/Utils/Network/TinyHttpServer.html",
    "title": "TinyHttpServer | Project Starter Package Doc",
    "keywords": "TinyHttpServer Unity 内に簡易 Web サーバーを実行します。 namespace GarageKit public class TinyHttpServer : MonoBehaviour Inheritance TinyHttpServer -> MonoBehaviour Inspector Properties member type description listenOnStart bool Start() で開始 port int ポート番号 Methods レスポンスコールバック public HttpResponce OnHttpRequest Web サーバーを開始 public void StartServer() Web サーバーを停止 public void StopServer()"
  },
  "Scripts_ja/Utils/Network/UDPReceiver.html": {
    "href": "Scripts_ja/Utils/Network/UDPReceiver.html",
    "title": "UDPReceiver | Project Starter Package Doc",
    "keywords": "UDPReceiver UDP 通信の受信をします。 namespace GarageKit public class UDPReceiver : MonoBehaviour Inheritance UDPReceiver -> MonoBehaviour Inspector Properties member type description port int 受信ポート番号 autoStart bool 自動で受信開始 Methods 最新の受信文字列 public string LatestReceivedDataStr { get; } 最新の受信バイトデータ public byte[] LatestReceivedDataBytes { get; } 文字列での受信コールバック public Action<string> OnReceived バイトデータでの受信コールバック public Action<byte[]> OnReceivedBytes ポートを開く public void Open() ポートを閉じる public void Close()"
  },
  "Scripts_ja/Utils/Network/UDPSender.html": {
    "href": "Scripts_ja/Utils/Network/UDPSender.html",
    "title": "UDPSender | Project Starter Package Doc",
    "keywords": "UDPSender UDP 通信の送信をします。 namespace GarageKit public class UDPSender : MonoBehaviour Inheritance UDPSender -> MonoBehaviour Inspector Properties member type description address string 送信先アドレス port int 送信先ポート番号 Methods 文字列の送信 public void Send(string dataStr, string address = null, int? port = null) バイトデータの送信 public void Send(byte[] data, string address = null, int? port = null) 文字列の複数回送信 public void TryContinuousSend(string dataStr, int tryCount, float span = 0.1f, string address = null, int? port = null) 文字列のブロードキャスト送信 public void Broadcast(string dataStr, int? port = null) バイトデータのブロードキャスト送信 public void Broadcast(byte[] data, int? port = null) 文字列の複数回ブロードキャスト送信 public void TryContinuousBroadcast(string dataStr, int tryCount, float span = 0.1f, int? port = null)"
  },
  "Scripts_ja/Utils/Object/AnimationByStep.html": {
    "href": "Scripts_ja/Utils/Object/AnimationByStep.html",
    "title": "AnimationByStep | Project Starter Package Doc",
    "keywords": "AnimationByStep Animation コンポーネントのステップ実行をします。 namespace GarageKit public class AnimationByStep : MonoBehaviour Inheritance AnimationByStep -> MonoBehaviour Inspector Properties member type description anim Animation Animation の参照 speed float ステップ再生スピード useSmooth bool スムーズ更新 Methods アニメーションのステップ実行 public void Step() アニメーションのリセット public void Reset() アニメーション位置の指定 public void SetSeconds(float sec) 現在のアニメーション位置を取得 public float GetSeconds() 現在のアニメーション尺を取得 public float GetDuration()"
  },
  "Scripts_ja/Utils/Object/AutoBlink.html": {
    "href": "Scripts_ja/Utils/Object/AutoBlink.html",
    "title": "AutoBlink | Project Starter Package Doc",
    "keywords": "AutoBlink マテリアルの自動点滅アニメーションをします。 namespace GarageKit public class AutoBlink : MonoBehaviour Inheritance AutoBlink -> MonoBehaviour Inspector Properties member type description isPinpon bool ピンポンアニメーション設定 blinkTime float 点滅アニメーション時間 startAlpha float 開始点のアルファ値 endAlpha float 終点のアルファ値"
  },
  "Scripts_ja/Utils/Object/AutoRotate.html": {
    "href": "Scripts_ja/Utils/Object/AutoRotate.html",
    "title": "AutoRotate | Project Starter Package Doc",
    "keywords": "AutoRotate オブジェクトの自動回転アニメーションをします。 namespace GarageKit public class AutoRotate : MonoBehaviour Inheritance AutoRotate -> MonoBehaviour Inspector Properties member type description rotateSpeed float 回転速度 axis ROTATE_AXIS 回転軸 Enums ROTATE_AXIS enums description X X 軸 Y Y 軸 Z Z 軸 XY X 軸と Y 軸 XZ X 軸と Z 軸 YZ Y 軸と Z 軸 XYZ 全軸"
  },
  "Scripts_ja/Utils/Object/AutoScale.html": {
    "href": "Scripts_ja/Utils/Object/AutoScale.html",
    "title": "AutoScale | Project Starter Package Doc",
    "keywords": "AutoScale オブジェクトの自動スケールアニメーションをします。 namespace GarageKit public class AutoScale : MonoBehaviour Inheritance AutoScale -> MonoBehaviour Inspector Properties member type description isLoop bool ループ設定 scaleTime float スケールアニメーション時間 startScale Vector3 開始点のスケール値 endScale Vector3 終点のスケール値"
  },
  "Scripts_ja/Utils/Object/AutoUVScroll.html": {
    "href": "Scripts_ja/Utils/Object/AutoUVScroll.html",
    "title": "AutoUVScroll | Project Starter Package Doc",
    "keywords": "AutoUVScroll UVの自動スクロールアニメーションをします。 namespace GarageKit public class AutoUVScroll : MonoBehaviour Inheritance AutoUVScroll -> MonoBehaviour Inspector Properties member type description materialID int マテリアル番号 texturePropName string シェーダーのテクスチャプロパティ名 scrollTime float スクロールアニメーション時間 startUV Vector2 開始点の UV 値 endUV Vector2 終点の UV 値 easeType Ease イージングタイプ loopType LoopType ループタイプ"
  },
  "Scripts_ja/Utils/Object/Billbord.html": {
    "href": "Scripts_ja/Utils/Object/Billbord.html",
    "title": "Billbord | Project Starter Package Doc",
    "keywords": "Billbord 指定ターゲットオブジェクトに対してビルボード処理を実行します。 namespace GarageKit public class Billbord : MonoBehaviour Inheritance Billbord -> MonoBehaviour Inspector Properties member type description target Transform ターゲットの参照 invertForward bool 前方向を反転 invertUp bool 上方向を反転 lockPitch bool ピッチ回転をしない isZup bool Z 軸を上方向にする asGroup bool グループとして子供階層全オブジェクトに反映"
  },
  "Scripts_ja/Utils/Object/Fader.html": {
    "href": "Scripts_ja/Utils/Object/Fader.html",
    "title": "Fader | Project Starter Package Doc",
    "keywords": "Fader カメラに設定して GL 描画処理でフェードを行います。全描画の最後に描画されます。AsyncStateBase を利用する場合は自動的に設定されます。 namespace GarageKit [RequireComponent(typeof(Camera))] public class Fader : MonoBehaviour Inheritance Fader -> MonoBehaviour Inspector Properties member type description fadeTime float フェード時間 fadeColor Color フェードカラー fadeMaterial Material 描画用マテリアル fadeType FADE_TYPE フェードタイプ Enums FADE_TYPE enums description FADE_IN フェードイン FADE_OUT フェードアウト Static Methods フェードの有効無効 public static bool UseFade { get; } シーン内の全 Fader コンポーネントリスト public static List<Fader> Faders { get; } 全 Fader コンポーネントのフェードを開始 public static void StartFadeAll(FADE_TYPE fadeType) public static void StartFadeAll(float fadeTime, FADE_TYPE fadeType) Methods フェード中確認 public bool IsFading { get; } フェードの有効化 public static void EnableFade() フェードの無効化 public static void DisableFade() フェードを開始 public void StartFade(FADE_TYPE fadeType, float targetAlpha = 1.0f) public void StartFade(float fadeTime, FADE_TYPE fadeType, float targetAlpha = 1.0f)"
  },
  "Scripts_ja/Utils/Object/LineObject.html": {
    "href": "Scripts_ja/Utils/Object/LineObject.html",
    "title": "LineObject | Project Starter Package Doc",
    "keywords": "LineObject 平面方向を設定してターゲットオブジェクトまでのラインを引きます。ライン表現のために平面オブジェクトを子供階層に設置してください。 namespace GarageKit [ExecuteInEditMode] public class LineObject : MonoBehaviour Inheritance LineObject -> MonoBehaviour Inspector Properties member type description dimension DIMENSION 平面方向設定 target GameObject ターゲットの参照 thickness float 線の太さ Enums DIMENSION enums description XY XY 平面 XZ XZ 平面"
  },
  "Scripts_ja/Utils/Object/MultiTransformFollower.html": {
    "href": "Scripts_ja/Utils/Object/MultiTransformFollower.html",
    "title": "MultiTransformFollower | Project Starter Package Doc",
    "keywords": "MultiTransformFollower Transform を複数のターゲットオブジェクト間と同期させます。GizmoDrawer と一緒に利用すると便利です。 namespace GarageKit [ExecuteInEditMode] public class MultiTransformFollower : MonoBehaviour Inheritance MultiTransformFollower -> MonoBehaviour Inspector Properties member type description target_A GameObject ターゲット A の参照 target_B GameObject ターゲット B の参照 lerp float 2 ターゲット間同期の割合 followPosition MULTI_FOLLOW_AXIS 位置の同期設定 followRotation MULTI_FOLLOW_AXIS 回転の同期設定 followScale MULTI_FOLLOW_AXIS スケールの同期設定 MULTI_FOLLOW_AXIS 軸同期設定の構造体 namespace GarageKit [Serializable] public class MULTI_FOLLOW_AXIS Properties member type description x bool x 方向を有効化 y bool y 方向を有効化 z bool z 方向を有効化"
  },
  "Scripts_ja/Utils/Object/PanoramaOrbit.html": {
    "href": "Scripts_ja/Utils/Object/PanoramaOrbit.html",
    "title": "PanoramaOrbit | Project Starter Package Doc",
    "keywords": "PanoramaOrbit パノラマ用オブジェクトをオービット回転操作します。カメラを回転させる場合は Panorama360Camera も利用できます。 namespace GarageKit public class PanoramaOrbit : MonoBehaviour, ILocalize Inheritance PanoramaOrbit -> MonoBehaviour Inspector Properties member type description mode OPERATION_MODE 回転操作モード rotationSpeed float 回転速度 invertY bool Y 軸回転の反転設定 invertX bool X 軸回転の反転設定 Enums OPERATION_MODE enums description ROTATE_Y Y 軸回転操作 ROTATE_XY X 軸 Y 軸回転操作 Methods 回転のリセット public void RotationReset() 回転値のセット public void SetRotate(float h, float v, float speed)"
  },
  "Scripts_ja/Utils/Object/ScreenAnchor.html": {
    "href": "Scripts_ja/Utils/Object/ScreenAnchor.html",
    "title": "ScreenAnchor | Project Starter Package Doc",
    "keywords": "ScreenAnchor スクリーン上の基準位置を指定して位置固定します。 namespace GarageKit public class ScreenAnchor : MonoBehaviour Inheritance ScreenAnchor -> MonoBehaviour Inspector Properties member type description anchorPosH ANCHOR_POSITION_HORIZONTAL 横方向位置設定 anchorPosV ANCHOR_POSITION_VERTICAL 縦方向位置設定 useUpdateAnchor bool 固定処理を Update() で行う Enums ANCHOR_POSITION_HORIZONTAL enums description LEFT 左端 MIDDLE 中央 RIGHT 右端 ANCHOR_POSITION_VERTICAL enums description TOP 上端 MIDDLE 中央 BOTTOM 下端"
  },
  "Scripts_ja/Utils/Object/ScreenPositionFollower.html": {
    "href": "Scripts_ja/Utils/Object/ScreenPositionFollower.html",
    "title": "ScreenPositionFollower | Project Starter Package Doc",
    "keywords": "ScreenPositionFollower ターゲットオブジェクトのスクリーン位置に同期させます。GizmoDrawer と一緒に利用すると便利です。 namespace GarageKit public class ScreenPositionFollower : MonoBehaviour Inheritance ScreenPositionFollower -> MonoBehaviour Inspector Properties member type description targetObject GameObject ターゲットの参照 rayCamera Camera スクリーンカメラの参照 screenWidth int スクリーン幅 screenHeight int スクリーン高さ setAsScreenSize bool 現在のスクリーンサイズを反映 uiScale float 位置スケール"
  },
  "Scripts_ja/Utils/Object/StageManagedObject.html": {
    "href": "Scripts_ja/Utils/Object/StageManagedObject.html",
    "title": "StageManagedObject | Project Starter Package Doc",
    "keywords": "StageManagedObject オブジェクトの表示 / 非表示を管理します。SceneStateManager で State 遷移時に各 State でオブジェクトをまとめて表示 / 非表示させる場合に便利です。 namespace GarageKit public class StageManagedObject : MonoBehaviour Inheritance StageManagedObject -> MonoBehaviour Static Methods 全 StageManagedObject コンポーネントのオブジェクトを非表示 public static void AllOff() 全 StageManagedObject コンポーネントのオブジェクトをリストで表示 public static void ListOn(List<StageManagedObject> ons) public static void ListOn(StageManagedObject[] ons) Methods オブジェクトを表示 public void On() オブジェクトを非表示 public void Off() Example public class SampleState : StateBase { public StageManagedObject[] enables; public override void StateStart(object context) { // State 遷移時に表示オブジェクトの切り替え StageManagedObject.AllOff(); foreach(StageManagedObject obj in enables) obj.On(); } }"
  },
  "Scripts_ja/Utils/Object/TextRandomizer.html": {
    "href": "Scripts_ja/Utils/Object/TextRandomizer.html",
    "title": "TextRandomizer | Project Starter Package Doc",
    "keywords": "TextRandomizer テキストをランダムに変更するアニメーションを実行します。 namespace GarageKit public class TextRandomizer : MonoBehaviour Inheritance TextRandomizer -> MonoBehaviour Inspector Properties member type description randomChars string ランダムテキストに利用するキャラクター uiText TMP_Text TMP_Text の参照 Methods テキストのランダムアニメーションを開始 public void TextRandomizeIn(string goalText, float delay = 0.0f, int insertRndChrs = 10, bool defaultSalt = true)"
  },
  "Scripts_ja/Utils/Object/TransformFollower.html": {
    "href": "Scripts_ja/Utils/Object/TransformFollower.html",
    "title": "TransformFollower | Project Starter Package Doc",
    "keywords": "TransformFollower Transform をターゲットオブジェクトと同期させます。GizmoDrawer と一緒に利用すると便利です。 namespace GarageKit [ExecuteInEditMode] public class TransformFollower : MonoBehaviour Inheritance TransformFollower -> MonoBehaviour Inspector Properties member type description targetObject GameObject ターゲットの参照 followPosition FOLLOW_AXIS 位置の同期設定 followRotation FOLLOW_AXIS 回転の同期設定 followScale FOLLOW_AXIS スケールの同期設定 FOLLOW_AXIS 軸同期設定の構造体 namespace GarageKit [Serializable] public class FOLLOW_AXIS Properties member type description x bool x 方向を有効化 y bool y 方向を有効化 z bool z 方向を有効化"
  },
  "Scripts_ja/Utils/Object/WebCamPlateObject.html": {
    "href": "Scripts_ja/Utils/Object/WebCamPlateObject.html",
    "title": "WebCamPlateObject | Project Starter Package Doc",
    "keywords": "WebCamPlateObject Web カメラを利用する場合の設定を簡易化します。映像はテクスチャに反映されます。 namespace GarageKit [RequireComponent(typeof(Renderer))] public class WebCamPlateObject : MonoBehaviour Inheritance WebCamPlateObject -> MonoBehaviour Inspector Properties member type description deviceName string カメラデバイス名の指定 deviceIndex int カメラデバイス ID の指定 requestedWidth int カメラ映像 幅の指定 requestedHeight int カメラ映像 高さの指定 requestedFPS int カメラ映像 FPS の指定 anisoLevel int 映像テクスチャの異方性フィルタリングレベル texturePropName string シェーダーのテクスチャプロパティ名 filteMode FilterMode 映像テクスチャのフィルターモード wrapMode TextureWrapMode 映像テクスチャの繰り返しモード isAutoAspect bool アスペクトの自動設定 isMirror bool 左右反転設定 isMobileCameraRotation bool 端末の回転方向反映 vertical OBJECTAXIS_Y 上方向の軸設定 Enums OBJECTAXIS_Y enums description Y オブジェクトの Y 軸方向 Z オブジェクトの Z 軸方向 Methods WebCamTexture の取得 public WebCamTexture WebCamTexture { get; } Web カメラが正常に開かれているかの確認 public bool IsWebCamPlaySuccess()"
  },
  "Scripts_ja/Utils/Object/ZsortOrderGroup.html": {
    "href": "Scripts_ja/Utils/Object/ZsortOrderGroup.html",
    "title": "ZsortOrderGroup | Project Starter Package Doc",
    "keywords": "ZsortOrderGroup 子供階層の全オブジェクトをターゲットからの距離順でソートします。 namespace GarageKit public class ZsortOrderGroup : MonoBehaviour Inheritance WebCamPlateObject -> MonoBehaviour Inspector Properties member type description distanceTarget Transform 距離判定用のターゲット isReverse bool ソート順を逆転"
  },
  "Scripts_ja/Utils/ObjectUtil.html": {
    "href": "Scripts_ja/Utils/ObjectUtil.html",
    "title": "ObjectUtil | Project Starter Package Doc",
    "keywords": "ObjectUtil オブジェクト操作関連のユーティリティ関数を提供します。 namespace GarageKit public class ObjectUtil Static Methods 子供階層オブジェクトのレイヤーをまとめて設定する public static void SetLayerChildren(GameObject rootObject, int layer, bool changeParent = false) 階層全体のバウンディングボックスを取得 public static Bounds GetRenderBoundsChildren(GameObject root)"
  },
  "Scripts_ja/Utils/Render/GlLineRenderer.html": {
    "href": "Scripts_ja/Utils/Render/GlLineRenderer.html",
    "title": "GlLineRenderer | Project Starter Package Doc",
    "keywords": "GlLineRenderer OnPostRender() で指定座標への GL ライン描画を行います。 namespace GarageKit [RequireComponent(typeof(Camera))] public class GlLineRenderer : MonoBehaviour Inheritance GlLineRenderer -> MonoBehaviour Inspector Properties member type description lineColor Color 描画ラインの色 lines LineData[] 描画ラインの座標リスト lineMaterial Material 描画用マテリアル Methods ライン座標の更新 public void UpdateLine(int id, Vector2 start, Vector2 end) LineData 描画ライン座標の構造体 namespace GarageKit [Serializable] public class LineData Properties member type description start Vector2 開始点 end Vector2 終了点"
  },
  "Scripts_ja/Utils/Render/RenderScreenTexture.html": {
    "href": "Scripts_ja/Utils/Render/RenderScreenTexture.html",
    "title": "RenderScreenTexture | Project Starter Package Doc",
    "keywords": "RenderScreenTexture カメラに RenderTexture を設定して外部から取得可能にします。 namespace GarageKit [RequireComponent(typeof(Camera))] public class RenderScreenTexture : MonoBehaviour Inheritance RenderScreenTexture -> MonoBehaviour Inspector Properties member type description asScreenSize bool スクリーンサイズでの自動設定 textureSize Vector2 RenderTexture サイズ Methods RenderTexture の取得 public RenderTexture GetRenderTexture()"
  },
  "Scripts_ja/Utils/Repository/Base/SceneRepositoryBase.html": {
    "href": "Scripts_ja/Utils/Repository/Base/SceneRepositoryBase.html",
    "title": "SceneRepositoryBase | Project Starter Package Doc",
    "keywords": "SceneRepositoryBase SceneStateManager で複数シーンを利用した場合のシーン間パラメータアクセスを提供するリポジトリオブジェクト。遷移先シーンをロード後、遷移先シーンに配置済みの SceneRepositoryBase を経由してインスペクタ設定済みの参照を取得可能です。 namespace GarageKit public class SceneRepositoryBase : MonoBehaviour, ISceneRepository Inheritance SceneRepositoryBase -> MonoBehaviour, ISceneRepository Methods 変数名の文字列で値の取得 public T FindByVarName<T>(string varName) Example // sample repository class public class MultipleSceneRepository : SceneRepositoryBase { public Text messageText; public GameObject testCube; } MultipleSceneStateBase // 遷移先シーンをロード後、遷移先シーンに配置済みの SceneRepositoryBase を経由してインスペクタ設定済みの参照を取得可能 string text = (this.SceneRepository as MultipleSceneRepository).messageText.text; GameObject cube = (this.SceneRepository as MultipleSceneRepository).testCube;"
  },
  "Scripts_ja/Utils/Repository/Interface/ISceneRepository.html": {
    "href": "Scripts_ja/Utils/Repository/Interface/ISceneRepository.html",
    "title": "ISceneRepository | Project Starter Package Doc",
    "keywords": "ISceneRepository SceneStateManager で複数シーンを利用した場合のシーン間パラメータアクセスを提供するリポジトリオブジェクトのインターフェース namespace GarageKit public interface ISceneRepository Methods 変数名の文字列で値の取得 T FindByVarName<T>(string varName)"
  },
  "Scripts_ja/Utils/State/Base/AsyncStateBase.html": {
    "href": "Scripts_ja/Utils/State/Base/AsyncStateBase.html",
    "title": "AsyncStateBase | Project Starter Package Doc",
    "keywords": "AsyncStateBase SceneStateManager でフェード付き State 遷移を行うためのベースクラス namespace GarageKit public class AsyncStateBase : StateBase, IAsyncState Inheritance AsyncStateBase -> StateBase, IAsyncState -> MonoBehaviour Inspector Properties member type description fadeTime float フェード時間 fadeColor Color フェードカラー Methods State 遷移後に State 内で最初に実行される処理 public virtual void StateStart(object context) State 遷移後に State 内で毎フレーム実行される処理 public virtual void StateUpdate() State 遷移時に State 内で最後に実行される処理 public virtual void StateExit() フェード完了後に実行される処理 public virtual void StateExitAsync()"
  },
  "Scripts_ja/Utils/State/Base/MultipleSceneAsyncStateBase.html": {
    "href": "Scripts_ja/Utils/State/Base/MultipleSceneAsyncStateBase.html",
    "title": "MultipleSceneAsyncStateBase | Project Starter Package Doc",
    "keywords": "MultipleSceneAsyncStateBase SceneStateManager で複数シーンを利用したフェード付き State 遷移を行うためのベースクラス namespace GarageKit public class MultipleSceneAsyncStateBase : MultipleSceneStateBase, IAsyncState Inheritance MultipleSceneAsyncStateBase -> MultipleSceneStateBase, IAsyncState -> StateBase -> MonoBehaviour Inspector Properties member type description loadSceneName string 対応して読み込むシーン名 asAsyncLoad bool シーンの非同期読み込み設定 asAdditiveLoad bool シーンの追加読み込み設定 Methods SceneRepository の取得 public SceneRepositoryBase SceneRepository { get; } State 遷移後に State 内で最初に実行される処理 public virtual void StateStart(object context) シーン読み込み完了後に実行される処理 public virtual void SceneLoaded() State 遷移後に State 内で毎フレーム実行される処理 public virtual void StateUpdate() State 遷移時に State 内で最後に実行される処理 public virtual void StateExit() フェード完了後に実行される処理の実装 public virtual void StateExitAsync()"
  },
  "Scripts_ja/Utils/State/Base/MultipleSceneStateBase.html": {
    "href": "Scripts_ja/Utils/State/Base/MultipleSceneStateBase.html",
    "title": "MultipleSceneStateBase | Project Starter Package Doc",
    "keywords": "MultipleSceneStateBase SceneStateManager で複数シーンを利用した State 遷移を行うためのベースクラス namespace GarageKit public class MultipleSceneStateBase : StateBase, IAsyncState Inheritance MultipleSceneStateBase -> StateBase, IMultipleSceneState -> MonoBehaviour Inspector Properties member type description loadSceneName string 対応して読み込むシーン名 asAsyncLoad bool シーンの非同期読み込み設定 asAdditiveLoad bool シーンの追加読み込み設定 Methods SceneRepository の取得 public SceneRepositoryBase SceneRepository { get; } State 遷移後に State 内で最初に実行される処理 public virtual void StateStart(object context) シーン読み込み完了後に実行される処理 public virtual void SceneLoaded() State 遷移後に State 内で毎フレーム実行される処理 public virtual void StateUpdate() State 遷移時に State 内で最後に実行される処理 public virtual void StateExit() シーン破棄後に実行される処理 public virtual void SceneUnloaded()"
  },
  "Scripts_ja/Utils/State/Base/StateBase.html": {
    "href": "Scripts_ja/Utils/State/Base/StateBase.html",
    "title": "StateBase | Project Starter Package Doc",
    "keywords": "StateBase SceneStateManager で State 遷移を行うためのベースクラス namespace GarageKit public class StateBase : MonoBehaviour, IState Inheritance StateBase -> MonoBehaviour, IState Properties member type description updateEnable bool StateUpdate() 処理の有効 / 無効の設定に利用可能 Methods StateUpdate() 処理の有効確認 public bool IsUpdateEnable { get; } State 遷移後に State 内で最初に実行される処理 public virtual void StateStart(object context) State 遷移後に State 内で毎フレーム実行される処理 public virtual void StateUpdate() State 遷移時に State 内で最後に実行される処理 public virtual void StateExit()"
  },
  "Scripts_ja/Utils/State/Base/TimelinedSceneStateBase.html": {
    "href": "Scripts_ja/Utils/State/Base/TimelinedSceneStateBase.html",
    "title": "TimelinedSceneStateBase | Project Starter Package Doc",
    "keywords": "TimelinedSceneStateBase SceneStateManager でタイムラインを利用した State 遷移を行うためのベースクラス namespace GarageKit public class TimelinedSceneStateBase : AsyncStateBase, ITimelinedSceneState Inheritance TimelinedSceneStateBase -> AsyncStateBase, ITimelinedSceneState -> StateBase -> MonoBehaviour Inspector Properties member type description durationSec int タイムラインの尺（秒） Methods 現在のタイムライン時間 public float CurrentActionTime { get; } タイムラインの再生確認 public bool IsPlay { get; } タイムラインの一時停止確認 public bool IsPaused { get; } State 遷移後に State 内で最初に実行される処理 public virtual void StateStart(object context) State 遷移後に State 内で毎フレーム実行される処理 public virtual void StateUpdate() State 遷移時に State 内で最後に実行される処理 public virtual void StateExit() タイムラインが完了した際の処理 public virtual void OnStateTimer(GameObject sender) タイムラインを開始 public void StartTimeline() タイムラインを一時停止する処理 public virtual void Pause() タイムラインを再開する処理 public virtual void Resume()"
  },
  "Scripts_ja/Utils/State/Base/VRSceneStateBase.html": {
    "href": "Scripts_ja/Utils/State/Base/VRSceneStateBase.html",
    "title": "VRSceneStateBase | Project Starter Package Doc",
    "keywords": "VRSceneStateBase SceneStateManager でVR コンテンツ用の State 遷移を行うためのベースクラス namespace GarageKit public class VRSceneStateBase : TimelinedSceneStateBase, ISequentialState, IVRSceneState Inheritance VRSceneStateBase -> TimelinedSceneStateBase, ISequentialState, IVRSceneState -> AsyncStateBase -> StateBase -> MonoBehaviour Inspector Properties member type description viewReferenceObj GameObject 視点位置オブジェクトの参照 viewGuideTarget GameObject 視線先ガイドオブジェクトの参照 enables StageManagedObject[] 表示管理オブジェクトリスト Methods State 遷移後に State 内で最初に実行される処理 public virtual void StateStart(object context) State 遷移後に State 内で毎フレーム実行される処理 public virtual void StateUpdate() State 遷移時に State 内で最後に実行される処理 public virtual void StateExit() 次の State への遷移処理 public virtual void ToNextState() 前の State への遷移処理 public virtual void ToPrevState() 現在のステートをリセットする処理 public virtual void ResetCurrentState() 表示オブジェクト設定処理 public void SetStagingObjects()"
  },
  "Scripts_ja/Utils/State/Interface/IAsyncState.html": {
    "href": "Scripts_ja/Utils/State/Interface/IAsyncState.html",
    "title": "IAsyncState | Project Starter Package Doc",
    "keywords": "IAsyncState SceneStateManager でフェード付き State 遷移を行うためのインターフェース namespace GarageKit public interface IAsyncState Methods フェード完了後に実行される処理の実装 void StateExitAsync()"
  },
  "Scripts_ja/Utils/State/Interface/IMultipleSceneState.html": {
    "href": "Scripts_ja/Utils/State/Interface/IMultipleSceneState.html",
    "title": "IMultipleSceneState | Project Starter Package Doc",
    "keywords": "IMultipleSceneState SceneStateManager で複数シーンを利用した State 遷移を行うためのインターフェース namespace GarageKit public interface IMultipleSceneState Methods シーン読み込み完了後に実行される処理の実装 void SceneLoaded()"
  },
  "Scripts_ja/Utils/State/Interface/ISequentialState.html": {
    "href": "Scripts_ja/Utils/State/Interface/ISequentialState.html",
    "title": "ISequentialState | Project Starter Package Doc",
    "keywords": "ISequentialState SceneStateManager で連続した State 遷移を行うためのインターフェース namespace GarageKit public interface ISequentialState Methods 次の State への遷移処理の実装 void ToNextState() 前の State への遷移処理の実装 void ToNextState()"
  },
  "Scripts_ja/Utils/State/Interface/IState.html": {
    "href": "Scripts_ja/Utils/State/Interface/IState.html",
    "title": "IState | Project Starter Package Doc",
    "keywords": "IState SceneStateManager で State 遷移を行うためのインターフェース namespace GarageKit public interface IState Methods State 遷移後に State 内で最初に実行される処理の実装 void StateStart(object context) State 遷移後に State 内で毎フレーム実行される処理の実装 void StateUpdate() State 遷移時に State 内で最後に実行される処理の実装 void StateExit()"
  },
  "Scripts_ja/Utils/State/Interface/ITimelinedSceneState.html": {
    "href": "Scripts_ja/Utils/State/Interface/ITimelinedSceneState.html",
    "title": "IStITimelinedSceneStateate | Project Starter Package Doc",
    "keywords": "IStITimelinedSceneStateate SceneStateManager でタイムラインを利用した State 遷移を行うためのインターフェース namespace GarageKit public interface ITimelinedSceneState Methods タイムラインを一時停止する処理の実装 void Pause() タイムラインを再開する処理の実装 void Resume() タイムラインが完了した際の処理の実装 void OnStateTimer(GameObject sender)"
  },
  "Scripts_ja/Utils/State/Interface/IVRSceneState.html": {
    "href": "Scripts_ja/Utils/State/Interface/IVRSceneState.html",
    "title": "VRSceneStateBase | Project Starter Package Doc",
    "keywords": "VRSceneStateBase SceneStateManager でVR コンテンツ用の State 遷移を行うためのインターフェース namespace GarageKit public interface VRSceneStateBase Methods 現在のステートをリセットする処理の実装 void ResetCurrentState() 表示オブジェクト設定処理の実装 void SetStagingObjects();"
  },
  "Scripts_ja/Utils/TextUtil.html": {
    "href": "Scripts_ja/Utils/TextUtil.html",
    "title": "TextUtil | Project Starter Package Doc",
    "keywords": "TextUtil テキスト関連のユーティリティ関数を提供します。 namespace GarageKit public class TextUtil Static Methods 文字数制限 public static string CutoutText(string text, int maxCount) 行数を揃える public static string AlignText(string text, int lineCount) 改行入りテキストを行文字数及び行数指定で整形 public static string CutoutLineAndLfText(string lfText, int maxLineCount, int maxLineStringCount) 改行入りテキストを行数指定で整形 public static string CutoutLine(string lfText, int maxLineCount) 改行を消す public static string RemoveEOL(string text) WWWクラス使用時の半角 # のエラーを回避する public static string EscapeSingleByteSharpForWWW(string text) テキストのエンコード変換 public static string ConvertEncoding(string srcString, Encoding destEncording) マルチバイト文字でのバイト数を考慮した Substring public static string SubstringDoubleByte(string srcString, int startIndex, int endIndex, Encoding encoding) マルチバイト文字でのバイト数を考慮した文字数カウント public static int MultiByteLength(string srcString, Encoding encoding) マルチバイト文字の確認 public static bool IsMultiByteChar(char srcChar, Encoding encoding) TextMesh が指定した幅に収まるかチェックし収まらない場合は改行する public static void CalcTextBox(TextMesh textMesh, float width = 1000.0f) IP アドレスとポート番号に分割しての文字列パース public static bool ParseIpAndPort(string ipStr, out string ip, out int port)"
  },
  "Scripts_ja/Utils/Texture/NumberTexture.html": {
    "href": "Scripts_ja/Utils/Texture/NumberTexture.html",
    "title": "NumberTexture | Project Starter Package Doc",
    "keywords": "NumberTexture 入力された 0-9 の数値からテクスチャを設定して切り替えます。 namespace GarageKit public class NumberTexture : MonoBehaviour Inheritance NumberTexture -> MonoBehaviour Inspector Properties member type description numTextures Texture2D[] 数字テクスチャ 0-9 numPlates GameObject[] 一の位を先頭にする桁オブジェクト Methods 番号テクスチャの設定 public void SetNumber(int num)"
  },
  "Scripts_ja/Utils/Texture/SequenceSprite.html": {
    "href": "Scripts_ja/Utils/Texture/SequenceSprite.html",
    "title": "SequenceSprite | Project Starter Package Doc",
    "keywords": "SequenceSprite フレームで連番 Sprite を切り替えます。 namespace GarageKit public class SequenceSprite : MonoBehaviour Inheritance SequenceSprite -> MonoBehaviour Inspector Properties member type description uiImage Image Image の参照 sprites Sprite[] 連番 Sprite Methods 連番のリセット public void ResetSequence() 連番の切り替え開始 public void StartSequence() 連番の切り替え停止 public void StopSequence()"
  },
  "Scripts_ja/Utils/Texture/SequenceTexture.html": {
    "href": "Scripts_ja/Utils/Texture/SequenceTexture.html",
    "title": "SequenceTexture | Project Starter Package Doc",
    "keywords": "SequenceTexture フレームで連番 Texture を自動切り替えします。 namespace GarageKit public class SequenceTexture : MonoBehaviour Inheritance SequenceTexture -> MonoBehaviour Inspector Properties member type description fps int 切り替え FPS isLoop bool ループ設定 textures Texture2D[] 連番テクスチャリスト textureParamName string テクスチャのセット先シェーダーパラメータ名"
  },
  "Scripts_ja/Utils/TimelineUtil.html": {
    "href": "Scripts_ja/Utils/TimelineUtil.html",
    "title": "TimelineUtil | Project Starter Package Doc",
    "keywords": "TimelineUtil Timeline操作関連のユーティリティ関数を提供します。 Important 利用の際はソースコード内の #define 定義を有効にしてください。 namespace GarageKit public class TimelineUtil Static Methods 管理トラックの GC 処理を行う public static void GavageManagedTracks() タイムラインにトラックを追加 public static TrackAsset AddTrack<T>(PlayableDirector playableDirector, string trackName, UnityEngine.Object bindObj, TrackAsset parent = null) where T : TrackAsset タイムラインからトラックを削除 public static void DeleteTrack(PlayableDirector playableDirector, TrackAsset track) タイムラインから全トラックを削除 public static void DeleteAllTrack(PlayableDirector playableDirector) トラック名を指定してタイムラインからトラックを削除 public static void DeleteTrackByName(PlayableDirector playableDirector, string trackName) トラック名を指定して取得 public static TrackAsset GetTrackByName(PlayableDirector playableDirector, string trackName) 全トラックを取得 public static List<TrackAsset> GetAllTracks(PlayableDirector playableDirector) トラック名を指定して全クリップをクリア public static void ClearTrackByName(PlayableDirector playableDirector, string trackName) 全トラックの全クリップをクリア public static void ClearAllTracks(PlayableDirector playableDirector) 新規トラックの設定 public static void SetTrack<T>(PlayableDirector playableDirector, string trackName, double start, double end) where T : TrackAsset 新規音声トラックの設定 public static void SetAudioTrack(PlayableDirector playableDirector, string trackName, AudioClip audioClip, double start, double? end = null, bool loop = false, double easeInDuration = 0.0, double easeOutDuration = 0.0) 新規 RawImage トラックの設定 public static void SetRawImageTrack(PlayableDirector playableDirector, string trackName, Texture2D tex, double start, double end) 新規 AVPro MediaPlayer トラックの設定 public static void SetMediaPlayerTrack(PlayableDirector playableDirector, string trackName, MediaPathType mediaPathType, string moviePath, double start, double? end = null) public static void SetMediaPlayerTrack(PlayableDirector playableDirector, string trackName, double start, double? end = null, float vol = 1.0f) 新規アクティベーショントラックの設定 public static void SetActivationTrack(PlayableDirector playableDirector, string trackName, double start, double end) 新規アニメーショントラックの設定 public static void SetAnimationTrack(PlayableDirector playableDirector, string trackName, AnimationClip animClip, double start, double end) 新規シグナルトラックの設定 public static void SetSignalTrack(PlayableDirector playableDirector, string trackName, SignalAsset signal, double time, string emitterName = \"\") public static void SetSignalTrack(PlayableDirector playableDirector, SignalAsset signal, double time, string emitterName = \"\") トラック内の各 Clip In/Out 時間リストの取得 public static List<Tuple<Double, Double>> GetClipsInOut(TrackAsset track)"
  },
  "Scripts_ja/Utils/UI/InputfieldZenkakuBSFix.html": {
    "href": "Scripts_ja/Utils/UI/InputfieldZenkakuBSFix.html",
    "title": "InputfieldZenkakuBSFix | Project Starter Package Doc",
    "keywords": "InputfieldZenkakuBSFix 日本語入力の全角変換中に確定させない状態で InputField からフォーカスを外すと変換中の文字が倍加するバグの対応機能 reference: https://qiita.com/monolith8/items/a88b13ecc1121fa10450 namespace GarageKit [RequireComponent(typeof(InputField))] public class InputfieldZenkakuBSFix : MonoBehaviour Inheritance InputfieldZenkakuBSFix -> MonoBehaviour"
  },
  "Scripts_ja/Utils/UI/UIFadeGroupComponent.html": {
    "href": "Scripts_ja/Utils/UI/UIFadeGroupComponent.html",
    "title": "UIFadeGroupComponent | Project Starter Package Doc",
    "keywords": "UIFadeGroupComponent CanvasGroup のフェード処理を管理します。 namespace GarageKit public class UIFadeGroupComponent : MonoBehaviour Inheritance UIFadeGroupComponent -> MonoBehaviour Methods フェードのリセット public void ResetFade() フェードの開始 public void StartFade(float fixTime = 5.0f, float tweenTime = 0.5f) カメラ位置に対して距離による UI 位置をセット public void SetUiPosition3D(Vector3 camPos, Vector3 targetPos, float height = 1.8f, float depth = 1.5f)"
  },
  "Scripts_ja/Utils/UI/UIFadeTelop.html": {
    "href": "Scripts_ja/Utils/UI/UIFadeTelop.html",
    "title": "UIFadeTelop | Project Starter Package Doc",
    "keywords": "UIFadeTelop CanvasGroup のフェード処理によるテキストを表示します。 namespace GarageKit public class UIFadeTelop : MonoBehaviour Inheritance UIFadeTelop -> UIFadeGroupComponent -> MonoBehaviour Inspector Properties member type description uiText TMP_Text テロップ用テキストの参照 uiTextBg Image 背景イメージ resizeBg bool 背景をテキストサイズに合わせてリサイズする Methods テロップのフェード表示開始 public void StartTelop(string message, float fixTime = 5.0f, float tweenTime = 0.5f)"
  },
  "Scripts_ja/Utils/UI/UILongPressButton.html": {
    "href": "Scripts_ja/Utils/UI/UILongPressButton.html",
    "title": "UILongPressButton | Project Starter Package Doc",
    "keywords": "UILongPressButton 長押しで実行できるボタンコンポーネント namespace GarageKit [RequireComponent(typeof(EventTrigger))] public class UILongPressButton : MonoBehaviour Inheritance UILongPressButton -> MonoBehaviour Inspector Properties member type description holdTime float 長押しする時間 Methods 長押しでの実行コールバック public Action OnHoldButton"
  },
  "Scripts_ja/Utils/UI/UIMovieControllPanel.html": {
    "href": "Scripts_ja/Utils/UI/UIMovieControllPanel.html",
    "title": "UIMovieControllPanel | Project Starter Package Doc",
    "keywords": "UIMovieControllPanel AVProVideo を利用してムービー再生用のコントロールパネル機能を提供します。 Important AVProVideo パッケージが必要です。利用の際はソースコード内の #define 定義を有効にしてください。 Important パッケージ内の設定済みプレハブから利用できます。プレハブ内に DisplayUGUI と TMP_Text のコンポーネントを追加し、各参照を再設定して利用してください。 namespace GarageKit public class UIMovieControllPanel : MonoBehaviour Inheritance ARTrackedImageMarkerManager -> MonoBehaviour Inspector Properties member type description player MediaPlayer MediaPlayer の参照 setupOnStart bool Start() でセットアップを行う uiMovie DisplayUGUI 表示用 DisplayUGUI の参照 uiPlayPauseBtn Button 再生 / 一時停止ボタンの参照 uiSeekSlider Slider シーク用 Slider の参照 uiElapsedTxt TMP_Text 残り時間表示 TMP_Text の参照 seekEventTrg EventTrigger シークイベント用 EventTrigger の参照 playSprite Sprite 再生ボタン Sprite pauseSprite Sprite 一時停止ボタン Sprite Methods 再生開始時コールバック public Action OnPlay 再生一時停止時コールバック public Action OnPause シーク開始時コールバック public Action<float> OnSeekStart シーク中コールバック public Action<float> OnSeek シーク終了時コールバック public Action<float> OnSeekEnd 再生完了時コールバック public Action OnFinishedPlaying 映像のクリア public void Clear() 映像のセットアップ public void Setup() 映像の読み込み public bool Load(string moviePathOrUrl, MediaPathType pathType = MediaPathType.AbsolutePathOrURL, bool autoPlay = false) Example __ProjectName__/Prefabs/Utils/UI/MovieControllPanel.prefab // 読み込み再生前にセットアップが必要 uiMovieControllPanel.Setup(); uiMovieControllPanel.Load(\"test.mp4\");"
  },
  "Scripts_ja/Utils/UI/UIWebCamRawImage.html": {
    "href": "Scripts_ja/Utils/UI/UIWebCamRawImage.html",
    "title": "UIWebCamRawImage | Project Starter Package Doc",
    "keywords": "UIWebCamRawImage Web カメラを利用する uGUI RawImage 設定を簡易化します。 namespace GarageKit [RequireComponent(typeof(RawImage))] public class UIWebCamRawImage : MonoBehaviour Inheritance UIWebCamRawImage -> MonoBehaviour Inspector Properties member type description webcamPlayOnStart bool Start() での再生開始 deviceName string カメラデバイス名の指定 deviceIndex int カメラデバイス ID の指定 requestedWidth int カメラ映像 幅の指定 requestedHeight int カメラ映像 高さの指定 requestedFPS int カメラ映像 FPS の指定 anisoLevel int 映像テクスチャの異方性フィルタリングレベル filteMode FilterMode 映像テクスチャのフィルターモード wrapMode TextureWrapMode 映像テクスチャの繰り返しモード isAutoScreenAspect bool アスペクトの自動設定 isMirror bool 左右反転設定 appOrientation APP_ORIENTATION 画面の向き Enums APP_ORIENTATION enums description PORTRAIT ポートレイト / 端末縦位置 LANDSCAPE ランドスケープ / 端末横位置 Methods WebCamTexture の取得 public WebCamTexture WebCamTexture { get; } Web カメラの開始 public IEnumerator WebcamPlay() Web カメラの停止 public void WebcamStop() Web カメラが開かれているかの確認 public bool IsWebcamPlay()"
  },
  "Scripts_ja/Utils/VR/VRGazeGuideArrow.html": {
    "href": "Scripts_ja/Utils/VR/VRGazeGuideArrow.html",
    "title": "VRGazeGuideArrow | Project Starter Package Doc",
    "keywords": "VRGazeGuideArrow VR での視線ガイド矢印を表示コントロールします。 namespace GarageKit public class VRGazeGuideArrow : MonoBehaviour Inheritance VRGazeGuideArrow -> MonoBehaviour Inspector Properties member type description viewCamera Camera HMD カメラの参照 smoothTime float スムーズ移動量 screenRatio float ガイドが有効になるスクリーン範囲 arrows GameObject[] 矢印オブジェクト modeGreen Color32 グリーンモードカラー modeRed Color32 レッドモードカラー useArrow bool 矢印表示設定 Enums COLOR_MODE enums description GREEN グリーンモード RED レッドモード Methods HMD デバイスの利用中確認 public bool IsDevicePresent() カラーモードの切り替え public void ChangeColor(COLOR_MODE mode)"
  },
  "Scripts_ja/Utils/WindowsUtil.html": {
    "href": "Scripts_ja/Utils/WindowsUtil.html",
    "title": "WindowsUtil | Project Starter Package Doc",
    "keywords": "WindowsUtil Windows 関連のユーティリティ関数を提供します。 namespace GarageKit public class WindowsUtil Static Methods アプリケーションウィンドウの Rect を取得 public static Rect GetApplicationWindowRect() アプリケーションウィンドウを前景にする public static void SetForeGroundApplicationWindow() アプリケーションウィンドウをポップアップに設定する public static void SetPopupWindow() アプリケーションウィンドウの位置を設定する public static void SetWindowPos(int x, int y, int w, int h) 指定したアプリケーションウィンドウを最小化する public static void MinimizeWindow(string className, string windowName) アプリケーションウィンドウを最小化する public static void MinimizeWindow() 指定したアプリケーションウィンドウを最大化する public static void MaximizeWindow(string className, string windowName) アプリケーションウィンドウを最大化する public static void MaximizeWindow()"
  },
  "Tutorial_en/doc.html": {
    "href": "Tutorial_en/doc.html",
    "title": "Beginners Tutorial | Project Starter Package Doc",
    "keywords": "Beginners Tutorial This tutorial is aimed at beginners, but does not explain the basic operations of the tools. Along with tips for developing with Unity, we will explain the development flow in the early stages of development, introduce how to use this package, and provide a comprehensive explanation of the concepts behind the program code. What is GarageKit for Unity？ This is a convenient Unity package that provides templates for basic scene state transition functions and can be used as a C# framework along with a number of utility scripts. A transition system based on the State pattern, one of the programming design patterns, will be able to handle all kinds of cases by learning the basic rules. It's important to have certain rules in your code. A clean and unified codebase will help reduce bugs and bring order. Most of the functionality is a single component that follows the Unity MonoBehaviour lifecycle and works simply by attaching a script to a GameObject. Since it is a thin framework layer, it is easy to use it in combination with other assets. As the name suggests, it is a tool to accelerate the start of your project! 1. Preparation 1-1. Create a project Create a new project. 1-2. PackageManager settings When using GarageKit, you will need to import several dependent libraries. (There is no problem even after importing GarageKit.unitypackage.) Open Window/PackageManager from the menu. You can remove unnecessary packages first. It's a good idea to add it whenever you need it. Unity comes with a lot of imports in its initial state. It is also related to build capacity, etc., so try to delete unnecessary packages as much as possible. In some cases, you may run into problems caused by unnecessary packages. UnityUI, TextMeshPro and VisualStudioEditor are all you need to get started. (Dependent packages are automatically imported.) If the following packages are not already imported into the project, import them. from UnityRegistry TextMeshPro: Package for handling text display in uGUI. from AssetStore DOTween: Animation script package (Free). https://id.unity.com/en/conversations/cdefce43-9b11-49c5-9c4a-d3a63e30674000bf 1-3. OpenUPM Next, import the following packages from OpenUPM. Note OpenUPM: An open source package manager/registry for Unity libraries. If you have never used it, take this opportunity to learn how to use it. https:/openupm.com/docs/getting-started-cli.html In-game Debug Console: A package that displays the runtime console at runtime, mainly for debugging purposes. https:/openupm.com/packages/com.yasirkula.ingamedebugconsole/ UniTask: A package that makes it easier to handle C# asynchronous processing with Unity. https:/openupm.com/packages/com.cysharp.unitask/ Open (Win)CommandPrompt/(Mac)Terminal, change to the project directory, and run the openupm command for the above two packages. Clicking the button at the top right of the site copies the necessary commands to the clipboard, which is convenient. Just paste it and run it. Return to Unity and check the Project window. About the Packages directory Packages imported with PackageManager or OpenUPM are managed as a Packages directory, separate from project data. You cannot edit external packages that are managed in the Packages directory yourself. This is safe in that you cannot break the external package's source code. In addition, if you need to move your work PC environment, or when you pass project data to someone else, when restoring project data, being able to download the specified package means that you will always be able to reproduce the environment. Of course, there are times when modifications are absolutely necessary. In this case, you can edit the package data by manually importing it into the project and managing it without using PackageManager. 1-4. Importing GarageKit package Now, drag and drop GarageKit.unitypackage into the Project window to import it. Once the import is complete, you may see errors depending on your project settings environment. Let's fix it by changing the project settings. Open File/BuildSetting from the menu and set TargetPlatform to Windows. Open File/BuildSetting/PlayerSetting from the menu and change ApiCompatibilityLevel to .NET Framework from the Configuration item. Note The sources where the error is displayed are SerialPortController.cs and StandalonePlayerResolutionHelper.cs. This error is displayed because .NET Standard 2.1 does not include the classes required for compilation. 1-5. Organizing the project structure Once the error is resolved, check the Project window again. Manually imported data is added in folders. The sample scene data that is automatically created when the project is initially created is unnecessary, so delete the entire Scenes folder. All project data will be managed in this Project window. This window shows the status of files in the actual directory. With a file selected in the Project window, you can open it in the OS's file browser from the right-click menu (Win)Show in Explorer/(Mac)Reveal in Finder. Please check the actual folder location. Return to Unity and rename the __ProjectName__ folder to your working project name. **Please rename in the Project window. ** Note Leaving __ is recommended, but optional. This is an effective way to make your project data folder easier to find so it doesn't get buried under other folders. ProjectWindow automatically sorts by name. Note Also, please refrain from using Japanese file names in all subsequent development work. ** Japanese characters (multi-byte characters) are still second-class citizens when it comes to programming and may cause problems. The first level under the Assets folder is an important starting point for data organization. Normally, by the end of a project, all kinds of data has been incorporated into the project, so if you work without a strategy, the project folder can easily become chaotic. (This may not be a problem during the most recent work. Will you be able to understand it immediately when you open the data for the first time after a long time? What will happen if someone else takes over the project data?) Other folders are already expanded under the Assets folder. If you manually import an external .unitypackage, the data will most likely be expanded to the first level. Well-behaved packages are often grouped together in one folder, so a folder for each import package is naturally created in the first level under the Assets folder. If you consider the project data folder __ProjectName__ as one of the packages, the rules for data organization will become clear. From now on, when importing external .unitypackages, make sure to manage them in separate folders on the first level. The first layer under the current Assets folder has the following folder structure. Assets |- __TestProject__ : project data |- StreamingAssets : Unity standard external file loading folder We have prepared folders in advance for various data used within the project. Make sure to organize your data here and always know where your data is in your project. Assets |- __TestProject__ |- Animations : for animation data (.anim) |- Editor : for editor script |- Fonts : for font data (.otf .ttf ...) |- Materials : for materiak data (.mat) |- Meshes : for mesh data (.mesh) |- Models : for 3D model data (.fbx ...) |- Plugins : for plugin data (.dll ...) |- Prefabs : for prefab data |- Scenes : for scene data (.unity) |- Scripts : for runtime script (.cs) |- Shaders : for shader (.shader ...) |- Sounds : for sound data (.wav .mp3 ...) |- Textures : for texture data (.png .jpg ...) Remember that organizing data and information well is the basis of programming. Even the \"programming design patterns\" that you often hear about in programming are fundamentally about how to organize source code. How should I organize and structure it? This is a knowledge that makes it easier to think about the structure, and as a result, it leads to a method of building programs that are easier to modify and expand. About special folders In Unity, there are some folders that have special names that are reserved in advance. The StreamingAssets folder is one of them. Some of the things you often see are: folder name function StreamingAssets Unity standard folder for reading external files. During build, the original file is automatically copied and packaged. Resources Packaged as compiled data when built. This is an old feature and its use is not recommended. Editor Place Editor scripts that extend the functionality of UnityEditor itself. The source files inside are automatically compiled and reflected in the Editor immediately. Plugins Deploy plugins. In the case of Windows, a general .dll created in C++ or C# can be placed and used by accessing it from the C# code. Plugins / iOS Built into your Xcode project when targeting iOS. Plugins / Android Built into .apk .aab or AndroidStudio project when targeting Android. If AndroidManifest.xml is placed, it can be forcibly overwritten during build post processing. Note There are others as well, so please check the Unity documentation. 1-6. Git It's ready to run. But before you run it and start working on it, use the version control tool Git to commit the latest state. This is one of the most important development tasks. Note If you don't know how to use Git, first check how to use the basic operations: \"initialize a repository,\" \"staging,\" \"commit,\" and \"push\". (Since this is not a Unity operation, the explanation will be omitted.) In Unity, the ``project folder'' is subject to Git version control, but it is not necessary to manage all data. There is a lot of data that does not need to be managed in the Unity project folder (such as automatically generated caches and intermediate files created at each compile time), and each file size is large, so in order to remove them, you need to set .gitignore. Git initial operation example Initialize the Git repository in the project folder. Prepare a .gitignore file and configure the unmanaged folder. Github has sample gitignore for each development environment, so it's easy to copy it as is. It can be used in any development environment, not just Unity. https:/github.com/github/gitignore/blob/main/Unity.gitignore Stage the file and make your first commit. Now you can reset your work and come back here at any time. During development, always commit in the middle of each work. Don't forget to push to the remote repository on your server. Note Using Git also means data backup. Since you can restore to any working version at any time using Git, the following actions are pointless. If you are doing so, please stop and use Git's features instead. Copy the working folder by date name. Include past data that will never be used again in the project \"just in case\". Keep old objects hidden in the scene that are no longer used. Keep old unused code in your code. 2. Run 2-1. Open sample scene Open __ProjectName__/Scenes/Main.unity. An error will appear because we haven't imported any additional assets for debugging, but you can ignore it for now. Delete the [Graphy] object in the Missing Prefab state under Managers/DebugManager (if necessary, you can use it by downloading it from AssetStore and importing it in advance). Graphy: A package that allows you to check and display FPS and memory usage during execution. https:/assetstore.unity.com/packages/tools/gui/graphy-ultimate-fps-counter-stats-monitor-debugger-105778?locale=ja-JP In this scene, the basic things you need have already been set up, and if you have a solid program design, you can start development work right away. This is what is called Scaffolding in the development environment, and it shortcuts the troublesome and troublesome part of the initial work. Also, if you are already using Unity, there may be some elements that are unfamiliar to you. The Hierarchy window is lined with icons, which represent the components attached to each GameObject. This feature, which allows you to see at a glance what function each GameObject has, is a feature of the Editor extension called EditorEnhancements, which is included in the Editor folder. You can also turn components ON/OFF directly by clicking the icon. The Hierarchy window represents the current state of the program. It is important to keep things clear at a glance so you can always understand the status. 2-2. Running the sample scene Let's run the scene. This scene is divided into four parts. This scene is called State. The State will transition by pressing the space key. You can check the current status in the text display on the screen. No State name Status Process 1 Startup Starting state Transition to \"Wait\" immediately after playback. 2 Wait Waiting state Go to \"Play\" with space key 3 Play Running state The timer counts down with the space key and transitions to \"Result\". 4 Result Finishing state Transition to \"Wait\" with space key After confirming the behavior, stop and take a closer look at the scene. Note No matter what stage you are in developing your program, always have something working on hand. The current situation is that you already have something that works. When it comes to program development, you can't go wrong if you think of gradually improving the functionality and completeness of something that already works rather than building things up one by one from scratch. Note You can build your application at any time to experiment with its release state. One of the important steps is to imagine and confirm the final form at an early stage. 3. Scene composition From here, we will explain the overall structure of the current scene, and then proceed by explaining the role of each component and state transitions. Please check the Script Reference for detailed explanations of each program. 3-1. System group As the name suggests, the group organized by System objects in the Hierarchy contains objects with functions related to the entire project. If you want to add functions that are related to the whole, it would be a good idea to summarize them here as well. System / ApplicationSetting ApplicationSetting.cs To change the settings of the built application, you can read an external text file (.xml) and apply it to the program. By default, ApplicationSetting.xml is loaded from the StreamingAssets folder, and the required xml file is already placed in the project when you import the package. ApplicationSetting.xml <?xml version=\"1.0\" encoding=\"utf-8\"?> <data> <!-- debugging true/false --> <item name=\"IsDebug\" value=\"true\"/> <!-- seconds of game time --> <item name=\"GameTime\" value=\"10\"/> <!-- display text --> <item name=\"Text\" value=\"this is test.\"/> </data> Note The item values ​​provided in xml are samples and should be modified as appropriate. To prevent confusion, be sure to delete unnecessary items that you are not using. It is also a good idea to add comments such as explanations of setting values ​​and initial values. bool isDebug = ApplicationSetting.Instance.GetBool(\"IsDebug\"); int gameTime = ApplicationSetting.Instance.GetInt(\"GameTime\"); string text = ApplicationSetting.Instance.GetString(\"Text\"); Since it exists in the scene as a GameObject, this class itself is a MonoBehaviour that operates independently, and xml is loaded using Awake(). In other words, when using the value, it must be at the timing of Start() transition. Note If you do not understand the execution order of the functions provided by MonoBehaviour, please check the Unity documentation. In addition to the basic types, the values ​​that can be obtained also support arrays and Vector classes, and you can also specify the initial value when there is no value in the xml. Due to packaging in .unitypackage files, the default setting of the inspector is to read from STREAMING_ASSETS, but we recommend setting it to PROJECT_DIRECTORY. This is because the StreamingAssets folder hierarchy after building is deep, which is cumbersome when changing the actual values. Of course, after changing the loading location settings, please move the xml file to the appropriate location. If the loading location is PROJECT_DIRECTORY, it is the location where the Assets folder is located, directly under the project folder. System / ResolutionHelper StandalonePlayerResolutionHelper.cs Built Windows Unity applications save their window resolution information in the registry at runtime. The application window will inherit this value the next time it is started, but if the resolution is unexpectedly changed to the wrong resolution (for example, if the display cable is disconnected), that information will remain in the registry. it will no longer be displayed at the normal resolution. To avoid this behavior, which is a Unity specification, this component deletes the resolution information from the registry when the application closes. Enter the information along with the build settings (CompanyName/ProductName) in the inspector. Also, this feature is only for Windows and should be removed if you are targeting other platforms as it is not needed. Note Please note that this function operates in MonoBehaviour's \"OnApplicationQuit()\", so it will only be executed during normal termination processing such as \"closing the window\" or \"calling Application.Quit()\". It will not be executed if it is forcibly terminated from Task Manager, etc. UPS: Windows shutdown commands from uninterruptible power supplies are also not executed. System / EventSystem EventSystem This is a standard Unity system object that drives operation event processing in uGUI. 3-2. Managers group This is a group of objects that control the basis of this framework. Please understand that normally there is no need for manager classes other than those provided here. When developing a program, it is easy to create a \"XXX manager\" that has functions for managing various behaviors, but we have already prepared enough manager classes and necessary functions here. Basically, no other manager class is required. If you create an additional manager class, if you carefully review and consider the functional structure, you should realize that the class does not need to be a manager. Every class in a program has its own scope of work and is worth programming to perfectly accomplish only its own work. No need for unnecessary external management. Let's consider a managerial position in a real business organization. Are you managing every detail? How many managers do you have?The organization runs as long as each staff member fulfills their role. The programs must be the same. Managers [AppMain] AppMain.cs AppMain.cs, attached to /Managers, is the most important component within this framework. Among the programming design patterns, the singleton pattern instantiates a manager class as the only one in the application, and is responsible for the only access route to each manager class. Note There is a general opinion that using singletons is not a good idea. Of course, you should not use careless global reference variables without planning. In any case, you should consider the purpose and usage and consider the best method. Managers / SceneStateManager SceneStateManager.cs This is a manager class that manages the state. Performs state transition processing within the application. Implemented with state pattern. // StateBase class: Normal state changing. AppMain.Instance.sceneStateManager.ChangeState(\"PLAY\"); // AsyncStateBase class: State changin with fade. AppMain.Instance.sceneStateManager.ChangeAsyncState(\"PLAY\"); By calling as above, you can execute State transition processing, and at runtime, you can check the current State by checking the object name of SceneStateManager in the Hierarchy window. (Displayed within [ ]) At the beginning of the sample scene, four states were prepared. Prepare the State as a GameObject and place it under the SceneStateManager. Each State class that inherits the StateBase class is attached to the State GameObject in advance, and the following transition table information is set in the SceneStateManager inspector. parameter value StateName State name for invocation StateObj Reference to State object AsInitial Initial transition flag Let's take a look at the implementation within each State class.（StartupState.cs / WaitState.cs / PlayState.cs / ResultState.cs） If you inherit the StateBase class, you can define and use the following functions. Method Timing to be called StateStart() The first time after every transition to the next state after calling ChangeState(). StateUpdate() Every frame after calling ChangeState() and transitioning to the next state. StateExit() Immediately before transitioning from the current state after calling ChangeState(). StateExitAsync() Immediately before transitioning from the current state after the fade is completed after calling ChangeAsyncState(). These functions in the State class are called at specific times managed and controlled by the SceneStateManager, so they do not interfere with the basic functionality of MonoBehaviours such as Awake() Start() Update() Can be used in combination. Note If you do not understand the functions provided by MonoBehaviour, please check the Unity documentation. Also, when using this SceneStateManager, the first program entry point in the application is StateStart() of the State with AsInitial enabled. Defaults to StateStart() of StartupState. The flow is that from AppMain's Start(), WaitForEndOfFrame() calls SceneStateManager's InitState() at the final timing of the 0th frame, and the initial State's StateStart() is started. Note About StartupState This is the initial State that transitions first in the application, but nothing is implemented in StateStart() in StartupState.cs, and you can see that it immediately transitions to the next State. As mentioned in the comments in the source, please do not delete this State even if you think it is unnecessary. We recommend that you use it as is unless there are any particular problems. For example, suppose sometime in the future your application requires additional initialization processing before it starts. If you use a sensor, you will need to wait for the sensor device to complete startup. You may want to communicate and wait for the application to initialize with the result of an API request. Having this StartupState creates place for expansion. Now, let's consider the program structure without using State. For example, suppose you have multiple objects whose behavior needs to be switched in each scene. A possible configuration is that each manages multiple flags within Update() and branches using if statements. Each Update() within each object performs the switching process using similar flag management. You can easily imagine that the written parts of the code will be scattered in different files and locations, making management complicated. The state pattern is a design pattern for this kind of switching process. A class called State that represents a state allows processing to be grouped together using a horizontal common denominator. This method provides a nice place to organize your code. The explanation of SceneStateManager has become a bit long, but I will explain another important function, Context. // StateBase class: Normal state changing and context AppMain.Instance.sceneStateManager.ChangeState(\"PLAY\", context); // AsyncStateBase class: State changing with fade and context AppMain.Instance.sceneStateManager.ChangeAsyncState(\"PLAY\", context); You can pass a System.Object context to the second argument of ChangeState()/ChangeAsyncState(), and the passed State can receive and manipulate data in StateStart(). public class PlayState : StateBase { public override void StateStart(object context) { base.StateStart(context); // cast and use string test = (string)context; } } Since data can be passed between States, there is no need to prepare a GameObject for data storage or a separate reference destination for public data (avoid holding global static data). When is this Context feature useful? Imagine debugging a program built using this State pattern. For debugging, it is necessary to transition to the desired state. Is it necessary to perform an operation to transition sequentially from the beginning? NO. If the state is simply transitioning, it is \"a state that does not depend between states\", so debugging can be done more efficiently by directly transitioning to the target state. So, what if you need to create some necessary state in the middle (for example, check a checkbox) and make a transition? This is the case when each State creates the necessary State and transitions. This can be said to be a \"dependent State between State\". In this state, the dependency can be resolved by passing the Context. Specifically, by creating a data type class and passing the data type class that reflects state information using Context, each StateStart() can initialize with that data and reproduce the state. In any case, this method can be executed from an intermediate state by simply calling new() and passing in the data type class. This means that each state must start initializing on every StateStart(), relying only on the context passed from the previous state, regardless of the order of transitions. You will now be able to start your applications correctly every time. Here are some tips for development work. Before you start development work, make a list of the required features. Also, let's organize the application status by scene. Once you have roughly divided and organized the scene, apply it to the State. Isn't the program structure starting to be organized? This work is program design. Managers / TimeManager TimeManager.cs This is a manager class that manages timer events over time. By default, a timer called MainTimer (TimerEvent class) is provided and registered. In your code, you can set the event and start the timer using the following method. Add timers as needed. Please be careful as increasing the number of timers will make starting/resetting them difficult to manage. You may also want to consider ways to reuse the same timer. // Set the timer completion event. Note that += adds an event each time it is called. AppMain.Instance.timeManager.mainTimer.OnCompleteTimer += (sender) => { Debug.Log(\"OnCompleteTimer\"); }; // Set a timer event every second. Note that += adds an event each time it is called. AppMain.Instance.timeManager.mainTimer.OnTimer += (sender, sec) => { Deug.Log(\"OnTimer:\" + sec.ToString()); }; // Start timer. You can also specify seconds and repeat settings. AppMain.Instance.timeManager.mainTimer.StartTimer(10); Managers / SoundManager SoundManager.cs This is a manager class that collectively manages sounds within an application. In general, sound management in Unity tends to be complicated. The reason for this is that the AudioSource components that play the sound are created and placed for each sound material, so they are managed in different locations because they are played and managed individually. This manager class provides simple sound playback management by consolidating all settings into one place. It has the concept of layers and clips, and layers can be set for each audio group, and the audio volume can be set for each layer. Also, set the layer name to be recalled during playback. Set the actual audio material for the clip, and set the clip name in the same way. The code is played as shown below, and by default it is played with overlap settings. When playing background music, you can also specify loop playback using arguments. // Normal playback AppMain.Instance.soundManager.Play(\"SE\", \"CLICK\"); // Loop playback without overlap AppMain.Instance.soundManager.Play(\"BGM\", \"CLIP\", false, true); The AudioSource required for playback is automatically generated and managed internally, so you can easily play it without worrying about anything. 3D Layer also requires placement information for 3D audio settings, so you can set up a GameObject with your own AudioSource. Managers / UserInputManager UserInputManager.cs This is a manager class that aggregates user input processing. We have provided some general-purpose key inputs, but if you need other inputs, you can add them to this class to consolidate input processing in one place and improve the visibility of your program. Masu. The preset key inputs are as follows. key function Esc Quit application. D Toggle debugging features. R Reload ApplicationSetting.xml Backspace Take a screenshot of the current GameView and save it to your desktop. Note If keyboard input operations are required, such as entering a name, it must be disabled. Managers / DebugManager DebugManager.cs Manage debugging functionality within your application. Specifically, this manager class has a debug state flag isDebug, and each debug function is managed by this flag. if(AppMain.Instance.debugManager.isDebug) Debug.Log(\"debug mode\"); else Debug.Log(\"not debug mode\"); The initial setting of this flag can be changed using the IsDebug item in ApplicationSetting.xml, and the debug state can be toggled by pressing the D key using the UserInputManager. Since the external package IngameDebugConsole is pre-installed, it is displayed in synchronization with the debugging state (the same is true when using the Graphy package). When adding other debugging features, it is a good idea to use a similar implementation and manage them using isDebug. This GameObject also has a VisibleMouseCursor.cs component attached to it, which shows/hides the mouse cursor. You can set the display state with the UseMouse item in ApplicationSetting.xml. Mouse cursor display is not necessary in touch panel applications, but it is needed during debugging, so this manager class is responsible for display management. 3-3. Cameras group A group that organizes camera objects. We recommend adding the Depth parameter value to the beginning of the camera object's object name, as this makes the rendering order clear at a glance. It's a simple rule, but since it can be checked immediately at any time, it can be difficult to make mistakes in settings. Don't forget to keep yourself organized with a clear Hierarchy window that represents the current state of your application. Also, make sure that each camera object has a CameraGizmoDrawer.cs component attached. This component draws a view frustum representing the camera's field of view in the Editor's Scene view display. In normal Unity, the viewing frustum is drawn only for the selected camera, but it will now be drawn even when it is not selected, making it easier to check the current state of the scene. 3-4. Environments, GUIs, Objects group Other groups are placeholders. It is a good idea to organize Light objects etc. into \"Environments\", GUI related objects into \"GUIs\", and 3D models etc. into \"Objects\". Again, keeping your data organized is important and will directly lead to structured and bug-free programs. Also, use the Hierarch window, which allows you to visually manage the state of a running program, to always keep track of data and objects where you can see them. will assist you. 4. In-project resources This section explains the resources in the project data. 4-1. / Editor AssetPostprocessUTF8Encode.cs Editor extension. Checks the text encoding of all .cs files imported into the project and automatically converts them to UTF8 (BOM). This is to prevent Japanese characters from being garbled if the source code file is not UTF8(BOM) encoded. EditorEnhancements Editor extension. Displays component icons in the Hierarchy window. There are also some helper functions, such as displaying file extensions in the Project window, which can be enabled or disabled from the Preference settings in the menu. StateGenerator Editor extension. This is a helper function that can be used when creating a new State class. Available from the menu: EditorScript/GarageKit/StateGenerator. 4-2. / Plugins I18N.CJK.dll Managed (for C#) DLL for handling Japanese code Shift_JIS in C#. Log4Net This is an asset that makes Log4Net, a C# logging library, compatible with Unity. Normally, when using Log4Net, detailed settings are required, but all of them are hidden inside, so you can use it just by placing the Log4Net prefab in the folder in the scene. The output log will be created in a Log folder directly under the project folder and saved as a daily file. // Also output to Debug.Log at the same time Log4Net.Logger.Log(LOG_LEVEL.INFO, \"メッセージ\"); Microsoft.Win32.Registry.dll This is the dll used by StandalonePlayerResolutionHelper.cs explained in 3-1. System / ResolutionHelper to access the registry. 4-3. / Prefabs Utils / UI / MovieControllPanel This is a prefab for easily setting up a control panel for video playback. To use it, you will need the external package AVProVideo. Also, please enable the #define definition in the Scripts/Utils/UI/UIMovieControllPanel.cs source code and then configure the prefab inspector settings. Utils / VR_UI / CanvasGroupGuideArrow Prefab for displaying arrows when guiding the line of sight in VR, etc. Utils / VR_UI / CanvasGroupTelop Prefab to easily fade in and out text captions in VR, etc. 4-4. / Scenes The framework of this package basically assumes a work flow in which Main.unity is customized. Lighting data associated with the scene file (data when baking with lighting settings) is automatically created in the same layer as the scene file, so it is a good idea to organize them here. Examples You can see examples of how to use each script in the sample scenes. Scene Content Script using ApplicationSettingExample Sample of external configuration file. ApplicationSetting.cs CameraControllExample Sample of camera operation. FlyThroughCamera.cs PinchZoomCamera.cs OrbitCamera.cs UrbanViewerLikeCamera.cs Panorama360Camera.cs MultipleSceneExample Sample for changing SceneStateManager settings and using multiple scenes. SceneStateManager.cs EventExample Sample of each event processing. TimelineEventActionList.cs TimerEvent.cs ButtonObjectEvent.cs SevenTapLikeAndroid.cs LogExample Sample log output. Log4Net.cs TimelinedStateExample Sample state using time-controlled timeline. TimelinedSceneStateBase.cs VRGuiExample Sample of VR_UI prefab usage. UIFadeTelop.cs VRGazeGuideArrow.cs 4-5. / Scripts The Utils folder contains useful scripts for this package. For details of each script, please refer to Script Reference. It's a good idea to create and organize folders by functional category of scripts or by namespace in C# (not a folder hierarchy = namespace like in Java). 4-6. / Shaders The /ShaderLib folder contains custom shaders, and they are listed under Custom/ShaderLib from the shader selection in material settings. We have made it possible to determine the function by the shader name, but we will introduce the ones that are relatively easy to use. Shader Effect Unlit-MaterialAlpha No lighting effects, texture colors based on color values ​​are displayed as is. Unlit-CombineAlpha Texture for alpha can be added to Unlit-MaterialAlpha. Unlit-SeparateAlpha Texture for alpha can be set as a separate image in Unlit-MaterialAlpha. ObjectMask Clear the previously drawn color buffer by drawing the 3D mesh \"Transparent\". ShadowPlane Draw only the shadow cast by the light. Contrast Perform level correction on the set texture and adjust contrast. 4-7. / Textures Frequently used images such as test patterns are available. 4-8. StreamingAssets / UnityResolutionReset.exe This is an .exe file that extracts the internal functions of StandalonePlayerResolutionHelper.cs explained in 3-1. System / ResolutionHelper so that it can be executed independently. You can forcibly delete resolution information from the registry by running it on the command line. How to run $ UnityResolutionReset.exe {CompanyName} {ProductName}"
  },
  "Tutorial_ja/doc.html": {
    "href": "Tutorial_ja/doc.html",
    "title": "初学者向けチュートリアル | Project Starter Package Doc",
    "keywords": "初学者向けチュートリアル このチュートリアルは初学者向けですが、ツールの基本操作などの解説は行なっていません。 Unity で開発する上での Tips を交えつつ、開発初期段階の開発フローの説明、当パッケージの利用方法を紹介し、その中でプログラムコード内の考え方等を網羅的に解説していきます。 GarageKit for Unity とは？ 基本的なシーンの状態遷移機能をテンプレート化、いくつものユーティリティスクリプトとともに C# のフレームワークとして利用できるようにした便利 Unity パッケージです。 プログラミングデザインパターンの中の一つ、State パターンをベースにした遷移システムは、基本ルールを学ぶことで、あらゆるケースに対応できるようになります。コード内に一定のルールを持つことは重要です。交通整理されて統一感のあるコードベースが、バグを減らし秩序をもたらすきっかけになるでしょう。 ほとんどの機能は Unity MonoBehaviour ライフサイクルに則って単体コンポーネント化されており、GameObject にスクリプトをアタッチするだけで動作します。フレームワークレイヤーとしては層の薄いものとなっているので、他のアセットを組み合わせて利用するのも容易です。 その名前の通り、プロジェクトの開始を加速させるためのツールです！ 1. 準備 1-1. プロジェクトの作成 新規プロジェクトを作成します。 1-2. PackageManager の設定 GarageKit を利用する際は、幾つかの依存するライブラリのインポートが必要になります。 （GarageKit.unitypackage をインポート後でも問題ありません。） メニューから Window/PackageManager を開きます。 最初に不要なパッケージは削除してしまって構いません。必要になったら都度追加するのが良いでしょう。 Unity は初期状態でいろいろインポートされています。ビルド容量等にも関係してくるため、できるかぎり不要なパッケージは削除するようにしましょう。不必要なパッケージが原因の問題に遭遇するケースもあります。 作業開始時点では、UnityUI、TextMeshPro と VisualStudioEditor があれば十分でしょう。（依存関係にあるパッケージは自動でインポートされます。） 以下のパッケージがプロジェクトにインポートされていなければ、追加インポートします。 from UnityRegistry TextMeshPro: uGUI でテキスト表示を扱うためのパッケージ from AssetStore DOTween: アニメーション用のスクリプトパッケージ(Free) https://id.unity.com/en/conversations/cdefce43-9b11-49c5-9c4a-d3a63e30674000bf 1-3. OpenUPM 次に、OpenUPM から以下のパッケージを追加インポートします。 Note OpenUPM: Unity ライブラリのオープンソースのパッケージマネージャ / レジストリ。利用したことが無い場合はこの機会に使い方を学習しましょう。 https:/openupm.com/docs/getting-started-cli.html In-game Debug Console: 主にデバッグ用途で実行時にランタイムコンソールを表示するパッケージ https:/openupm.com/packages/com.yasirkula.ingamedebugconsole/ UniTask: C# の非同期処理を Unity で扱い易くするパッケージ https:/openupm.com/packages/com.cysharp.unitask/ (Win)コマンドプロンプト / (Mac)ターミナル を開き、プロジェクトのディレクトリに移動して、上記2つのパッケージの openupm コマンドを実行します。 サイト内の右上のボタンをクリックすると必要なコマンドがクリップボードにコピーされるので便利です。そのままペーストして実行します。 Unity に戻り、Project ウィンドウを確認します。 Packages ディレクトリについて PackageManager や OpenUPM でインポートされたパッケージは、プロジェクトデータとは区別されて Packages ディレクトリとして管理されます。 Packages ディレクトリとして管理されている外部パッケージは自分で編集することができません。これは外部パッケージのソースコードを壊すことができないという点で安全であると言えます。また、作業 PC 環境の移動が必要になった場合や、他人にプロジェクトデータを渡す際など、プロジェクトデータ復元の際、指定パッケージのダウンロードができれば、必ず環境の再現が可能であるという意味にもなります。 もちろん、どうしても改造が必要な場合も存在します。この場合は PackageManager を利用せずに、パッケージデータを手動でプロジェクトにインポートして管理することで編集が可能になります。 1-4. GarageKit パッケージのインポート それでは、GarageKit.unitypackage を Project ウィンドウにドラッグドロップしてインポートします。 インポートが完了すると、プロジェクト設定環境によってエラーが表示される場合があります。プロジェクト設定を変更して修正していきます。 メニューから File / BuildSetting を開き、TargetPlatform を Windows にします。 メニューから File / BuildSetting / PlayerSetting を開き、Configuration の項目から ApiConpatibilityLevel を .NET Framework に変更します。 Note エラーが表示されるソースは SerialPortController.cs と StandalonePlayerResolutionHelper.cs です。.NET Standard 2.1 にはコンパイルに必要なクラスが含まれていないため表示されるエラーです。 1-5. プロジェクト構成の整理 エラーが解決できたら、再度 Project ウィンドウを確認します。 手動インポートしたデータがフォルダに分かれて追加されています。プロジェクト初期作成で自動作成されるサンプルシーンのデータは不要なので Scenes フォルダごと削除します。 プロジェクトのデータは全てこの Project ウィンドウで管理することになります。このウィンドウは実際のディレクトリ内のファイルの状態が表示されています。 Project ウィンドウのファイルを選択した状態で右クリックメニュー(Win)Show in Explorer / (Mac)Reveal in Finder から OS のファイルブラウザで開くことができます。実際のフォルダの場所を確認してみてください。 Unity に戻り、__ProjectName__ フォルダの名前を実際の作業プロジェクト名に変更します。Project ウィンドウでリネーム操作をしてください。 Note __ をつけたままにすることをお勧めしますが、任意です。これはプロジェクトデータフォルダが他のフォルダに埋もれてしまわないように、見つけやすくする有効な手段の一つです。ProjectWindow では名前順に自動ソートされます。 Note また、以降全ての開発に関わる作業において、日本語ファイル名はできるだけ利用しないようにしてください。 プログラム開発において日本語文字（2バイト文字）は今だ二級市民であり、不具合発生の原因になる場合があります。 Assets 以下の第一階層はデータ整理の重要な起点です。 通常、プロジェクトの終盤にはあらゆるデータがプロジェクトに取り込まれているため、戦略無しに作業を進めていてはプロジェクトフォルダ内は簡単にカオスとなるでしょう。（直近の作業中は問題無いかもしれません。時間が経って久しぶりにデータを開いたときにすぐに把握できるでしょうか？他人がプロジェクトデータを引き継いだ場合はどうなるでしょうか？） Assets 以下にはすでに他のフォルダも展開されています。外部の .unitypackage を手動でインポートした場合、多くの場合は第一階層にデータが展開されます。行儀の良いパッケージであれば、一つのフォルダにまとまっている場合が多いので、Assets 以下第一階層には自然とインポートパッケージごとのフォルダが作成されます。 プロジェクトデータのフォルダ __ProjectName__ もパッケージの一つと考えればデータ整理のルールは明確になります。この先、外部の.unitypackage をインポートする際は、それぞれ第一階層で別フォルダにまとめて管理するようにしましょう。 現状の Assets 以下、第一階層は以下のフォルダ構成になっています。 Assets |- __TestProject__ : プロジェクトデータ |- StreamingAssets : Unity 標準の外部ファイル読み込み用フォルダ プロジェクト内で利用する各種データのためのフォルダをあらかじめ用意しています。この中でデータを整理するようにし、プロジェクト内のデータの位置を常に把握するように心掛けましょう。 Assets |- __TestProject__ |- Animations : アニメーションデータ用(.anim) |- Editor : Editor スクリプト |- Fonts : フォントデータ用(.otf .ttf など) |- Materials : マテリアル用(.mat) |- Meshes : メッシュデータ用(.mesh) |- Models : 3D モデルデータ用(.fbx など) |- Plugins : プラグイン(.dll など) |- Prefabs : プレハブデータ用 |- Scenes : シーンデータ用(.unity) |- Scripts : スクリプト用(.cs) |- Shaders : シェーダー用(.shader など) |- Sounds : 音声ファイル用(.wav .mp3 など) |- Textures : 画像ファイル用(.png .jpg など) データや情報を上手に整理することは、プログラムの基本だということを忘れないでください。 プログラミングでは良く聞くことの多い「プログラミングデザインパターン」ですらも、根本的にはソースコードの整理術の話です。どのように整理して構造化すると良いか？という知見の話であり、構造を考えやすくするための方法論であり、結果的には修正しやすく拡張しやすいプログラムの構築方法に繋がっていきます。 特殊フォルダについて Unity ではあらかじめ予約されている決まった名前にすることで、特殊な動作をするフォルダがいくつか存在します。StreamingAssets フォルダもその内の一つです。 よく見るものでは以下のようなものがあります。 フォルダ名 機能 StreamingAssets Unity 標準の外部ファイル読み込み用フォルダ。ビルド時に自動でオリジナルファイルのままコピーされパッケージングされる。 Resources ビルドされる際にコンパイル済みデータとしてパッケージングされる。古い機能であり利用は非推奨。 Editor UnityEditor 自体の機能を拡張する Editor スクリプトを配置する。中のソースファイルは自動でコンパイルされ、Editor に即時反映される。 Plugins プラグインを配置する。Windows の場合は C++ や C# で作成された一般的な .dll を配置し、C# のソースからアクセスして利用可能。 Plugins / iOS iOS をターゲットにする場合に、Xcode プロジェクトに組み込まれてビルドされる。 Plugins / Android Android をターゲットにする場合に、.apk .aab または AndroidStudio プロジェクトに組み込まれてビルドされる。AndroidManifest.xml を配置した場合は、ビルド後処理で強制的に上書きできる。 Note この他にも存在するので Unity ドキュメント で確認しておくと良いでしょう。 1-6. Git 実行する準備が整いました。が、実行して作業を始める前にバージョン管理ツールである Git を使って現在の状態をコミットします。これは最も重要な開発作業の一つです。 Note Git の利用方法がわからない場合、まずは基本操作である、リポジトリの初期化、ステージング、コミット、プッシュ の操作方法を確認してください（Unity の操作ではないため、ここでは詳しく説明は行いません）。 Unity では プロジェクトフォルダ以下 を Git のバージョン管理対象にしますが、全てのデータを管理する必要はありません。Unity プロジェクトフォルダ内には管理不要のデータが多く存在し（自動で生成されるキャッシュや、毎コンパイル時の中間ファイルなど）、それぞれファイル容量も大きいため、それらを除くために .gitignore の設定を行います。 Git 初期操作例 プロジェクトフォルダ内で Git リポジトリの初期化を行います。 .gitignore ファイルを用意して、管理対象外フォルダの設定をします。github には各開発環境ごとのサンプル gitignore があるので、そのままコピーしてくるのが簡単です。Unity に限らずどの開発環境でも利用できます。 https:/github.com/github/gitignore/blob/main/Unity.gitignore ファイルをステージングして初回コミットします。 これでいつでも作業をリセットし、ここに戻ってこれるようになりました。開発中は各作業の中間では必ず commit していきます。サーバーにあるリモートリポジトリへの push も忘れないでください。 Note Git を利用することはデータバックアップの意味でもあります。Git を利用していつでもどの作業バージョンにでも復元できるので、以下の行為は意味がありません。実施しているのなら止めて Git の機能を利用するようにしてください。 日付名で作業フォルダをコピーしておくこと。 プロジェクト内に2度と利用しない過去のデータを「一応」含めておくこと。 シーン内にもう既に利用されていない古いオブジェクトを非表示で置いておくこと。 ソースコード内に使われていない古いコードを残しておくこと。 2. 実行 2-1. サンプルシーンを開く __ProjectName__/Scenes/Main.unity を開きます。 デバッグ用の追加アセットをインポートしていないのでエラーが表示されますが、今は無視して構いません。Managers / DebugManager 以下にある Missing Prefab 状態の [Graphy] オブジェクト を削除します（必要であれば AssetStore から DL して事前にインポートしておくことで利用することもできます）。 Graphy: 実行時のFPSや使用メモリを確認表示できるパッケージ https:/assetstore.unity.com/packages/tools/gui/graphy-ultimate-fps-counter-stats-monitor-debugger-105778?locale=ja-JP このシーンでは、基本的に必要なものは既にセットアップ済みとなっており、プログラム設計が固まっているのであれば、ここからすぐにでも開発作業を始められます。いわゆる開発環境での Scaffolding というもので、作業最初の面倒で煩わしい部分をショートカットします。 また、すでに Unity を触っているならば見慣れない要素があるかもしれません。Hierarchy ウィンドウにはアイコンが並んでいますが、これは各 GameObject にアタッチされているコンポーネントが表示されてます。 GameObject の一つ一つが何の機能を持っているのか一目瞭然となるこの機能は Editor フォルダに入っている EditorEnhancements という Editor 拡張の機能です。アイコンをクリックすることでコンポーネントを直接 ON / OFF することも可能です。 Hierarchy ウィンドウは、現在のプログラムの状態を表します。常に状態を把握するために一目瞭然にしておくことは重要です。 2-2. サンプルシーンの実行 シーンを実行してみましょう。 このシーンでは場面が以下の4つに分かれています。この場面を State と呼びます。スペースキーを押すことで State が遷移していきます。画面のテキスト表示で現在の状態を確認できます。 No ステート名 状態 処理 1 Startup 実行開始 再生後すぐに Wait に遷移 2 Wait 待機状態 スペースキーで Play に遷移 3 Play 実行状態 スペースキーでタイマーがカウントダウンし Result に遷移 4 Result 完了状態 スペースキーで Wait に遷移 挙動を確認したら停止して、シーンを細かく見てくことにします。 Note プログラム開発中はどの段階であっても、常に動くものを手元に置くようにしてください。現状がすでに動くものが手元にある状態です。プログラム開発は、「ゼロから一つ一つ積み上げて行く」という作業イメージではなく、「すでに動作するものを機能や完成度を徐庶に上げて行く」というイメージで作業をすると間違いがありません。 Note アプリケーションをいつの段階でもビルドして、リリース時の状態を試してみることができます。最終形を早い段階でイメージして確認しておくのも重要な工程の一つです。 3. シーン構成 ここからは、現在のシーンの全体構成から解説し、各コンポーネントの役割やステート遷移の説明などの順で進めていきます。各プログラムの詳細解説はスクリプトリファレンスで確認してください。 3-1. System グループ Hierarchy 内の System オブジェクトでまとめられたグループにはその名前の通り、プロジェクトの全体に関わる機能のオブジェクトがあります。全体に関わる機能を追加する場合は同様にここにまとめていくと良いでしょう。 System / ApplicationSetting ApplicationSetting.cs ビルドされたアプリケーションの設定変更のため、外部テキストファイル (.xml) を読み込んでプログラムに反映させることができます。デフォルトは StreamingAssets フォルダから ApplicationSetting.xml を読み込むようになっており、必要な xml ファイルはパッケージをインポート時にすでにプロジェクトに配置されています。 ApplicationSetting.xml <?xml version=\"1.0\" encoding=\"utf-8\"?> <data> <!-- デバッグ true/false --> <item name=\"IsDebug\" value=\"true\"/> <!-- ゲーム時間 秒 --> <item name=\"GameTime\" value=\"10\"/> <!-- 表示テキスト --> <item name=\"Text\" value=\"this is test.\"/> </data> Note xml で用意されている項目値はサンプルであり、適宜修正して利用します。混乱防止のため、利用していない不必要な項目は必ず削除してください。 また、設定値の説明や初期値などコメントを追加しておくと良いでしょう。 bool isDebug = ApplicationSetting.Instance.GetBool(\"IsDebug\"); int gameTime = ApplicationSetting.Instance.GetInt(\"GameTime\"); string text = ApplicationSetting.Instance.GetString(\"Text\"); GameObject としてシーンに存在することから、このクラス自体も単独動作する MonoBehaviour であり、 xml の読み込みは Awake() で行われています。つまり値を利用する際は Start() 移行のタイミングである必要があります。 Note MonoBehaviour が用意する関数の実行順を理解していない場合は、Unity ドキュメントを確認してください。 取得できる値は基本型の他、配列や Vector クラスもサポートし、xml に値が無い場合の初期値も指定できます。 .unitypackage ファイルへのパッケージングの都合上、インスペクタのデフォルト設定が STREAMING_ASSETS からの読み込みとなっていますが、PROJECT_DIRECTORY に設定することをお勧めします。ビルドした後の StreamingAssets フォルダ階層が深い場所にあるため、実際の値変更時に煩わしいためです。もちろん、読み込み場所の設定変更後は xml ファイルを該当位置に移動してください。読み込み場所が PROJECT_DIRECTORY の場合は Assets フォルダがある場所、プロジェクトフォルダの直下です。 System / ResolutionHelper StandalonePlayerResolutionHelper.cs ビルドされた Windows の Unity アプリケーションは、実行時自身のウィンドウ解像度情報をレジストリに保存します。次回起動時もその値を引き継いでアプリケーションウィンドウが表示されますが、不意に誤った解像度に変更されてしまった場合（ディスプレイケーブル接続が切れた場合など）、その情報がレジストリに残ってしまう影響で、正常な解像度で表示されなくなってしまいます。 Unity の仕様であるこの挙動を回避するため、このコンポーネントはアプリケーション終了時にレジストリから解像度情報を削除するという動作をします。 インスペクタには、ビルド設定と一緒の情報（CompanyName / ProductName）を入力してください。また、この機能は Windows 専用であり、その他のプラットフォームをビルドターゲットとする場合は不要なので、削除するようにしてください。 Note 一点注意としては、この機能は MonoBehaviour の OnApplicationQuit() で動作するため、「ウィンドウを閉じる」「Application.Quit() を呼ぶ」などの正常終了処理時のみに実行され、タスクマネージャーなどからの強制終了の場合等には実行されません（UPS:無停電電源装置等からの Windows シャットダウンコマンドの場合も動作しません）。 System / EventSystem EventSystem uGUI での操作イベント処理を駆動させるための Unity 標準の必須システムオブジェクトです。 3-2. Managers グループ このフレームワークの根本を司るオブジェクト群です。通常、マネージャークラスはここに用意されている以外は必要が無いことを理解してください。 プログラム開発を進める上では、いろいろな挙動を管理するための機能を持つ XXX マネージャー を安易に作成しがちですが、ここにはすでに十分なマネージャークラスと必要機能を用意済みです。基本的にはこれ以外のマネージャークラスは必要ありません。 もしも、追加でマネージャークラスを作りたくなってしまった場合、機能構成をよく見直して検討すれば、そのクラスはマネージャーでは無くても良いことに気づくはずです。プログラム内のあらゆるクラスはそれ自身の仕事範囲をもち、自分の仕事のみを完璧にこなすようにプログラムするべきです。 不必要に外から管理される必要は無く、不必要に管理をする必要もないのです。現実の会社組織のマネージャー職を考えてみてください。細かい部分までいちいち全て管理していますか？マネージャーは何人もいますか？スタッフがそれぞれ役割をこなすことで組織は回っていきます。プログラムも一緒のはずです。 Managers [AppMain] AppMain.cs /Managers にアタッチされている AppMain.cs は、このフレームワーク内で最も重要なコンポーネントです。 プログラミングデザインパターンのうち、シングルトンパターンによりアプリケーション内の唯一の存在としてインスタンス化され、各マネージャークラスへの唯一のアクセス経路を受け持ちます。 Note 一般的にシングルトンの利用は良くないという意見があります。もちろん計画性のない不用意なグローバル参照の変数は利用するべきではありません。どんな場合も目的と使い方を検討し、最適な方法を検討すべきです。 Managers / SceneStateManager SceneStateManager.cs State を管理するマネージャークラスです。アプリケーション内の状態遷移処理を行います。一般的なステートパターンと言われるものの Unity 実装になっています。 // StateBase クラスの通常遷移 AppMain.Instance.sceneStateManager.ChangeState(\"PLAY\"); // AsyncStateBase クラスのフェード付き遷移 AppMain.Instance.sceneStateManager.ChangeAsyncState(\"PLAY\"); 上記の様に呼ぶことで State 遷移処理を実行でき、実行時は Hierarchy ウィンドウ内 SceneStateManager のオブジェクト名で現在の State を確認できます。（[ ] 内に表示） サンプルシーンの初期では4つのステートが用意されていました。 State は GameObject として用意し、SceneStateManager 配下に配置します。State GameObject にはあらかじめ StateBase クラスを継承した各 State クラスがアタッチされており、SceneStateManager のインスペクタでは、以下の遷移用テーブル情報を設定します。 パラメータ 値 StateName 呼び出し用のステート名 StateObj State オブジェクトへの参照 AsInitial 初期遷移先のフラグ 各 State クラス内の実装を確認してみましょう。（StartupState.cs / WaitState.cs / PlayState.cs / ResultState.cs） StateBase クラスを継承すると以下の関数を定義して利用できます。 関数名 呼ばれるタイミング StateStart() ChangeState()をコール後、次のステートへ毎遷移後の最初 StateUpdate() ChangeState()をコール後、次のステートへ遷移後以降の毎フレーム StateExit() ChangeState()をコール後、現在のステートから遷移する直前 StateExitAsync() ChangeAsyncState()をコール後、フェードが完了後の現在のステートから遷移する直前 これらの State クラス内の関数は SceneStateManager により、管理制御された特定のタイミングで呼ばれることになるため、MonoBehaviour の基本関数である、Awake() Start() Update() 等と干渉せずに組み合わせて利用することができます。 Note MonoBehaviour が用意する関数を理解していない場合は、Unity ドキュメントを確認してください。 また、この SceneStateManager を利用している場合、アプリケーション内の一番最初のプログラム開始地点（エントリーポイント）は、AsInitial が有効な State の StateStart() です。デフォルトでは StartupState の StateStart() になります。流れとしては、AppMain の Start() から WaitForEndOfFrame() によって0フレーム目の最後のタイミングで SceneStateManager の InitState() が呼ばれ、初期 State の StateStart() が開始されます。 Note StartupState について アプリケーション内で最も最初に遷移する初期 State ですが、StartupState.cs の StateStart() では何も実装されておらず、次の State にすぐ遷移するのが確認できます。ソース内のコメントにも記述していますが、この State は不要だと思っても削除しないようにしてください。とくに問題がない限りそのまま利用するのをお勧めします。 例えば将来、アプリケーションが起動する前に初期設定処理が追加で必要になったとします。センサーを利用する場合などはセンサー機器の起動完了を待つ必要があるでしょう。通信を行って API リクエストの結果によりアプリケーションの初期化を待つ場合もあるでしょう。この StartupState があることで、機能拡張の「余地」が生まれます。 さて、ここで State を利用しない場合のプログラム構成を考えてみます。 例えば、各場面場面で挙動を切り替える必要があるオブジェクトが複数あったとします。それぞれが Update() 内でそれぞれ複数のフラグを管理し、if 文などで分岐処理する構成が考えられます。各オブジェクト内の各 Update() で、同じようなフラグ管理によって切り替え処理を行うわけです。 コード内の記述部分が、バラバラなファイルと場所に散らばることになり、管理が煩雑になるのが容易に想像できます。ステートパターンはこのような切り替え処理のためのデザインパターンです。State という状態を表すクラスによって、横串の共通項で処理をまとめることができます。この方法はコードをうまく整理できる場所を提供してくれます。 SceneStateManager の説明が少し長くなってきましたが、もう一つの重要機能 Context を解説します。 // StateBase クラスのコンテキストを渡しての通常遷移 AppMain.Instance.sceneStateManager.ChangeState(\"PLAY\", context); // AsyncStateBase クラスのコンテキストを渡してのフェード付き遷移 AppMain.Instance.sceneStateManager.ChangeAsyncState(\"PLAY\", context); ChangeState() / ChangeAsyncState() の 第2引数には System.Object context を渡すことができ、渡された State では StateStart() 内でデータを受け取って扱うことができます。 public class PlayState : StateBase { public override void StateStart(object context) { base.StateStart(context); // object型をキャストして扱う string test = (string)context; } } State 間でデータの受け渡しをすることができるため、データ格納用の GameObject であったり、public なデータの参照先を別途用意する必要がなくなります（global static なデータ保持はやめましょう）。 この Context 機能が有用になるケースとはどういった場合でしょうか。この State パターンの仕組みで構築されたプログラムのデバッグ作業を想像してください。 デバッグのため目的の State まで遷移が必要です。最初から順番に遷移させていく操作は必要でしょうか？ NO です。単純に遷移しているだけであれば「State 間で依存していない状態」なので、目的の State へ直接遷移させることで効率的にデバッグ作業が行えるでしょう。 では、途中で何らかの必要な状態を作り出して（例えばチェックボックスをチェックするなど）、遷移させる必要がある場合はどうでしょうか？それぞれの State で必要な状態を作り遷移している場合です。これは「State 間で依存している状態」と言えます。 この状態の場合、 Context の受け渡しによって依存を解消することができます。具体的にはデータ型クラスを作成し、Context により状態情報を反映したデータ型クラスを受け渡すことで、各 StateStart() ではそのデータで初期化して状態を再現することができます。 こうすると、どんな場合であっても、データ型クラスを new() して受け渡してやるだけで、途中の State からの実行が可能になります。つまり、各 State は遷移の順番には依存せず、前の State から渡される Context にのみ依存して、毎 StateStart() で初期化して始まるべきです。いつでも、どのタイミングからでも正しくアプリケーションを開始することができるでしょう。 ここで開発作業のコツを一つ紹介します。 まず開発作業を開始する前に、必要機能の一覧をリストアップしましょう。また、アプリケーションの状態を場面に分けて整理してみましょう。おおよそ場面の切り分け整理が出来たならば、それを State に当て嵌めていきます。 プログラム構成が整理され始めて来たのではないでしょうか？この作業こそがプログラム設計です。 Managers / TimeManager TimeManager.cs 時間経過によるタイマーイベントを管理するマネージャークラスです。デフォルトでは MainTimer というタイマー（TimerEvent クラス）を用意して登録されています。 コード内では以下の方法でイベント設定をし、タイマーを開始することができます。 タイマーは必要に応じて追加します。タイマーは数を増やすとスタート / リセットの管理が大変になるので気を付けてください。同じタイマーを使い回す方法も検討してみると良いでしょう。 // タイマー完了イベントを設定 +=は呼ばれるたびにイベントが追加されることに注意 AppMain.Instance.timeManager.mainTimer.OnCompleteTimer += (sender) => { Debug.Log(\"OnCompleteTimer\"); }; // タイマー毎秒イベントを設定 +=は呼ばれるたびにイベントが追加されることに注意 AppMain.Instance.timeManager.mainTimer.OnTimer += (sender, sec) => { Deug.Log(\"OnTimer:\" + sec.ToString()); }; // タイマーを開始（秒を指定 繰り返しなども設定可能） AppMain.Instance.timeManager.mainTimer.StartTimer(10); Managers / SoundManager SoundManager.cs アプリケーション内のサウンドを一括管理するマネージャークラスです。 一般的に Unity でのサウンド管理は煩雑になりがちです。音を再生する AudioSource のコンポーネントが、音素材ごとに作成されて配置されるため、それらをそれぞれ再生管理する都合上、管理場所がバラバラになってしまうのが原因です。 このマネージャークラスでは、それらを一箇所の設定にまとめることで、シンプルなサウンド再生管理を提供します。 レイヤーとクリップという概念を設けており、レイヤーには音声グループごとの設定が可能で、各レイヤーごとの音声ボリュームを設定することができます。また、再生時呼び出し用のレイヤー名を設定します。クリップには実際の音声素材を設定し、同様にクリップ名を設定します。 コード内では下記のように再生を行い、デフォルトではオーバーラップ設定で再生されます。BGM を再生する場合などは引数によりループ再生なども指定できます。 // 通常再生 AppMain.Instance.soundManager.Play(\"SE\", \"CLICK\"); // オーバーラップ無しでループ再生 AppMain.Instance.soundManager.Play(\"BGM\", \"CLIP\", false, true); 本来再生に必要な AudioSource は内部で自動生成され管理されているため、何も気にせずに簡単に再生が可能です。また、3D Layer では、3次元音声設定のための配置情報も必要となるため、自分で AudioSource を設定した GameObject を設定することができます。 Managers / UserInputManager UserInputManager.cs ユーザーの入力処理を一つにまとめるためのマネージャークラスです。汎用的に利用できるキー入力をいくつか用意していますが、他にも入力が必要な場合はこのクラスに追加していくことで、入力処理を一箇所にまとめることができてプログラムの見通しが良くなります。あらかじめ用意しているキー入力は下記になります。 キー 機能 Esc アプリケーションの終了 D デバッグ機能のトグル R ApplicationSetting.xml の再読み込み Backspace 現在の GameView をスクリーンショットしてデスクトップに保存 Note 開発を予定する機能として、名前入力などキーボード入力操作が必要な場合は無効化が必要です。 Managers / DebugManager DebugManager.cs アプリケーション内のデバッグ機能を管理します。具体的にはこのマネージャークラスはデバッグ状態フラグ isDebug を持っていて、各デバッグ機能はこのフラグによって管理されています。 if(AppMain.Instance.debugManager.isDebug) Debug.Log(\"debug mode\"); else Debug.Log(\"not debug mode\"); このフラグは ApplicationSetting.xml の IsDebug 項目で初期設定を変更でき、UserInputManager により D キー の入力でデバッグ状態をトグルできます。 外部パッケージの IngameDebugConsole をあらかじめ組み込んでいるため、デバッグ状態に同期して表示されるようになっています（Graphy のパッケージを利用している場合も同様です）。他のデバッグ機能を追加する際も同様の実装で、isDebug によって管理できるようにするとよいでしょう。 また、この GameObject にはマウスカーソルの表示 / 非表示を行う VisibleMouseCursor.cs コンポーネントもアタッチされています。 ApplicationSetting.xml の UseMouse 項目で表示状態を設定できます。タッチパネル動作のアプリケーションにおいてはマウスカーソル表示が不要となりますが、デバッグ時に必要となるためこのマネージャークラスが表示管理を受け持っています。 3-3. Cameras グループ カメラオブジェクトをまとめるグループです。カメラオブジェクトのオブジェクト名の先頭には Depth パラメータの値を付加しておくと、レンダリング順が一目瞭然となるため、おすすめします。簡単なルールですが、いつでもすぐに視認できるので、設定間違いも発生し辛くなるでしょう。 アプリケーションの現在の状態を表す Hierarchy ウィンドウを一目瞭然にして、常に整理しておくことを忘れないでください。 また、それぞれのカメラオブジェクトには、CameraGizmoDrawer.cs コンポーネントがアタッチされているのを確認してください。このコンポーネントは Editor の Scene ビュー表示に、カメラの視野範囲を表す視錐台を描画します。通常の Unity では選択状態のカメラのみ視錐台が描画されますが、非選択時にも描画されるようになるため、シーンの現状確認が容易になります。 3-4. Environments, GUIs, Objects グループ その他のグループはプレースホルダです。Light オブジェクトなどは Environments へ、GUI 関係のオブジェクトは GUIs へ、3D モデルなどは Objects へとまとめると良いでしょう。 繰り返しになりますが、データを常に整理しておくことは重要で、構造化されたプログラムやバグのないプログラムに直接繋がっていきます。また、動作中プログラムの状態を視覚的に管理できる Hierarch ウィンドウを利用して、データやオブジェクトを目が届く場所で常に把握しておくこと、それは頭の中でイメージするしかないプログラムの複雑な面を補助してくれます。 4. プロジェクト内リソース プロジェクトデータ内リソースを解説します。 4-1. / Editor AssetPostprocessUTF8Encode.cs Editor 拡張。プロジェクト内にインポートされた全ての .cs ファイルに対して、テキストエンコードを確認し、UTF8(BOM) に自動で変換します。ソースコードファイルが UTF8(BOM) エンコードではない場合、日本語が文字化けするための処置です。 EditorEnhancements Editor 拡張。Hierarchy ウィンドウにコンポーネントアイコンを表示します。また、Poject ウィンドウにファイル拡張子を表示するなどいくつかのヘルパー機能があり、メニューの Preference 設定から機能の有効 / 無効を設定できます。 StateGenerator Editor 拡張。State クラスを新規生成する際に利用できるヘルパー機能です。メニューから、EditorScript / GarageKit / StateGenerator で利用できます。 4-2. / Plugins I18N.CJK.dll C# で日本語コード Shift_JIS を扱うためのマネージド（C#用）DLL。 Log4Net C# のロギングライブラリである Log4Net を Unity 対応させたアセットです。通常 Log4Net を利用する際には細かな設定が必要になりますが全て内部に隠蔽しているため、フォルダ内にある Log4Net プレハブをシーンに配置するだけで利用可能です。出力されたログはプロジェクトフォルダ直下に Log フォルダ が作成され、日別ファイルで保存されます。 // Debug.Log にも同時に出力される Log4Net.Logger.Log(LOG_LEVEL.INFO, \"メッセージ\"); Microsoft.Win32.Registry.dll 3-1. System / ResolutionHelper で説明している StandalonePlayerResolutionHelper.cs がレジストリにアクセスするために利用している dll です。 4-3. / Prefabs Utils / UI / MovieControllPanel 動画再生用のコントロールパネルを簡単にセットアップするためのプレハブです。利用の際には別途 AVProVideo の外部パッケージが必要になります。また、Scripts/Utils/UI/UIMovieControllPanel.cs ソースコード内の #define 定義を有効にした上で、プレハブのインスペクタ設定を行ってください。 Utils / VR_UI / CanvasGroupGuideArrow VR などで、視線方向を誘導する際の矢印表示のプレハブ Utils / VR_UI / CanvasGroupTelop VR などで、テキストテロップのフェードインアウト表示を簡単に行うためのプレハブ 4-4. / Scenes 本パッケージのフレームワークは、基本的に Main.unity をカスタムしていくような作業フローを想定しています。 シーンファイルに紐づく Lighting データ（ライティング設定でベイク処理を行った際のデータ）などもシーンファイルと同じ階層に自動作成されるため、ここにまとめて整理しておくと良いでしょう。 Examples 各スクリプトの使用例をサンプルシーンで確認できます。 シーン 内容 使用スクリプト ApplicationSettingExample 外部設定ファイル機能のサンプル ApplicationSetting.cs CameraControllExample カメラ操作機能のサンプル FlyThroughCamera.cs PinchZoomCamera.cs OrbitCamera.cs UrbanViewerLikeCamera.cs Panorama360Camera.cs MultipleSceneExample SceneStateManager の設定を変更し、複数シーンを利用する場合のサンプル SceneStateManager.cs EventExample 各イベント処理のサンプル TimelineEventActionList.cs TimerEvent.cs ButtonObjectEvent.cs SevenTapLikeAndroid.cs LogExample ログ出力のサンプル Log4Net.cs TimelinedStateExample 時間制御のタイムライン機能を利用したステートのサンプル TimelinedSceneStateBase.cs VRGuiExample VR_UI プレハブの利用サンプル UIFadeTelop.cs VRGazeGuideArrow.cs 4-5. / Scripts Utils フォルダには、本パッケージの便利スクリプトが纏まっています。各スクリプトの詳細はコードリファレンスを参考してください。 スクリプトの機能カテゴリ別や C# の namespace ごとにフォルダを作成し、整理するのが良いでしょう（Java のようにフォルダ階層 = namespace ではありません）。 4-6. / Shaders /ShaderLib フォルダにはカスタムシェーダーを纏めており、マテリアル設定のシェーダー選択から、Custom / ShaderLib にリストされます。シェーダー名で機能が判断できるようにしていますが、その中で比較的利用し易いものを紹介します。 シェーダー 効果 Unlit-MaterialAlpha 照明効果無し、カラー値によるテクスチャ色をそのまま表示 Unlit-CombineAlpha Unlit-MaterialAlpha にアルファ用のテクスチャを追加で設定可能 Unlit-SeparateAlpha Unlit-MaterialAlpha にアルファ用のテクスチャを別画像で設定可能 ObjectMask 3D メッシュを「透明」で描画することで先に描画されているカラーバッファをクリアする ShadowPlane ライトで投影された影のみを描画する Contrast 設定されたテクスチャにレベル補正を行いコントラストを調整する 4-7. / Textures テストパターンなどいくつかの汎用的に利用できる画像素材を用意しています。 4-8. StreamingAssets / UnityResolutionReset.exe 3-1. System / ResolutionHelper で説明している StandalonePlayerResolutionHelper.cs の内部機能を切り出し、単体実行できるようにした .exe ファイルです。コマンドライン実行することでレジストリから解像度情報を強制削除できます。 実行方法 $ UnityResolutionReset.exe {CompanyName} {ProductName}"
  },
  "index.html": {
    "href": "index.html",
    "title": "GarageKit for Unity Doc | Project Starter Package Doc",
    "keywords": "GarageKit for Unity Doc [en] What is GarageKit ？ GarageKit is a Unity C# framework. It provides a template scene with a state transition system, some managers and state scripts, utility scripts and sample scenes, and a directory structure for your project. Current Version unity package 2021+ GarageKit_for_unity2021.unitypackage Beginners Tutorial You can use the Beginners Tutorial to learn how to use packages, the development flow, and the basic concept of programming. Scripts Reference For information on using scripts in packages, see the Scripts Reference. [ja] GarageKit とは？ GarageKit は Unity C# フレームワークです。状態遷移システムを備えたテンプレートシーン、いくつかのマネージャースクリプトと状態スクリプト、ユーティリティスクリプトとサンプルシーン、およびプロジェクトのディレクトリ構造を提供します。 Current Version unity package 2021+ GarageKit_for_unity2021.unitypackage 初学者向けチュートリアル 初学者向けチュートリアル を使用して、パッケージの使用方法、開発フロー、プログラミングの基本概念を学ぶことができます。 スクリプトリファレンス パッケージのスクリプトの使用については、スクリプトリファレンス を参照してください。"
  }
}